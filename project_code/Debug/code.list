
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c38  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f28  08006f28  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006f28  08006f28  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f28  08006f28  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f28  08006f28  00016f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000074  08006fa4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08006fa4  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125c7  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e4  00000000  00000000  000326a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00035a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e77  00000000  00000000  00036d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a6e2  00000000  00000000  00037baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192fd  00000000  00000000  00052291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d9db  00000000  00000000  0006b58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005214  00000000  00000000  000f8f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000fe180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d30 	.word	0x08006d30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006d30 	.word	0x08006d30

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__aeabi_d2uiz>:
 8000900:	004a      	lsls	r2, r1, #1
 8000902:	d211      	bcs.n	8000928 <__aeabi_d2uiz+0x28>
 8000904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000908:	d211      	bcs.n	800092e <__aeabi_d2uiz+0x2e>
 800090a:	d50d      	bpl.n	8000928 <__aeabi_d2uiz+0x28>
 800090c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000914:	d40e      	bmi.n	8000934 <__aeabi_d2uiz+0x34>
 8000916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d102      	bne.n	800093a <__aeabi_d2uiz+0x3a>
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	4770      	bx	lr
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	4770      	bx	lr

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f002 fa80 	bl	8002e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f813 	bl	8000972 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f000 f9b0 	bl	8000cb0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000950:	f000 f8e4 	bl	8000b1c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000954:	f000 f852 	bl	80009fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000958:	f000 f92c 	bl	8000bb4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800095c:	f000 f954 	bl	8000c08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000960:	f000 f97c 	bl	8000c5c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000964:	f000 f878 	bl	8000a58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  init();
 8000968:	f001 ffbc 	bl	80028e4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  loop();
 800096c:	f001 fff0 	bl	8002950 <loop>
 8000970:	e7fc      	b.n	800096c <main+0x2c>

08000972 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b090      	sub	sp, #64	; 0x40
 8000976:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	2228      	movs	r2, #40	; 0x28
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f005 fde7 	bl	8006554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800099c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a2:	2301      	movs	r3, #1
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 faf2 	bl	8003fa4 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009c6:	f000 fa0f 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ce:	2302      	movs	r3, #2
 80009d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2102      	movs	r1, #2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 fd5f 	bl	80044a8 <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009f0:	f000 f9fa 	bl	8000de8 <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3740      	adds	r7, #64	; 0x40
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a02:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <MX_I2C1_Init+0x54>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x58>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a3a:	f002 fe17 	bl	800366c <HAL_I2C_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a44:	f000 f9d0 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000090 	.word	0x20000090
 8000a50:	40005400 	.word	0x40005400
 8000a54:	000186a0 	.word	0x000186a0

08000a58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a76:	4a28      	ldr	r2, [pc, #160]	; (8000b18 <MX_TIM1_Init+0xc0>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a7c:	2247      	movs	r2, #71	; 0x47
 8000a7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000aa0:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000aa2:	f003 ff31 	bl	8004908 <HAL_TIM_IC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000aac:	f000 f99c 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4619      	mov	r1, r3
 8000abe:	4815      	ldr	r0, [pc, #84]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000ac0:	f004 fd74 	bl	80055ac <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000aca:	f000 f98d 	bl	8000de8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000ae6:	f004 f973 	bl	8004dd0 <HAL_TIM_IC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000af0:	f000 f97a 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	220c      	movs	r2, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000afc:	f004 f968 	bl	8004dd0 <HAL_TIM_IC_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8000b06:	f000 f96f 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000e4 	.word	0x200000e4
 8000b18:	40012c00 	.word	0x40012c00

08000b1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b42:	2263      	movs	r2, #99	; 0x63
 8000b44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72-1;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b4e:	2247      	movs	r2, #71	; 0x47
 8000b50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b5e:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b60:	f003 fe30 	bl	80047c4 <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 f93d 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b7c:	f004 f9c4 	bl	8004f08 <HAL_TIM_ConfigClockSource>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000b86:	f000 f92f 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b98:	f004 fd08 	bl	80055ac <HAL_TIMEx_MasterConfigSynchronization>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000ba2:	f000 f921 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000012c 	.word	0x2000012c

08000bb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <MX_USART1_UART_Init+0x50>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bdc:	220c      	movs	r2, #12
 8000bde:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bee:	f004 fd4d 	bl	800568c <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000bf8:	f000 f8f6 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000174 	.word	0x20000174
 8000c04:	40013800 	.word	0x40013800

08000c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <MX_USART2_UART_Init+0x50>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c14:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c40:	f004 fd24 	bl	800568c <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c4a:	f000 f8cd 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200001bc 	.word	0x200001bc
 8000c58:	40004400 	.word	0x40004400

08000c5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <MX_USART3_UART_Init+0x50>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c94:	f004 fcfa 	bl	800568c <HAL_UART_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c9e:	f000 f8a3 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000204 	.word	0x20000204
 8000cac:	40004800 	.word	0x40004800

08000cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a43      	ldr	r2, [pc, #268]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cdc:	4b3e      	ldr	r3, [pc, #248]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a3d      	ldr	r2, [pc, #244]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000ce2:	f043 0320 	orr.w	r3, r3, #32
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b3b      	ldr	r3, [pc, #236]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0320 	and.w	r3, r3, #32
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a37      	ldr	r2, [pc, #220]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b35      	ldr	r3, [pc, #212]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a31      	ldr	r2, [pc, #196]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2a:	482c      	ldr	r0, [pc, #176]	; (8000ddc <MX_GPIO_Init+0x12c>)
 8000d2c:	f002 fc6d 	bl	800360a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2160      	movs	r1, #96	; 0x60
 8000d34:	482a      	ldr	r0, [pc, #168]	; (8000de0 <MX_GPIO_Init+0x130>)
 8000d36:	f002 fc68 	bl	800360a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f243 0102 	movw	r1, #12290	; 0x3002
 8000d40:	4828      	ldr	r0, [pc, #160]	; (8000de4 <MX_GPIO_Init+0x134>)
 8000d42:	f002 fc62 	bl	800360a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481f      	ldr	r0, [pc, #124]	; (8000ddc <MX_GPIO_Init+0x12c>)
 8000d60:	f002 fab8 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d64:	2310      	movs	r3, #16
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4619      	mov	r1, r3
 8000d76:	481a      	ldr	r0, [pc, #104]	; (8000de0 <MX_GPIO_Init+0x130>)
 8000d78:	f002 faac 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d7c:	2360      	movs	r3, #96	; 0x60
 8000d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	4813      	ldr	r0, [pc, #76]	; (8000de0 <MX_GPIO_Init+0x130>)
 8000d94:	f002 fa9e 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4619      	mov	r1, r3
 8000daa:	480e      	ldr	r0, [pc, #56]	; (8000de4 <MX_GPIO_Init+0x134>)
 8000dac:	f002 fa92 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13;
 8000db0:	f243 0302 	movw	r3, #12290	; 0x3002
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <MX_GPIO_Init+0x134>)
 8000dca:	f002 fa83 	bl	80032d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40010800 	.word	0x40010800
 8000de4:	40010c00 	.word	0x40010c00

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <button_init>:
	uint16_t pin;
} button[NUMBER_OF_BUTTON];
/*
 * button[0]: indoor-open button
 * */
void button_init(void) {
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_OF_BUTTON; i++) {
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	e04f      	b.n	8000ea0 <button_init+0xac>
		button[i].reg[0] = button[i].reg[1] = button[i].reg[2] = RELEASE;
 8000e00:	492e      	ldr	r1, [pc, #184]	; (8000ebc <button_init+0xc8>)
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	3302      	adds	r3, #2
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	4929      	ldr	r1, [pc, #164]	; (8000ebc <button_init+0xc8>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	440b      	add	r3, r1
 8000e22:	3302      	adds	r3, #2
 8000e24:	7818      	ldrb	r0, [r3, #0]
 8000e26:	4925      	ldr	r1, [pc, #148]	; (8000ebc <button_init+0xc8>)
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	440b      	add	r3, r1
 8000e34:	3301      	adds	r3, #1
 8000e36:	4602      	mov	r2, r0
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	4920      	ldr	r1, [pc, #128]	; (8000ebc <button_init+0xc8>)
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	3301      	adds	r3, #1
 8000e4a:	7818      	ldrb	r0, [r3, #0]
 8000e4c:	491b      	ldr	r1, [pc, #108]	; (8000ebc <button_init+0xc8>)
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	701a      	strb	r2, [r3, #0]
		button[i].is_long_pressed = 0;
 8000e5e:	4917      	ldr	r1, [pc, #92]	; (8000ebc <button_init+0xc8>)
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
		button[i].is_pressed = 0;
 8000e72:	4912      	ldr	r1, [pc, #72]	; (8000ebc <button_init+0xc8>)
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	440b      	add	r3, r1
 8000e80:	3303      	adds	r3, #3
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
		button[i].timer = LONG_PRESSED_TIME;
 8000e86:	490d      	ldr	r1, [pc, #52]	; (8000ebc <button_init+0xc8>)
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	440b      	add	r3, r1
 8000e94:	3308      	adds	r3, #8
 8000e96:	2296      	movs	r2, #150	; 0x96
 8000e98:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_BUTTON; i++) {
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	ddac      	ble.n	8000e00 <button_init+0xc>
	}
	// port and pin were matched by hand
	button[0].port = BUTTON_PORT;
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <button_init+0xc8>)
 8000ea8:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <button_init+0xcc>)
 8000eaa:	60da      	str	r2, [r3, #12]
	button[0].pin = BUTTON_PIN;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <button_init+0xc8>)
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	821a      	strh	r2, [r3, #16]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	2000024c 	.word	0x2000024c
 8000ec0:	40010800 	.word	0x40010800

08000ec4 <button_read>:
/*
 * @brief:	read the value of all buttons
 * @para:	none
 * @retval:	none
 * */
void button_read(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_BUTTON; i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	e0d5      	b.n	800107c <button_read+0x1b8>
		button[i].reg[0] = button[i].reg[1];
 8000ed0:	496f      	ldr	r1, [pc, #444]	; (8001090 <button_read+0x1cc>)
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	440b      	add	r3, r1
 8000ede:	3301      	adds	r3, #1
 8000ee0:	7818      	ldrb	r0, [r3, #0]
 8000ee2:	496b      	ldr	r1, [pc, #428]	; (8001090 <button_read+0x1cc>)
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	701a      	strb	r2, [r3, #0]
		button[i].reg[1] = button[i].reg[2];
 8000ef4:	4966      	ldr	r1, [pc, #408]	; (8001090 <button_read+0x1cc>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	3302      	adds	r3, #2
 8000f04:	7818      	ldrb	r0, [r3, #0]
 8000f06:	4962      	ldr	r1, [pc, #392]	; (8001090 <button_read+0x1cc>)
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	3301      	adds	r3, #1
 8000f16:	4602      	mov	r2, r0
 8000f18:	701a      	strb	r2, [r3, #0]
		button[i].reg[2] = HAL_GPIO_ReadPin(button[i].port, button[i].pin);
 8000f1a:	495d      	ldr	r1, [pc, #372]	; (8001090 <button_read+0x1cc>)
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	330c      	adds	r3, #12
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	4958      	ldr	r1, [pc, #352]	; (8001090 <button_read+0x1cc>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	3310      	adds	r3, #16
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f002 fb4c 	bl	80035dc <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4618      	mov	r0, r3
 8000f48:	4951      	ldr	r1, [pc, #324]	; (8001090 <button_read+0x1cc>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	3302      	adds	r3, #2
 8000f58:	4602      	mov	r2, r0
 8000f5a:	701a      	strb	r2, [r3, #0]
		if (button[i].reg[0] == button[i].reg[1]
 8000f5c:	494c      	ldr	r1, [pc, #304]	; (8001090 <button_read+0x1cc>)
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	7819      	ldrb	r1, [r3, #0]
 8000f6c:	4848      	ldr	r0, [pc, #288]	; (8001090 <button_read+0x1cc>)
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4403      	add	r3, r0
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4299      	cmp	r1, r3
 8000f80:	d179      	bne.n	8001076 <button_read+0x1b2>
				&& button[i].reg[1] == button[i].reg[2]) {
 8000f82:	4943      	ldr	r1, [pc, #268]	; (8001090 <button_read+0x1cc>)
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	3301      	adds	r3, #1
 8000f92:	7819      	ldrb	r1, [r3, #0]
 8000f94:	483e      	ldr	r0, [pc, #248]	; (8001090 <button_read+0x1cc>)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4403      	add	r3, r0
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4299      	cmp	r1, r3
 8000fa8:	d165      	bne.n	8001076 <button_read+0x1b2>
			//stable state, not bouncing
			if (button[i].reg[2] == PRESSED) {
 8000faa:	4939      	ldr	r1, [pc, #228]	; (8001090 <button_read+0x1cc>)
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	3302      	adds	r3, #2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d133      	bne.n	8001028 <button_read+0x164>
				button[i].is_pressed = 1;
 8000fc0:	4933      	ldr	r1, [pc, #204]	; (8001090 <button_read+0x1cc>)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	3303      	adds	r3, #3
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
				//decrease counter to toggle is_long_pressed flag
				if (button[i].timer > 0) {
 8000fd4:	492e      	ldr	r1, [pc, #184]	; (8001090 <button_read+0x1cc>)
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3308      	adds	r3, #8
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d013      	beq.n	8001012 <button_read+0x14e>
					button[i].timer--;
 8000fea:	4929      	ldr	r1, [pc, #164]	; (8001090 <button_read+0x1cc>)
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	1e59      	subs	r1, r3, #1
 8000ffe:	4824      	ldr	r0, [pc, #144]	; (8001090 <button_read+0x1cc>)
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4403      	add	r3, r0
 800100c:	3308      	adds	r3, #8
 800100e:	6019      	str	r1, [r3, #0]
 8001010:	e031      	b.n	8001076 <button_read+0x1b2>
				} else {
					button[i].is_long_pressed = 1;
 8001012:	491f      	ldr	r1, [pc, #124]	; (8001090 <button_read+0x1cc>)
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	3304      	adds	r3, #4
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e026      	b.n	8001076 <button_read+0x1b2>
				}
			} else {
				button[i].is_long_pressed = button[i].is_pressed = 0;
 8001028:	4919      	ldr	r1, [pc, #100]	; (8001090 <button_read+0x1cc>)
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3303      	adds	r3, #3
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	4914      	ldr	r1, [pc, #80]	; (8001090 <button_read+0x1cc>)
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	3303      	adds	r3, #3
 800104c:	7818      	ldrb	r0, [r3, #0]
 800104e:	4910      	ldr	r1, [pc, #64]	; (8001090 <button_read+0x1cc>)
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3304      	adds	r3, #4
 800105e:	4602      	mov	r2, r0
 8001060:	701a      	strb	r2, [r3, #0]
				button[i].timer = LONG_PRESSED_TIME;
 8001062:	490b      	ldr	r1, [pc, #44]	; (8001090 <button_read+0x1cc>)
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3308      	adds	r3, #8
 8001072:	2296      	movs	r2, #150	; 0x96
 8001074:	601a      	str	r2, [r3, #0]
	for (unsigned i = 0; i < NUMBER_OF_BUTTON; i++) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3301      	adds	r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f43f af26 	beq.w	8000ed0 <button_read+0xc>
			}
		}
	}
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000024c 	.word	0x2000024c

08001094 <is_button_pressed>:
/*
 * @brief:	return the is_pressed flag
 * @para:	i - id of button
 * @retval:	is_pressed (0: released, 1: pressed)
 * */
bool is_button_pressed(unsigned i) {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	if (i >= NUMBER_OF_BUTTON)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <is_button_pressed+0x12>
		return ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e008      	b.n	80010b8 <is_button_pressed+0x24>
	return button[i].is_pressed;
 80010a6:	4907      	ldr	r1, [pc, #28]	; (80010c4 <is_button_pressed+0x30>)
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3303      	adds	r3, #3
 80010b6:	781b      	ldrb	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000024c 	.word	0x2000024c

080010c8 <bz_alarm>:
#include"my_buzzer.h"

static void bz_on(void);
static void bz_off(void);

void bz_alarm(void){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	sch_add_task(bz_on, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <bz_alarm+0x20>)
 80010d2:	f001 f995 	bl	8002400 <sch_add_task>
	sch_add_task(bz_off, ONE_SECOND, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <bz_alarm+0x24>)
 80010de:	f001 f98f 	bl	8002400 <sch_add_task>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	080010f1 	.word	0x080010f1
 80010ec:	08001109 	.word	0x08001109

080010f0 <bz_on>:

static void bz_on(void){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, 1);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fa:	4802      	ldr	r0, [pc, #8]	; (8001104 <bz_on+0x14>)
 80010fc:	f002 fa85 	bl	800360a <HAL_GPIO_WritePin>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40010c00 	.word	0x40010c00

08001108 <bz_off>:

static void bz_off(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001112:	4802      	ldr	r0, [pc, #8]	; (800111c <bz_off+0x14>)
 8001114:	f002 fa79 	bl	800360a <HAL_GPIO_WritePin>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40010c00 	.word	0x40010c00

08001120 <fp_init>:
static bool merge_finger(void);
static void fp_reset_timer(void);
static bool store_finger(void);
static bool search_finger(void);

void fp_init(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	uart_fp_init();
 8001124:	f001 fc1a 	bl	800295c <uart_fp_init>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <fp_search>:

bool fp_search(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	fp_reset_timer();
 8001130:	f000 f892 	bl	8001258 <fp_reset_timer>
	get_finger(2);
 8001134:	2002      	movs	r0, #2
 8001136:	f000 f8ae 	bl	8001296 <get_finger>
	if (merge_finger()) {
 800113a:	f000 f899 	bl	8001270 <merge_finger>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <fp_search+0x26>
		if (search_finger()) {
 8001144:	f000 f830 	bl	80011a8 <search_finger>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <fp_search+0x26>
			return 1;
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <fp_search+0x28>
		}
	}
	return 0;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	bd80      	pop	{r7, pc}

08001158 <fp_enroll>:
bool fp_enroll(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	fp_reset_timer();
 800115c:	f000 f87c 	bl	8001258 <fp_reset_timer>
	get_finger(2);
 8001160:	2002      	movs	r0, #2
 8001162:	f000 f898 	bl	8001296 <get_finger>
	if (merge_finger()) {
 8001166:	f000 f883 	bl	8001270 <merge_finger>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <fp_enroll+0x26>
		if (store_finger()) {
 8001170:	f000 f846 	bl	8001200 <store_finger>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <fp_enroll+0x26>
			return 1;
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <fp_enroll+0x28>
		}
	}
	return 0;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	bd80      	pop	{r7, pc}

08001184 <fp_run_timer>:
void fp_run_timer(void) {
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	if (finger_timer > 0) {
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <fp_run_timer+0x20>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <fp_run_timer+0x18>
		finger_timer--;
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <fp_run_timer+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	3b01      	subs	r3, #1
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <fp_run_timer+0x20>)
 800119a:	701a      	strb	r2, [r3, #0]
	}
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	20000000 	.word	0x20000000

080011a8 <search_finger>:
static bool search_finger(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
	ins_search_flag = 1;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <search_finger+0x50>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
	uint8_t data[5] = { 0x01, 0x00, 0x00, 0x00, 0x63 };
 80011b4:	4a11      	ldr	r2, [pc, #68]	; (80011fc <search_finger+0x54>)
 80011b6:	463b      	mov	r3, r7
 80011b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011bc:	6018      	str	r0, [r3, #0]
 80011be:	3304      	adds	r3, #4
 80011c0:	7019      	strb	r1, [r3, #0]
	build_ins(INS_SEARCH, 5, data);
 80011c2:	463b      	mov	r3, r7
 80011c4:	461a      	mov	r2, r3
 80011c6:	2105      	movs	r1, #5
 80011c8:	2004      	movs	r0, #4
 80011ca:	f000 f953 	bl	8001474 <build_ins>
	send_ins();
 80011ce:	f000 f9bb 	bl	8001548 <send_ins>
	if (check_respone_search()) {
 80011d2:	f000 f895 	bl	8001300 <check_respone_search>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <search_finger+0x3e>
		ins_search_flag = 0;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <search_finger+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
		return 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e003      	b.n	80011ee <search_finger+0x46>
	}
	ins_search_flag = 0;
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <search_finger+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
	return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000261 	.word	0x20000261
 80011fc:	08006d48 	.word	0x08006d48

08001200 <store_finger>:
static bool store_finger(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	uint8_t data[3] = { 0x01, (uint8_t) (idx_page >> 8), (uint8_t) (idx_page) };
 8001206:	2301      	movs	r3, #1
 8001208:	713b      	strb	r3, [r7, #4]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <store_finger+0x54>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	b29b      	uxth	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	717b      	strb	r3, [r7, #5]
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <store_finger+0x54>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	71bb      	strb	r3, [r7, #6]
	build_ins(INS_STORE_CHAR, 3, data);
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	461a      	mov	r2, r3
 8001222:	2103      	movs	r1, #3
 8001224:	2006      	movs	r0, #6
 8001226:	f000 f925 	bl	8001474 <build_ins>
	send_ins();
 800122a:	f000 f98d 	bl	8001548 <send_ins>
	if (check_respone()) {
 800122e:	f000 f8d3 	bl	80013d8 <check_respone>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d007      	beq.n	8001248 <store_finger+0x48>
		idx_page++;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <store_finger+0x54>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	b29a      	uxth	r2, r3
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <store_finger+0x54>)
 8001242:	801a      	strh	r2, [r3, #0]
		return 1;
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <store_finger+0x4a>
	}
	return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000292 	.word	0x20000292

08001258 <fp_reset_timer>:
static void fp_reset_timer(void) {
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
	finger_timer = FINGER_TIMER;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <fp_reset_timer+0x14>)
 800125e:	220a      	movs	r2, #10
 8001260:	701a      	strb	r2, [r3, #0]
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000000 	.word	0x20000000

08001270 <merge_finger>:
static bool merge_finger(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	build_ins(INS_REG_MODEL, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2005      	movs	r0, #5
 800127a:	f000 f8fb 	bl	8001474 <build_ins>
	send_ins();
 800127e:	f000 f963 	bl	8001548 <send_ins>
	if (check_respone()) {
 8001282:	f000 f8a9 	bl	80013d8 <check_respone>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <merge_finger+0x20>
		return 1;
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <merge_finger+0x22>
	}
	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}

08001296 <get_finger>:
static void get_finger(uint8_t time) {
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < time; i++) {
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e022      	b.n	80012ec <get_finger+0x56>
		fp_reset_timer();
 80012a6:	f7ff ffd7 	bl	8001258 <fp_reset_timer>
		while (1) {
			build_ins(INS_GET_IMAGE, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2001      	movs	r0, #1
 80012b0:	f000 f8e0 	bl	8001474 <build_ins>
			send_ins();
 80012b4:	f000 f948 	bl	8001548 <send_ins>
			if (check_respone()) {
 80012b8:	f000 f88e 	bl	80013d8 <check_respone>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f3      	beq.n	80012aa <get_finger+0x14>
				uint8_t data = i + 1;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	73bb      	strb	r3, [r7, #14]
				build_ins(INS_GEN_CHAR, 1, &data);
 80012ca:	f107 030e 	add.w	r3, r7, #14
 80012ce:	461a      	mov	r2, r3
 80012d0:	2101      	movs	r1, #1
 80012d2:	2002      	movs	r0, #2
 80012d4:	f000 f8ce 	bl	8001474 <build_ins>
				send_ins();
 80012d8:	f000 f936 	bl	8001548 <send_ins>
				if (check_respone()) {
 80012dc:	f000 f87c 	bl	80013d8 <check_respone>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0e1      	beq.n	80012aa <get_finger+0x14>
	for (uint8_t i = 0; i < time; i++) {
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	3301      	adds	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d3d8      	bcc.n	80012a6 <get_finger+0x10>
					break;
				}
			}
		}
	}
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <check_respone_search>:

static bool check_respone_search(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
	while (!receive_flag) {
 8001306:	e008      	b.n	800131a <check_respone_search+0x1a>
		if (finger_timer == 0) {
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <check_respone_search+0xbc>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d104      	bne.n	800131a <check_respone_search+0x1a>
			idx = 0;
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <check_respone_search+0xc0>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
			return 0;
 8001316:	2300      	movs	r3, #0
 8001318:	e04b      	b.n	80013b2 <check_respone_search+0xb2>
	while (!receive_flag) {
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <check_respone_search+0xc4>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f2      	beq.n	8001308 <check_respone_search+0x8>
		}
	}
	receive_flag = !receive_flag;
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <check_respone_search+0xc4>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <check_respone_search+0xc4>)
 8001334:	701a      	strb	r2, [r3, #0]
	uint8_t header[9] = ACK_HEADER;
 8001336:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <check_respone_search+0xc8>)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	ca07      	ldmia	r2, {r0, r1, r2}
 800133c:	c303      	stmia	r3!, {r0, r1}
 800133e:	701a      	strb	r2, [r3, #0]
	header[8] = 0x07;
 8001340:	2307      	movs	r3, #7
 8001342:	733b      	strb	r3, [r7, #12]
	if (memcmp(header, from_sensor, 9)) {
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2209      	movs	r2, #9
 8001348:	4920      	ldr	r1, [pc, #128]	; (80013cc <check_respone_search+0xcc>)
 800134a:	4618      	mov	r0, r3
 800134c:	f005 f8f2 	bl	8006534 <memcmp>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d004      	beq.n	8001360 <check_respone_search+0x60>
		idx = 0;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <check_respone_search+0xc0>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
		return 0;
 800135c:	2300      	movs	r3, #0
 800135e:	e028      	b.n	80013b2 <check_respone_search+0xb2>
	}
	if (from_sensor[9] == 0x00) {
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <check_respone_search+0xcc>)
 8001362:	7a5b      	ldrb	r3, [r3, #9]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d11c      	bne.n	80013a2 <check_respone_search+0xa2>
		idx = 0;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <check_respone_search+0xc0>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
		page_id = (uint16_t) (from_sensor[10]) << 8 | from_sensor[11];
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <check_respone_search+0xcc>)
 8001370:	7a9b      	ldrb	r3, [r3, #10]
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <check_respone_search+0xcc>)
 8001378:	7adb      	ldrb	r3, [r3, #11]
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <check_respone_search+0xd0>)
 8001384:	801a      	strh	r2, [r3, #0]
		score = (uint16_t) (from_sensor[12]) << 8 | from_sensor[13];
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <check_respone_search+0xcc>)
 8001388:	7b1b      	ldrb	r3, [r3, #12]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <check_respone_search+0xcc>)
 8001390:	7b5b      	ldrb	r3, [r3, #13]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21b      	sxth	r3, r3
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <check_respone_search+0xd4>)
 800139c:	801a      	strh	r2, [r3, #0]
		return 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	e007      	b.n	80013b2 <check_respone_search+0xb2>
	}
	if (idx >= ACK_LEN_16) {
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <check_respone_search+0xc0>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b0f      	cmp	r3, #15
 80013a8:	d902      	bls.n	80013b0 <check_respone_search+0xb0>
		idx = 0;
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <check_respone_search+0xc0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000290 	.word	0x20000290
 80013c4:	20000260 	.word	0x20000260
 80013c8:	08006d50 	.word	0x08006d50
 80013cc:	2000027c 	.word	0x2000027c
 80013d0:	20000294 	.word	0x20000294
 80013d4:	20000296 	.word	0x20000296

080013d8 <check_respone>:
static bool check_respone(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
	while (!receive_flag) {
 80013de:	e008      	b.n	80013f2 <check_respone+0x1a>
		if (finger_timer == 0) {
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <check_respone+0x88>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d104      	bne.n	80013f2 <check_respone+0x1a>
			idx = 0;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <check_respone+0x8c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
			return 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e031      	b.n	8001456 <check_respone+0x7e>
	while (!receive_flag) {
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <check_respone+0x90>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f2      	beq.n	80013e0 <check_respone+0x8>
		}
	}
	receive_flag = !receive_flag;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <check_respone+0x90>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bf0c      	ite	eq
 8001402:	2301      	moveq	r3, #1
 8001404:	2300      	movne	r3, #0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <check_respone+0x90>)
 800140c:	701a      	strb	r2, [r3, #0]
	uint8_t header[9] = ACK_HEADER;
 800140e:	4a17      	ldr	r2, [pc, #92]	; (800146c <check_respone+0x94>)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	ca07      	ldmia	r2, {r0, r1, r2}
 8001414:	c303      	stmia	r3!, {r0, r1}
 8001416:	701a      	strb	r2, [r3, #0]
	if (memcmp(header, from_sensor, 9)) {
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2209      	movs	r2, #9
 800141c:	4914      	ldr	r1, [pc, #80]	; (8001470 <check_respone+0x98>)
 800141e:	4618      	mov	r0, r3
 8001420:	f005 f888 	bl	8006534 <memcmp>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <check_respone+0x5c>
		idx = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <check_respone+0x8c>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
		return 0;
 8001430:	2300      	movs	r3, #0
 8001432:	e010      	b.n	8001456 <check_respone+0x7e>
	}
	if (from_sensor[9] == 0x00) {
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <check_respone+0x98>)
 8001436:	7a5b      	ldrb	r3, [r3, #9]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d104      	bne.n	8001446 <check_respone+0x6e>
		idx = 0;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <check_respone+0x8c>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
		return 1;
 8001442:	2301      	movs	r3, #1
 8001444:	e007      	b.n	8001456 <check_respone+0x7e>
	}
	if (idx >= ACK_LEN_12) {
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <check_respone+0x8c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b0b      	cmp	r3, #11
 800144c:	d902      	bls.n	8001454 <check_respone+0x7c>
		idx = 0;
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <check_respone+0x8c>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000000 	.word	0x20000000
 8001464:	20000290 	.word	0x20000290
 8001468:	20000260 	.word	0x20000260
 800146c:	08006d50 	.word	0x08006d50
 8001470:	2000027c 	.word	0x2000027c

08001474 <build_ins>:
static void build_ins(uint8_t code, uint8_t data_len, uint8_t *data) {
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	603a      	str	r2, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	460b      	mov	r3, r1
 8001482:	71bb      	strb	r3, [r7, #6]
	ins_len = INS_LEN_NO_DATA + data_len;
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	330c      	adds	r3, #12
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <build_ins+0xcc>)
 800148c:	701a      	strb	r2, [r3, #0]
	uint16_t packet_len = data_len + 3;
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	b29b      	uxth	r3, r3
 8001492:	3303      	adds	r3, #3
 8001494:	827b      	strh	r3, [r7, #18]
	uint16_t sum = INS_PACKET_FLAG + code + packet_len;
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	b29a      	uxth	r2, r3
 800149a:	8a7b      	ldrh	r3, [r7, #18]
 800149c:	4413      	add	r3, r2
 800149e:	b29b      	uxth	r3, r3
 80014a0:	3301      	adds	r3, #1
 80014a2:	82fb      	strh	r3, [r7, #22]
	uint8_t header[IDX_INS_START] = { CMD_HEADER, INS_PACKET_FLAG,
 80014a4:	23ef      	movs	r3, #239	; 0xef
 80014a6:	723b      	strb	r3, [r7, #8]
 80014a8:	2301      	movs	r3, #1
 80014aa:	727b      	strb	r3, [r7, #9]
 80014ac:	23ff      	movs	r3, #255	; 0xff
 80014ae:	72bb      	strb	r3, [r7, #10]
 80014b0:	23ff      	movs	r3, #255	; 0xff
 80014b2:	72fb      	strb	r3, [r7, #11]
 80014b4:	23ff      	movs	r3, #255	; 0xff
 80014b6:	733b      	strb	r3, [r7, #12]
 80014b8:	23ff      	movs	r3, #255	; 0xff
 80014ba:	737b      	strb	r3, [r7, #13]
 80014bc:	2301      	movs	r3, #1
 80014be:	73bb      	strb	r3, [r7, #14]
			(uint8_t) (packet_len >> 8), (uint8_t) (packet_len), code };
 80014c0:	8a7b      	ldrh	r3, [r7, #18]
 80014c2:	0a1b      	lsrs	r3, r3, #8
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
	uint8_t header[IDX_INS_START] = { CMD_HEADER, INS_PACKET_FLAG,
 80014c8:	73fb      	strb	r3, [r7, #15]
			(uint8_t) (packet_len >> 8), (uint8_t) (packet_len), code };
 80014ca:	8a7b      	ldrh	r3, [r7, #18]
 80014cc:	b2db      	uxtb	r3, r3
	uint8_t header[IDX_INS_START] = { CMD_HEADER, INS_PACKET_FLAG,
 80014ce:	743b      	strb	r3, [r7, #16]
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	747b      	strb	r3, [r7, #17]
	memcpy(ins, header, IDX_INS_START);
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <build_ins+0xd0>)
 80014d6:	f107 0208 	add.w	r2, r7, #8
 80014da:	ca07      	ldmia	r2, {r0, r1, r2}
 80014dc:	c303      	stmia	r3!, {r0, r1}
 80014de:	801a      	strh	r2, [r3, #0]
	uint8_t i = IDX_INS_START;
 80014e0:	230a      	movs	r3, #10
 80014e2:	757b      	strb	r3, [r7, #21]
	for (; i < IDX_INS_START + data_len; i++) {
 80014e4:	e013      	b.n	800150e <build_ins+0x9a>
		ins[i] = data[i - IDX_INS_START];
 80014e6:	7d7b      	ldrb	r3, [r7, #21]
 80014e8:	3b0a      	subs	r3, #10
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	441a      	add	r2, r3
 80014ee:	7d7b      	ldrb	r3, [r7, #21]
 80014f0:	7811      	ldrb	r1, [r2, #0]
 80014f2:	4a14      	ldr	r2, [pc, #80]	; (8001544 <build_ins+0xd0>)
 80014f4:	54d1      	strb	r1, [r2, r3]
		sum += data[i - IDX_INS_START];
 80014f6:	7d7b      	ldrb	r3, [r7, #21]
 80014f8:	3b0a      	subs	r3, #10
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b29a      	uxth	r2, r3
 8001502:	8afb      	ldrh	r3, [r7, #22]
 8001504:	4413      	add	r3, r2
 8001506:	82fb      	strh	r3, [r7, #22]
	for (; i < IDX_INS_START + data_len; i++) {
 8001508:	7d7b      	ldrb	r3, [r7, #21]
 800150a:	3301      	adds	r3, #1
 800150c:	757b      	strb	r3, [r7, #21]
 800150e:	79bb      	ldrb	r3, [r7, #6]
 8001510:	f103 0209 	add.w	r2, r3, #9
 8001514:	7d7b      	ldrb	r3, [r7, #21]
 8001516:	429a      	cmp	r2, r3
 8001518:	dae5      	bge.n	80014e6 <build_ins+0x72>
	}
	ins[IDX_INS_START + data_len] = (uint8_t) (sum >> 8);
 800151a:	8afb      	ldrh	r3, [r7, #22]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	b29a      	uxth	r2, r3
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	330a      	adds	r3, #10
 8001524:	b2d1      	uxtb	r1, r2
 8001526:	4a07      	ldr	r2, [pc, #28]	; (8001544 <build_ins+0xd0>)
 8001528:	54d1      	strb	r1, [r2, r3]
	ins[IDX_INS_START + data_len + 1] = (uint8_t) sum;
 800152a:	79bb      	ldrb	r3, [r7, #6]
 800152c:	330b      	adds	r3, #11
 800152e:	8afa      	ldrh	r2, [r7, #22]
 8001530:	b2d1      	uxtb	r1, r2
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <build_ins+0xd0>)
 8001534:	54d1      	strb	r1, [r2, r3]
}
 8001536:	bf00      	nop
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000278 	.word	0x20000278
 8001544:	20000264 	.word	0x20000264

08001548 <send_ins>:

static void send_ins(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < ins_len; i++) {
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	e00a      	b.n	800156a <send_ins+0x22>
		HAL_UART_Transmit(&huart1, ins + i, 1, 100);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <send_ins+0x38>)
 8001558:	1899      	adds	r1, r3, r2
 800155a:	2364      	movs	r3, #100	; 0x64
 800155c:	2201      	movs	r2, #1
 800155e:	4809      	ldr	r0, [pc, #36]	; (8001584 <send_ins+0x3c>)
 8001560:	f004 f8e4 	bl	800572c <HAL_UART_Transmit>
	for (uint8_t i = 0; i < ins_len; i++) {
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	3301      	adds	r3, #1
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <send_ins+0x40>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	429a      	cmp	r2, r3
 8001572:	d3ef      	bcc.n	8001554 <send_ins+0xc>
	}
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000264 	.word	0x20000264
 8001584:	20000174 	.word	0x20000174
 8001588:	20000278 	.word	0x20000278

0800158c <fp_receive_data>:

void fp_receive_data(uint8_t data) {
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
	from_sensor[idx++] = data;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <fp_receive_data+0x4c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	b2d1      	uxtb	r1, r2
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <fp_receive_data+0x4c>)
 80015a0:	7011      	strb	r1, [r2, #0]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <fp_receive_data+0x50>)
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	5453      	strb	r3, [r2, r1]
	uint8_t ack_len;
	if (ins_search_flag) {
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <fp_receive_data+0x54>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <fp_receive_data+0x2c>
		ack_len = ACK_LEN_16;
 80015b2:	2310      	movs	r3, #16
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e001      	b.n	80015bc <fp_receive_data+0x30>
	} else {
		ack_len = ACK_LEN_12;
 80015b8:	230c      	movs	r3, #12
 80015ba:	73fb      	strb	r3, [r7, #15]
	}
	if (idx >= ack_len) {
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <fp_receive_data+0x4c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d802      	bhi.n	80015cc <fp_receive_data+0x40>
		receive_flag = 1;
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <fp_receive_data+0x58>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
	}
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000290 	.word	0x20000290
 80015dc:	2000027c 	.word	0x2000027c
 80015e0:	20000261 	.word	0x20000261
 80015e4:	20000260 	.word	0x20000260

080015e8 <cal>:
	CHANGE_PASS,
	GET_FINGER,
	ENROLL_NEW_FINGER
} st_lock;

uint8_t cal(uint8_t button_id) {
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	return button_id / 4 + button_id % 4 + button_id / 4 * 2 + 1;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4413      	add	r3, r2
 8001602:	b2da      	uxtb	r2, r3
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	b2db      	uxtb	r3, r3
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	4413      	add	r3, r2
 8001610:	b2db      	uxtb	r3, r3
 8001612:	3301      	adds	r3, #1
 8001614:	b2db      	uxtb	r3, r3
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <fsm_lock>:
bool wrong_input_flag = 0;
// flag for refill pass. 0: nothing, 1: refill password
bool change_pass_flag = 0;
// flag for enroll new finger. 0: nothing, 1: refill password
bool enroll_finger_flag = 0;
void fsm_lock(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	switch (st_lock) {
 8001624:	4b46      	ldr	r3, [pc, #280]	; (8001740 <fsm_lock+0x120>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b07      	cmp	r3, #7
 800162a:	f200 8087 	bhi.w	800173c <fsm_lock+0x11c>
 800162e:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <fsm_lock+0x14>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	08001655 	.word	0x08001655
 8001638:	08001659 	.word	0x08001659
 800163c:	08001667 	.word	0x08001667
 8001640:	0800168f 	.word	0x0800168f
 8001644:	080016cb 	.word	0x080016cb
 8001648:	0800167b 	.word	0x0800167b
 800164c:	080016e3 	.word	0x080016e3
 8001650:	08001713 	.word	0x08001713
	case INIT:
		switch_lock_to_sleep();
 8001654:	f000 fa96 	bl	8001b84 <switch_lock_to_sleep>
	case SLEEP:
		lock_close();
 8001658:	f000 fe1a 	bl	8002290 <lock_close>
		fsm_keypad();
 800165c:	f000 f8ce 	bl	80017fc <fsm_keypad>
		fsm_button();
 8001660:	f000 f886 	bl	8001770 <fsm_button>
		break;
 8001664:	e06a      	b.n	800173c <fsm_lock+0x11c>
	case PASSWORD:
		// if over 15s not do anything, return to sleep
		if (time_out()) {
 8001666:	f000 fad7 	bl	8001c18 <time_out>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <fsm_lock+0x54>
			switch_lock_to_sleep();
 8001670:	f000 fa88 	bl	8001b84 <switch_lock_to_sleep>
		}
		fsm_keypad();
 8001674:	f000 f8c2 	bl	80017fc <fsm_keypad>
		break;
 8001678:	e060      	b.n	800173c <fsm_lock+0x11c>
	case CHANGE_PASS:
		// if over 15s not do anything, return to sleep
		if (time_out()) {
 800167a:	f000 facd 	bl	8001c18 <time_out>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <fsm_lock+0x68>
			switch_lock_to_sleep();
 8001684:	f000 fa7e 	bl	8001b84 <switch_lock_to_sleep>
		}
		fsm_keypad();
 8001688:	f000 f8b8 	bl	80017fc <fsm_keypad>
		break;
 800168c:	e056      	b.n	800173c <fsm_lock+0x11c>
	case WRONG:
		//
		if (wrong_input_cnt > 3) {
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <fsm_lock+0x124>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d90e      	bls.n	80016b4 <fsm_lock+0x94>
			sch_add_task(bz_alarm, 0, ONE_SECOND * 3);
 8001696:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800169a:	2100      	movs	r1, #0
 800169c:	482a      	ldr	r0, [pc, #168]	; (8001748 <fsm_lock+0x128>)
 800169e:	f000 feaf 	bl	8002400 <sch_add_task>
			wrong_input_flag = 1;
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <fsm_lock+0x12c>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
			timer_for_st = BLOCK_TIME;
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <fsm_lock+0x130>)
 80016aa:	220a      	movs	r2, #10
 80016ac:	801a      	strh	r2, [r3, #0]
			wrong_input_cnt = 0;
 80016ae:	4b25      	ldr	r3, [pc, #148]	; (8001744 <fsm_lock+0x124>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
		}
		if (time_out()) {
 80016b4:	f000 fab0 	bl	8001c18 <time_out>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d03d      	beq.n	800173a <fsm_lock+0x11a>
			sch_remove_task(bz_alarm);
 80016be:	4822      	ldr	r0, [pc, #136]	; (8001748 <fsm_lock+0x128>)
 80016c0:	f000 ff64 	bl	800258c <sch_remove_task>
			switch_lock_to_sleep();
 80016c4:	f000 fa5e 	bl	8001b84 <switch_lock_to_sleep>
		}
		break;
 80016c8:	e037      	b.n	800173a <fsm_lock+0x11a>
	case UNLOCK:
		lock_open();
 80016ca:	f000 fdd5 	bl	8002278 <lock_open>
		if (time_out()) {
 80016ce:	f000 faa3 	bl	8001c18 <time_out>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <fsm_lock+0xbc>
			switch_lock_to_sleep();
 80016d8:	f000 fa54 	bl	8001b84 <switch_lock_to_sleep>
		}
		fsm_button();
 80016dc:	f000 f848 	bl	8001770 <fsm_button>
		break;
 80016e0:	e02c      	b.n	800173c <fsm_lock+0x11c>
	case GET_FINGER:
		if (fp_search()) {
 80016e2:	f7ff fd23 	bl	800112c <fp_search>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <fsm_lock+0xde>
			sch_add_task(run_timer, 0, ONE_SECOND);
 80016ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016f0:	2100      	movs	r1, #0
 80016f2:	4818      	ldr	r0, [pc, #96]	; (8001754 <fsm_lock+0x134>)
 80016f4:	f000 fe84 	bl	8002400 <sch_add_task>
			switch_lock_to_unlock();
 80016f8:	f000 f9f4 	bl	8001ae4 <switch_lock_to_unlock>
 80016fc:	e005      	b.n	800170a <fsm_lock+0xea>
		} else {
			LCD_display("  INVALID FINGER", "");
 80016fe:	4916      	ldr	r1, [pc, #88]	; (8001758 <fsm_lock+0x138>)
 8001700:	4816      	ldr	r0, [pc, #88]	; (800175c <fsm_lock+0x13c>)
 8001702:	f000 fcb7 	bl	8002074 <LCD_display>
			switch_lock_to_sleep();
 8001706:	f000 fa3d 	bl	8001b84 <switch_lock_to_sleep>
		}
		sch_remove_task(fp_run_timer);
 800170a:	4815      	ldr	r0, [pc, #84]	; (8001760 <fsm_lock+0x140>)
 800170c:	f000 ff3e 	bl	800258c <sch_remove_task>
		break;
 8001710:	e014      	b.n	800173c <fsm_lock+0x11c>
	case ENROLL_NEW_FINGER:
		if (fp_enroll()) {
 8001712:	f7ff fd21 	bl	8001158 <fp_enroll>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <fsm_lock+0x106>
			LCD_display("SUCCESFULLY", "");
 800171c:	490e      	ldr	r1, [pc, #56]	; (8001758 <fsm_lock+0x138>)
 800171e:	4811      	ldr	r0, [pc, #68]	; (8001764 <fsm_lock+0x144>)
 8001720:	f000 fca8 	bl	8002074 <LCD_display>
 8001724:	e003      	b.n	800172e <fsm_lock+0x10e>
		} else {
			LCD_display("  STH WENT", "   WRONG");
 8001726:	4910      	ldr	r1, [pc, #64]	; (8001768 <fsm_lock+0x148>)
 8001728:	4810      	ldr	r0, [pc, #64]	; (800176c <fsm_lock+0x14c>)
 800172a:	f000 fca3 	bl	8002074 <LCD_display>
		}
		sch_remove_task(fp_run_timer);
 800172e:	480c      	ldr	r0, [pc, #48]	; (8001760 <fsm_lock+0x140>)
 8001730:	f000 ff2c 	bl	800258c <sch_remove_task>
		switch_lock_to_sleep();
 8001734:	f000 fa26 	bl	8001b84 <switch_lock_to_sleep>
		break;
 8001738:	e000      	b.n	800173c <fsm_lock+0x11c>
		break;
 800173a:	bf00      	nop
	}
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000299 	.word	0x20000299
 8001744:	2000029a 	.word	0x2000029a
 8001748:	080010c9 	.word	0x080010c9
 800174c:	2000029b 	.word	0x2000029b
 8001750:	20000002 	.word	0x20000002
 8001754:	08001bc5 	.word	0x08001bc5
 8001758:	08006d5c 	.word	0x08006d5c
 800175c:	08006d60 	.word	0x08006d60
 8001760:	08001185 	.word	0x08001185
 8001764:	08006d74 	.word	0x08006d74
 8001768:	08006d80 	.word	0x08006d80
 800176c:	08006d8c 	.word	0x08006d8c

08001770 <fsm_button>:
static bool fsm_button(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	switch (st_button) {
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <fsm_button+0x7c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <fsm_button+0x12>
 800177c:	2b01      	cmp	r3, #1
 800177e:	d023      	beq.n	80017c8 <fsm_button+0x58>
 8001780:	e02e      	b.n	80017e0 <fsm_button+0x70>
	case release:
		if (is_button_pressed(0) == 1) {
 8001782:	2000      	movs	r0, #0
 8001784:	f7ff fc86 	bl	8001094 <is_button_pressed>
 8001788:	4603      	mov	r3, r0
 800178a:	2b01      	cmp	r3, #1
 800178c:	d113      	bne.n	80017b6 <fsm_button+0x46>
			//todo
			switch (st_lock) {
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <fsm_button+0x80>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d002      	beq.n	800179c <fsm_button+0x2c>
 8001796:	2b04      	cmp	r3, #4
 8001798:	d009      	beq.n	80017ae <fsm_button+0x3e>
				break;
			case UNLOCK:
				timer_for_st = UNLOCK_TIME;
				break;
			default:
				break;
 800179a:	e014      	b.n	80017c6 <fsm_button+0x56>
				sch_add_task(run_timer, 0, ONE_SECOND);
 800179c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017a0:	2100      	movs	r1, #0
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <fsm_button+0x84>)
 80017a4:	f000 fe2c 	bl	8002400 <sch_add_task>
				switch_lock_to_unlock();
 80017a8:	f000 f99c 	bl	8001ae4 <switch_lock_to_unlock>
				break;
 80017ac:	e00b      	b.n	80017c6 <fsm_button+0x56>
				timer_for_st = UNLOCK_TIME;
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <fsm_button+0x88>)
 80017b0:	2205      	movs	r2, #5
 80017b2:	801a      	strh	r2, [r3, #0]
				break;
 80017b4:	e007      	b.n	80017c6 <fsm_button+0x56>
			}
		} else if (is_button_pressed(0) == ERROR)
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff fc6c 	bl	8001094 <is_button_pressed>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d110      	bne.n	80017e4 <fsm_button+0x74>
			return 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e010      	b.n	80017e8 <fsm_button+0x78>
		break;
 80017c6:	e00d      	b.n	80017e4 <fsm_button+0x74>
	case pressed:
		if (!is_button_pressed(0)) {
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff fc63 	bl	8001094 <is_button_pressed>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d103      	bne.n	80017dc <fsm_button+0x6c>
			st_button = release;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <fsm_button+0x7c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
		} else {
			return 0;
		}
		break;
 80017da:	e004      	b.n	80017e6 <fsm_button+0x76>
			return 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	e003      	b.n	80017e8 <fsm_button+0x78>
	default:
		return 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e001      	b.n	80017e8 <fsm_button+0x78>
		break;
 80017e4:	bf00      	nop
	}
	return 1;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000298 	.word	0x20000298
 80017f0:	20000299 	.word	0x20000299
 80017f4:	08001bc5 	.word	0x08001bc5
 80017f8:	20000002 	.word	0x20000002

080017fc <fsm_keypad>:
static void fsm_keypad(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
	uint8_t key_id = keypad_IsPressed();
 8001802:	f000 faed 	bl	8001de0 <keypad_IsPressed>
 8001806:	4603      	mov	r3, r0
 8001808:	71bb      	strb	r3, [r7, #6]
	switch (key_id) {
 800180a:	79bb      	ldrb	r3, [r7, #6]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	f200 8137 	bhi.w	8001a80 <fsm_keypad+0x284>
 8001812:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <fsm_keypad+0x1c>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001859 	.word	0x08001859
 800181c:	08001859 	.word	0x08001859
 8001820:	08001859 	.word	0x08001859
 8001824:	08001933 	.word	0x08001933
 8001828:	08001859 	.word	0x08001859
 800182c:	08001859 	.word	0x08001859
 8001830:	08001859 	.word	0x08001859
 8001834:	08001a81 	.word	0x08001a81
 8001838:	08001859 	.word	0x08001859
 800183c:	08001859 	.word	0x08001859
 8001840:	08001859 	.word	0x08001859
 8001844:	08001965 	.word	0x08001965
 8001848:	08001997 	.word	0x08001997
 800184c:	08001859 	.word	0x08001859
 8001850:	080019bd 	.word	0x080019bd
 8001854:	08001a81 	.word	0x08001a81
	case 8:
	case 9:
	case 10:
	case 13:
		uint8_t number;
		switch (st_lock) {
 8001858:	4b92      	ldr	r3, [pc, #584]	; (8001aa4 <fsm_keypad+0x2a8>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d037      	beq.n	80018d0 <fsm_keypad+0xd4>
 8001860:	2b05      	cmp	r3, #5
 8001862:	dc60      	bgt.n	8001926 <fsm_keypad+0x12a>
 8001864:	2b01      	cmp	r3, #1
 8001866:	d002      	beq.n	800186e <fsm_keypad+0x72>
 8001868:	2b02      	cmp	r3, #2
 800186a:	d016      	beq.n	800189a <fsm_keypad+0x9e>
					switch_lock_to_wrong();
				}
			}
			break;
		default:
			break;
 800186c:	e05b      	b.n	8001926 <fsm_keypad+0x12a>
			if (key_id == 13) {
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	2b0d      	cmp	r3, #13
 8001872:	d102      	bne.n	800187a <fsm_keypad+0x7e>
				number = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	71fb      	strb	r3, [r7, #7]
 8001878:	e005      	b.n	8001886 <fsm_keypad+0x8a>
				number = cal(key_id);
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff feb3 	bl	80015e8 <cal>
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
			if (pw_update(number)) {
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fd2f 	bl	80022ec <pw_update>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d04a      	beq.n	800192a <fsm_keypad+0x12e>
				switch_lock_to_password();
 8001894:	f000 f960 	bl	8001b58 <switch_lock_to_password>
			break;
 8001898:	e047      	b.n	800192a <fsm_keypad+0x12e>
			if (key_id == 13) {
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	2b0d      	cmp	r3, #13
 800189e:	d102      	bne.n	80018a6 <fsm_keypad+0xaa>
				number = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	71fb      	strb	r3, [r7, #7]
 80018a4:	e005      	b.n	80018b2 <fsm_keypad+0xb6>
				number = cal(key_id);
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fe9d 	bl	80015e8 <cal>
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
			if (pw_update(number)) {
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fd19 	bl	80022ec <pw_update>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <fsm_keypad+0xce>
				reset_timer();
 80018c0:	f000 f974 	bl	8001bac <reset_timer>
				lcd_displayPW();
 80018c4:	f000 fabc 	bl	8001e40 <lcd_displayPW>
			break;
 80018c8:	e032      	b.n	8001930 <fsm_keypad+0x134>
				switch_lock_to_wrong();
 80018ca:	f000 f927 	bl	8001b1c <switch_lock_to_wrong>
			break;
 80018ce:	e02f      	b.n	8001930 <fsm_keypad+0x134>
			if (key_id == 13) {
 80018d0:	79bb      	ldrb	r3, [r7, #6]
 80018d2:	2b0d      	cmp	r3, #13
 80018d4:	d102      	bne.n	80018dc <fsm_keypad+0xe0>
				number = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	e005      	b.n	80018e8 <fsm_keypad+0xec>
				number = cal(key_id);
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fe82 	bl	80015e8 <cal>
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
			if (change_pass_flag) {
 80018e8:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <fsm_keypad+0x2ac>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00b      	beq.n	8001908 <fsm_keypad+0x10c>
				if (pw_update_change(number)) {
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fcd8 	bl	80022a8 <pw_update_change>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d017      	beq.n	800192e <fsm_keypad+0x132>
					reset_timer();
 80018fe:	f000 f955 	bl	8001bac <reset_timer>
					lcd_displayPW_change();
 8001902:	f000 fadd 	bl	8001ec0 <lcd_displayPW_change>
			break;
 8001906:	e012      	b.n	800192e <fsm_keypad+0x132>
				if (pw_update(number)) {
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 fcee 	bl	80022ec <pw_update>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <fsm_keypad+0x124>
					reset_timer();
 8001916:	f000 f949 	bl	8001bac <reset_timer>
					lcd_displayPW();
 800191a:	f000 fa91 	bl	8001e40 <lcd_displayPW>
			break;
 800191e:	e006      	b.n	800192e <fsm_keypad+0x132>
					switch_lock_to_wrong();
 8001920:	f000 f8fc 	bl	8001b1c <switch_lock_to_wrong>
			break;
 8001924:	e003      	b.n	800192e <fsm_keypad+0x132>
			break;
 8001926:	bf00      	nop
 8001928:	e0b1      	b.n	8001a8e <fsm_keypad+0x292>
			break;
 800192a:	bf00      	nop
 800192c:	e0af      	b.n	8001a8e <fsm_keypad+0x292>
			break;
 800192e:	bf00      	nop
		}
		break;
 8001930:	e0ad      	b.n	8001a8e <fsm_keypad+0x292>
	case 3:
		switch (st_lock) {
 8001932:	4b5c      	ldr	r3, [pc, #368]	; (8001aa4 <fsm_keypad+0x2a8>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b01      	cmp	r3, #1
 8001938:	f040 80a4 	bne.w	8001a84 <fsm_keypad+0x288>
		case SLEEP:
			reset_timer();
 800193c:	f000 f936 	bl	8001bac <reset_timer>
			LCD_display("FILL PASS", "");
 8001940:	495a      	ldr	r1, [pc, #360]	; (8001aac <fsm_keypad+0x2b0>)
 8001942:	485b      	ldr	r0, [pc, #364]	; (8001ab0 <fsm_keypad+0x2b4>)
 8001944:	f000 fb96 	bl	8002074 <LCD_display>
			sch_add_task(run_timer, 0, ONE_SECOND);
 8001948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800194c:	2100      	movs	r1, #0
 800194e:	4859      	ldr	r0, [pc, #356]	; (8001ab4 <fsm_keypad+0x2b8>)
 8001950:	f000 fd56 	bl	8002400 <sch_add_task>
			enroll_finger_flag = 1;
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <fsm_keypad+0x2bc>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
			st_lock = PASSWORD;
 800195a:	4b52      	ldr	r3, [pc, #328]	; (8001aa4 <fsm_keypad+0x2a8>)
 800195c:	2202      	movs	r2, #2
 800195e:	701a      	strb	r2, [r3, #0]
			break;
 8001960:	bf00      	nop
		default:
		}
		break;
 8001962:	e08f      	b.n	8001a84 <fsm_keypad+0x288>
	case 7:
		break;

	case 11:
		switch (st_lock) {
 8001964:	4b4f      	ldr	r3, [pc, #316]	; (8001aa4 <fsm_keypad+0x2a8>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	f040 808d 	bne.w	8001a88 <fsm_keypad+0x28c>
		case SLEEP:
			reset_timer();
 800196e:	f000 f91d 	bl	8001bac <reset_timer>
			LCD_display("FILL OLD PASS", "");
 8001972:	494e      	ldr	r1, [pc, #312]	; (8001aac <fsm_keypad+0x2b0>)
 8001974:	4851      	ldr	r0, [pc, #324]	; (8001abc <fsm_keypad+0x2c0>)
 8001976:	f000 fb7d 	bl	8002074 <LCD_display>
			sch_add_task(run_timer, 0, ONE_SECOND);
 800197a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800197e:	2100      	movs	r1, #0
 8001980:	484c      	ldr	r0, [pc, #304]	; (8001ab4 <fsm_keypad+0x2b8>)
 8001982:	f000 fd3d 	bl	8002400 <sch_add_task>
			change_pass_flag = 1;
 8001986:	4b48      	ldr	r3, [pc, #288]	; (8001aa8 <fsm_keypad+0x2ac>)
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
			st_lock = PASSWORD;
 800198c:	4b45      	ldr	r3, [pc, #276]	; (8001aa4 <fsm_keypad+0x2a8>)
 800198e:	2202      	movs	r2, #2
 8001990:	701a      	strb	r2, [r3, #0]
			break;
 8001992:	bf00      	nop
		default:
		}
		break;
 8001994:	e078      	b.n	8001a88 <fsm_keypad+0x28c>

	case 12:
		switch (st_lock) {
 8001996:	4b43      	ldr	r3, [pc, #268]	; (8001aa4 <fsm_keypad+0x2a8>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d176      	bne.n	8001a8c <fsm_keypad+0x290>
		case SLEEP:
			reset_timer();
 800199e:	f000 f905 	bl	8001bac <reset_timer>
			LCD_display("INSERT YOUR", "FINGER");
 80019a2:	4947      	ldr	r1, [pc, #284]	; (8001ac0 <fsm_keypad+0x2c4>)
 80019a4:	4847      	ldr	r0, [pc, #284]	; (8001ac4 <fsm_keypad+0x2c8>)
 80019a6:	f000 fb65 	bl	8002074 <LCD_display>
			sch_add_task(fp_run_timer, 0, ONE_SECOND / 10);
 80019aa:	2264      	movs	r2, #100	; 0x64
 80019ac:	2100      	movs	r1, #0
 80019ae:	4846      	ldr	r0, [pc, #280]	; (8001ac8 <fsm_keypad+0x2cc>)
 80019b0:	f000 fd26 	bl	8002400 <sch_add_task>
			st_lock = GET_FINGER;
 80019b4:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <fsm_keypad+0x2a8>)
 80019b6:	2206      	movs	r2, #6
 80019b8:	701a      	strb	r2, [r3, #0]
		default:
		}

		break;
 80019ba:	e067      	b.n	8001a8c <fsm_keypad+0x290>

	case 14:
		switch (st_lock) {
 80019bc:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <fsm_keypad+0x2a8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d002      	beq.n	80019ca <fsm_keypad+0x1ce>
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d034      	beq.n	8001a32 <fsm_keypad+0x236>
				}
			}
			break;
		default:
		}
		break;
 80019c8:	e061      	b.n	8001a8e <fsm_keypad+0x292>
			if (!pw_checkInPW()) {
 80019ca:	f000 fcd3 	bl	8002374 <pw_checkInPW>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <fsm_keypad+0x1de>
				switch_lock_to_wrong();
 80019d4:	f000 f8a2 	bl	8001b1c <switch_lock_to_wrong>
			break;
 80019d8:	e051      	b.n	8001a7e <fsm_keypad+0x282>
				if (change_pass_flag) {
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <fsm_keypad+0x2ac>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00b      	beq.n	80019fa <fsm_keypad+0x1fe>
					reset_timer();
 80019e2:	f000 f8e3 	bl	8001bac <reset_timer>
					LCD_display("FILL NEW PASS", "");
 80019e6:	4931      	ldr	r1, [pc, #196]	; (8001aac <fsm_keypad+0x2b0>)
 80019e8:	4838      	ldr	r0, [pc, #224]	; (8001acc <fsm_keypad+0x2d0>)
 80019ea:	f000 fb43 	bl	8002074 <LCD_display>
					pw_ResetIdx();
 80019ee:	f000 fcd3 	bl	8002398 <pw_ResetIdx>
					st_lock = CHANGE_PASS;
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <fsm_keypad+0x2a8>)
 80019f4:	2205      	movs	r2, #5
 80019f6:	701a      	strb	r2, [r3, #0]
			break;
 80019f8:	e041      	b.n	8001a7e <fsm_keypad+0x282>
				} else if (enroll_finger_flag) {
 80019fa:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <fsm_keypad+0x2bc>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d014      	beq.n	8001a2c <fsm_keypad+0x230>
					sch_remove_task(run_timer);
 8001a02:	482c      	ldr	r0, [pc, #176]	; (8001ab4 <fsm_keypad+0x2b8>)
 8001a04:	f000 fdc2 	bl	800258c <sch_remove_task>
					sch_add_task(fp_run_timer, 0, ONE_SECOND / 10);
 8001a08:	2264      	movs	r2, #100	; 0x64
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	482e      	ldr	r0, [pc, #184]	; (8001ac8 <fsm_keypad+0x2cc>)
 8001a0e:	f000 fcf7 	bl	8002400 <sch_add_task>
					LCD_display("   INSERT NEW", "    FINGER");
 8001a12:	492f      	ldr	r1, [pc, #188]	; (8001ad0 <fsm_keypad+0x2d4>)
 8001a14:	482f      	ldr	r0, [pc, #188]	; (8001ad4 <fsm_keypad+0x2d8>)
 8001a16:	f000 fb2d 	bl	8002074 <LCD_display>
					pw_ResetIdx();
 8001a1a:	f000 fcbd 	bl	8002398 <pw_ResetIdx>
					enroll_finger_flag = 0;
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <fsm_keypad+0x2bc>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
					st_lock = ENROLL_NEW_FINGER;
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <fsm_keypad+0x2a8>)
 8001a26:	2207      	movs	r2, #7
 8001a28:	701a      	strb	r2, [r3, #0]
			break;
 8001a2a:	e028      	b.n	8001a7e <fsm_keypad+0x282>
					switch_lock_to_unlock();
 8001a2c:	f000 f85a 	bl	8001ae4 <switch_lock_to_unlock>
			break;
 8001a30:	e025      	b.n	8001a7e <fsm_keypad+0x282>
			if (change_pass_flag) {
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <fsm_keypad+0x2ac>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <fsm_keypad+0x252>
				LCD_display("REFILL PASS", "");
 8001a3a:	491c      	ldr	r1, [pc, #112]	; (8001aac <fsm_keypad+0x2b0>)
 8001a3c:	4826      	ldr	r0, [pc, #152]	; (8001ad8 <fsm_keypad+0x2dc>)
 8001a3e:	f000 fb19 	bl	8002074 <LCD_display>
				pw_ResetIdx();
 8001a42:	f000 fca9 	bl	8002398 <pw_ResetIdx>
				change_pass_flag = 0;
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <fsm_keypad+0x2ac>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
			break;
 8001a4c:	e016      	b.n	8001a7c <fsm_keypad+0x280>
				if (pw_checkInPW_change()) {
 8001a4e:	f000 fc7f 	bl	8002350 <pw_checkInPW_change>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00f      	beq.n	8001a78 <fsm_keypad+0x27c>
					pw_UpdatePass();
 8001a58:	f000 fcaa 	bl	80023b0 <pw_UpdatePass>
					switch_lock_to_sleep();
 8001a5c:	f000 f892 	bl	8001b84 <switch_lock_to_sleep>
					sch_add_task(lcd_displaySuccess, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	481d      	ldr	r0, [pc, #116]	; (8001adc <fsm_keypad+0x2e0>)
 8001a66:	f000 fccb 	bl	8002400 <sch_add_task>
					sch_add_task(lcd_displayNormal, ONE_SECOND, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a70:	481b      	ldr	r0, [pc, #108]	; (8001ae0 <fsm_keypad+0x2e4>)
 8001a72:	f000 fcc5 	bl	8002400 <sch_add_task>
			break;
 8001a76:	e001      	b.n	8001a7c <fsm_keypad+0x280>
					switch_lock_to_wrong();
 8001a78:	f000 f850 	bl	8001b1c <switch_lock_to_wrong>
			break;
 8001a7c:	bf00      	nop
		break;
 8001a7e:	e006      	b.n	8001a8e <fsm_keypad+0x292>

	case 15:
		break;
	default:
		break;
 8001a80:	bf00      	nop
 8001a82:	e004      	b.n	8001a8e <fsm_keypad+0x292>
		break;
 8001a84:	bf00      	nop
 8001a86:	e002      	b.n	8001a8e <fsm_keypad+0x292>
		break;
 8001a88:	bf00      	nop
 8001a8a:	e000      	b.n	8001a8e <fsm_keypad+0x292>
		break;
 8001a8c:	bf00      	nop
	}
	if (key_id != UNPRESSED) {
 8001a8e:	79bb      	ldrb	r3, [r7, #6]
 8001a90:	2bff      	cmp	r3, #255	; 0xff
 8001a92:	d003      	beq.n	8001a9c <fsm_keypad+0x2a0>
		keypad_ResetFlag(key_id);
 8001a94:	79bb      	ldrb	r3, [r7, #6]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f9be 	bl	8001e18 <keypad_ResetFlag>
	}
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000299 	.word	0x20000299
 8001aa8:	2000029c 	.word	0x2000029c
 8001aac:	08006d5c 	.word	0x08006d5c
 8001ab0:	08006d98 	.word	0x08006d98
 8001ab4:	08001bc5 	.word	0x08001bc5
 8001ab8:	2000029d 	.word	0x2000029d
 8001abc:	08006da4 	.word	0x08006da4
 8001ac0:	08006db4 	.word	0x08006db4
 8001ac4:	08006dbc 	.word	0x08006dbc
 8001ac8:	08001185 	.word	0x08001185
 8001acc:	08006dc8 	.word	0x08006dc8
 8001ad0:	08006dd8 	.word	0x08006dd8
 8001ad4:	08006de4 	.word	0x08006de4
 8001ad8:	08006df4 	.word	0x08006df4
 8001adc:	08001e91 	.word	0x08001e91
 8001ae0:	08001ea9 	.word	0x08001ea9

08001ae4 <switch_lock_to_unlock>:
static void switch_lock_to_unlock(void) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	LCD_display("    UNLOCK DOOR", "");
 8001ae8:	4907      	ldr	r1, [pc, #28]	; (8001b08 <switch_lock_to_unlock+0x24>)
 8001aea:	4808      	ldr	r0, [pc, #32]	; (8001b0c <switch_lock_to_unlock+0x28>)
 8001aec:	f000 fac2 	bl	8002074 <LCD_display>
	timer_for_st = UNLOCK_TIME;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <switch_lock_to_unlock+0x2c>)
 8001af2:	2205      	movs	r2, #5
 8001af4:	801a      	strh	r2, [r3, #0]
	wrong_input_cnt = 0;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <switch_lock_to_unlock+0x30>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
	st_lock = UNLOCK;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <switch_lock_to_unlock+0x34>)
 8001afe:	2204      	movs	r2, #4
 8001b00:	701a      	strb	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	08006d5c 	.word	0x08006d5c
 8001b0c:	08006e00 	.word	0x08006e00
 8001b10:	20000002 	.word	0x20000002
 8001b14:	2000029a 	.word	0x2000029a
 8001b18:	20000299 	.word	0x20000299

08001b1c <switch_lock_to_wrong>:
static void switch_lock_to_wrong(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	timer_for_st = 1;
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <switch_lock_to_wrong+0x28>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	801a      	strh	r2, [r3, #0]
	wrong_input_cnt++;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <switch_lock_to_wrong+0x2c>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <switch_lock_to_wrong+0x2c>)
 8001b30:	701a      	strb	r2, [r3, #0]
	LCD_display("INVALID INPUT", "PLEASE REFILL");
 8001b32:	4906      	ldr	r1, [pc, #24]	; (8001b4c <switch_lock_to_wrong+0x30>)
 8001b34:	4806      	ldr	r0, [pc, #24]	; (8001b50 <switch_lock_to_wrong+0x34>)
 8001b36:	f000 fa9d 	bl	8002074 <LCD_display>
	st_lock = WRONG;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <switch_lock_to_wrong+0x38>)
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	701a      	strb	r2, [r3, #0]
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000002 	.word	0x20000002
 8001b48:	2000029a 	.word	0x2000029a
 8001b4c:	08006e10 	.word	0x08006e10
 8001b50:	08006e20 	.word	0x08006e20
 8001b54:	20000299 	.word	0x20000299

08001b58 <switch_lock_to_password>:
static void switch_lock_to_password(void) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	reset_timer();
 8001b5c:	f000 f826 	bl	8001bac <reset_timer>
	lcd_displayPW();
 8001b60:	f000 f96e 	bl	8001e40 <lcd_displayPW>
	sch_add_task(run_timer, 0, ONE_SECOND);
 8001b64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4804      	ldr	r0, [pc, #16]	; (8001b7c <switch_lock_to_password+0x24>)
 8001b6c:	f000 fc48 	bl	8002400 <sch_add_task>
	st_lock = PASSWORD;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <switch_lock_to_password+0x28>)
 8001b72:	2202      	movs	r2, #2
 8001b74:	701a      	strb	r2, [r3, #0]
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	08001bc5 	.word	0x08001bc5
 8001b80:	20000299 	.word	0x20000299

08001b84 <switch_lock_to_sleep>:
static void switch_lock_to_sleep(void) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	pw_ResetIdx();
 8001b88:	f000 fc06 	bl	8002398 <pw_ResetIdx>
	LCD_display("    WELCOME TO", "     MY ROOM");
 8001b8c:	4904      	ldr	r1, [pc, #16]	; (8001ba0 <switch_lock_to_sleep+0x1c>)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <switch_lock_to_sleep+0x20>)
 8001b90:	f000 fa70 	bl	8002074 <LCD_display>
	st_lock = SLEEP;
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <switch_lock_to_sleep+0x24>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	08006e30 	.word	0x08006e30
 8001ba4:	08006e40 	.word	0x08006e40
 8001ba8:	20000299 	.word	0x20000299

08001bac <reset_timer>:
static void reset_timer(void) {
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
	timer_for_st = TIMER;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <reset_timer+0x14>)
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	801a      	strh	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000002 	.word	0x20000002

08001bc4 <run_timer>:
static void run_timer(void) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
	if (timer_for_st > 0) {
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <run_timer+0x44>)
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <run_timer+0x1a>
		timer_for_st--;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <run_timer+0x44>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <run_timer+0x44>)
 8001bdc:	801a      	strh	r2, [r3, #0]
	}
	if (wrong_input_flag == 1) {
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <run_timer+0x48>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10c      	bne.n	8001c00 <run_timer+0x3c>
		char str[17];
		sprintf(str, "REMAIN %ds", timer_for_st);
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <run_timer+0x44>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4908      	ldr	r1, [pc, #32]	; (8001c10 <run_timer+0x4c>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f004 fc7f 	bl	80064f4 <siprintf>
		LCD_display("BLOCK INPUT", str);
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <run_timer+0x50>)
 8001bfc:	f000 fa3a 	bl	8002074 <LCD_display>
	}
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000002 	.word	0x20000002
 8001c0c:	2000029b 	.word	0x2000029b
 8001c10:	08006e50 	.word	0x08006e50
 8001c14:	08006e5c 	.word	0x08006e5c

08001c18 <time_out>:
static bool time_out(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	if (timer_for_st == 0) {
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <time_out+0x34>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10f      	bne.n	8001c44 <time_out+0x2c>
		if (wrong_input_flag == 1 && st_lock == WRONG) {
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <time_out+0x38>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d106      	bne.n	8001c3a <time_out+0x22>
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <time_out+0x3c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d102      	bne.n	8001c3a <time_out+0x22>
			wrong_input_flag = 0;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <time_out+0x38>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
		}
		sch_remove_task(run_timer);
 8001c3a:	4807      	ldr	r0, [pc, #28]	; (8001c58 <time_out+0x40>)
 8001c3c:	f000 fca6 	bl	800258c <sch_remove_task>
		return 1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <time_out+0x2e>
	}
	return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000002 	.word	0x20000002
 8001c50:	2000029b 	.word	0x2000029b
 8001c54:	20000299 	.word	0x20000299
 8001c58:	08001bc5 	.word	0x08001bc5

08001c5c <time_out>:
#define KEYPAD_TIMEOUT	50 // 50ms

uint8_t key_buf[16];
uint16_t timer = KEYPAD_TIMEOUT * 100;

static bool time_out(void) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
	DelayUS(10);
 8001c60:	200a      	movs	r0, #10
 8001c62:	f000 fae3 	bl	800222c <DelayUS>
	if (timer > 0) {
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <time_out+0x30>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <time_out+0x1e>
		timer--;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <time_out+0x30>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <time_out+0x30>)
 8001c78:	801a      	strh	r2, [r3, #0]
	}
	if (timer == 0)
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <time_out+0x30>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <time_out+0x2a>
		return 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <time_out+0x2c>
	return 0;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000004 	.word	0x20000004

08001c90 <keypad_IsTouch>:
static bool keypad_IsTouch(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	timer = KEYPAD_TIMEOUT * 100;
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <keypad_IsTouch+0x54>)
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	801a      	strh	r2, [r3, #0]
	//------------DV start-----------------
	//read each 10us, end loop when over KEYPAD_TIMEOUT or read 0 signal
	while (HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN)) {
 8001c9c:	e006      	b.n	8001cac <keypad_IsTouch+0x1c>
		if (time_out())
 8001c9e:	f7ff ffdd 	bl	8001c5c <time_out>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <keypad_IsTouch+0x1c>
			return 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e019      	b.n	8001ce0 <keypad_IsTouch+0x50>
	while (HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN)) {
 8001cac:	2101      	movs	r1, #1
 8001cae:	480e      	ldr	r0, [pc, #56]	; (8001ce8 <keypad_IsTouch+0x58>)
 8001cb0:	f001 fc94 	bl	80035dc <HAL_GPIO_ReadPin>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f1      	bne.n	8001c9e <keypad_IsTouch+0xe>
	}
	//read each 10us, end loop when over KEYPAD_TIMEOUT or read 1 signal
	while (!HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN)) {
 8001cba:	e006      	b.n	8001cca <keypad_IsTouch+0x3a>
		if (time_out())
 8001cbc:	f7ff ffce 	bl	8001c5c <time_out>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <keypad_IsTouch+0x3a>
			return 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e00a      	b.n	8001ce0 <keypad_IsTouch+0x50>
	while (!HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN)) {
 8001cca:	2101      	movs	r1, #1
 8001ccc:	4806      	ldr	r0, [pc, #24]	; (8001ce8 <keypad_IsTouch+0x58>)
 8001cce:	f001 fc85 	bl	80035dc <HAL_GPIO_ReadPin>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f1      	beq.n	8001cbc <keypad_IsTouch+0x2c>
	}
	//------------DV end-----------------
	DelayUS(10); // for TW
 8001cd8:	200a      	movs	r0, #10
 8001cda:	f000 faa7 	bl	800222c <DelayUS>
	return 1;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000004 	.word	0x20000004
 8001ce8:	40010c00 	.word	0x40010c00

08001cec <keypad_bit>:
static void keypad_bit(uint8_t i) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_SCL_PIN, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4816      	ldr	r0, [pc, #88]	; (8001d54 <keypad_bit+0x68>)
 8001cfc:	f001 fc85 	bl	800360a <HAL_GPIO_WritePin>
	DelayUS(2);
 8001d00:	2002      	movs	r0, #2
 8001d02:	f000 fa93 	bl	800222c <DelayUS>
	uint8_t bit = !HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN);
 8001d06:	2101      	movs	r1, #1
 8001d08:	4812      	ldr	r0, [pc, #72]	; (8001d54 <keypad_bit+0x68>)
 8001d0a:	f001 fc67 	bl	80035dc <HAL_GPIO_ReadPin>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	73fb      	strb	r3, [r7, #15]
	if (bit == 0) {
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d104      	bne.n	8001d2c <keypad_bit+0x40>
		key_buf[i] = 0;
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <keypad_bit+0x6c>)
 8001d26:	2100      	movs	r1, #0
 8001d28:	54d1      	strb	r1, [r2, r3]
 8001d2a:	e006      	b.n	8001d3a <keypad_bit+0x4e>
	} else {
		key_buf[i]++;
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <keypad_bit+0x6c>)
 8001d30:	5cd2      	ldrb	r2, [r2, r3]
 8001d32:	3201      	adds	r2, #1
 8001d34:	b2d1      	uxtb	r1, r2
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <keypad_bit+0x6c>)
 8001d38:	54d1      	strb	r1, [r2, r3]
	}
	HAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_SCL_PIN, 1);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <keypad_bit+0x68>)
 8001d40:	f001 fc63 	bl	800360a <HAL_GPIO_WritePin>
	DelayUS(2);
 8001d44:	2002      	movs	r0, #2
 8001d46:	f000 fa71 	bl	800222c <DelayUS>
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40010c00 	.word	0x40010c00
 8001d58:	200002a0 	.word	0x200002a0

08001d5c <keypad_scan>:
static void keypad_scan() {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 16; i++) {
 8001d62:	2300      	movs	r3, #0
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	e006      	b.n	8001d76 <keypad_scan+0x1a>
		keypad_bit(i);
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ffbe 	bl	8001cec <keypad_bit>
	for (uint8_t i = 0; i < 16; i++) {
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	3301      	adds	r3, #1
 8001d74:	71fb      	strb	r3, [r7, #7]
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d9f5      	bls.n	8001d68 <keypad_scan+0xc>
	}
	HAL_Delay(2); //for Tout
 8001d7c:	2002      	movs	r0, #2
 8001d7e:	f001 f8c5 	bl	8002f0c <HAL_Delay>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <keypad_init>:
void keypad_init(void) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 16; i++) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	71fb      	strb	r3, [r7, #7]
 8001d96:	e006      	b.n	8001da6 <keypad_init+0x1a>
		key_buf[i] = 0;
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <keypad_init+0x34>)
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 16; i++) {
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	3301      	adds	r3, #1
 8001da4:	71fb      	strb	r3, [r7, #7]
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b0f      	cmp	r3, #15
 8001daa:	d9f5      	bls.n	8001d98 <keypad_init+0xc>
	}
	HAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_SCL_PIN, 1);
 8001dac:	2201      	movs	r2, #1
 8001dae:	2102      	movs	r1, #2
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <keypad_init+0x38>)
 8001db2:	f001 fc2a 	bl	800360a <HAL_GPIO_WritePin>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200002a0 	.word	0x200002a0
 8001dc4:	40010c00 	.word	0x40010c00

08001dc8 <keypad_read>:

void keypad_read(void) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	if (keypad_IsTouch()) {
 8001dcc:	f7ff ff60 	bl	8001c90 <keypad_IsTouch>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <keypad_read+0x12>
		keypad_scan();
 8001dd6:	f7ff ffc1 	bl	8001d5c <keypad_scan>
	}
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <keypad_IsPressed>:
uint8_t keypad_IsPressed(void) {
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 15; i++) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	71fb      	strb	r3, [r7, #7]
 8001dea:	e009      	b.n	8001e00 <keypad_IsPressed+0x20>
		if (key_buf[i] > 0)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <keypad_IsPressed+0x34>)
 8001df0:	5cd3      	ldrb	r3, [r2, r3]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <keypad_IsPressed+0x1a>
			return i;
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	e006      	b.n	8001e08 <keypad_IsPressed+0x28>
	for (uint8_t i = 0; i < 15; i++) {
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	2b0e      	cmp	r3, #14
 8001e04:	d9f2      	bls.n	8001dec <keypad_IsPressed+0xc>
	}
	return UNPRESSED;
 8001e06:	23ff      	movs	r3, #255	; 0xff
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	200002a0 	.word	0x200002a0

08001e18 <keypad_ResetFlag>:
void keypad_ResetFlag(uint8_t id) {
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
	if (id > 15)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b0f      	cmp	r3, #15
 8001e26:	d804      	bhi.n	8001e32 <keypad_ResetFlag+0x1a>
		return;
	key_buf[id] = 0;
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <keypad_ResetFlag+0x24>)
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	54d1      	strb	r1, [r2, r3]
 8001e30:	e000      	b.n	8001e34 <keypad_ResetFlag+0x1c>
		return;
 8001e32:	bf00      	nop
}
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	200002a0 	.word	0x200002a0

08001e40 <lcd_displayPW>:
void DelayInit(void);
void DelayUS(uint32_t);
void LCD_Home();


void lcd_displayPW(void){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
	char str[20];
	uint8_t i = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
	for(; i < pw_idxGet();i++){
 8001e4a:	e008      	b.n	8001e5e <lcd_displayPW+0x1e>
		str[i] = '*';
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	3318      	adds	r3, #24
 8001e50:	443b      	add	r3, r7
 8001e52:	222a      	movs	r2, #42	; 0x2a
 8001e54:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(; i < pw_idxGet();i++){
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
 8001e5e:	f000 fa6d 	bl	800233c <pw_idxGet>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d3ef      	bcc.n	8001e4c <lcd_displayPW+0xc>
	}
	str[i] = '\0';
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	3318      	adds	r3, #24
 8001e70:	443b      	add	r3, r7
 8001e72:	2200      	movs	r2, #0
 8001e74:	f803 2c18 	strb.w	r2, [r3, #-24]
	LCD_display("PIN", str);
 8001e78:	463b      	mov	r3, r7
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4803      	ldr	r0, [pc, #12]	; (8001e8c <lcd_displayPW+0x4c>)
 8001e7e:	f000 f8f9 	bl	8002074 <LCD_display>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	08006e68 	.word	0x08006e68

08001e90 <lcd_displaySuccess>:
void lcd_displaySuccess(void){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	LCD_display("     CHANGE", "  SUCCESSFULLY");
 8001e94:	4902      	ldr	r1, [pc, #8]	; (8001ea0 <lcd_displaySuccess+0x10>)
 8001e96:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <lcd_displaySuccess+0x14>)
 8001e98:	f000 f8ec 	bl	8002074 <LCD_display>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	08006e6c 	.word	0x08006e6c
 8001ea4:	08006e7c 	.word	0x08006e7c

08001ea8 <lcd_displayNormal>:
void lcd_displayNormal(void){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	LCD_display("    WELCOME TO", "     MY ROOM");
 8001eac:	4902      	ldr	r1, [pc, #8]	; (8001eb8 <lcd_displayNormal+0x10>)
 8001eae:	4803      	ldr	r0, [pc, #12]	; (8001ebc <lcd_displayNormal+0x14>)
 8001eb0:	f000 f8e0 	bl	8002074 <LCD_display>
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	08006e88 	.word	0x08006e88
 8001ebc:	08006e98 	.word	0x08006e98

08001ec0 <lcd_displayPW_change>:
void lcd_displayPW_change(void){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
	char str[20];
	uint8_t i = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]
	for(; i < pw_idxGet();i++){
 8001eca:	e008      	b.n	8001ede <lcd_displayPW_change+0x1e>
		str[i] = '*';
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	3318      	adds	r3, #24
 8001ed0:	443b      	add	r3, r7
 8001ed2:	222a      	movs	r2, #42	; 0x2a
 8001ed4:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(; i < pw_idxGet();i++){
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	3301      	adds	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
 8001ede:	f000 fa2d 	bl	800233c <pw_idxGet>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d3ef      	bcc.n	8001ecc <lcd_displayPW_change+0xc>
	}
	str[i] = '\0';
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	3318      	adds	r3, #24
 8001ef0:	443b      	add	r3, r7
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f803 2c18 	strb.w	r2, [r3, #-24]
	LCD_display("PIN 5 DIGITS", str);
 8001ef8:	463b      	mov	r3, r7
 8001efa:	4619      	mov	r1, r3
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <lcd_displayPW_change+0x4c>)
 8001efe:	f000 f8b9 	bl	8002074 <LCD_display>
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	08006ea8 	.word	0x08006ea8

08001f10 <LCD_Init>:

void LCD_Init() {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	dpRows = 2;
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <LCD_Init+0xc8>)
 8001f16:	2202      	movs	r2, #2
 8001f18:	701a      	strb	r2, [r3, #0]

	dpBacklight = LCD_BACKLIGHT;
 8001f1a:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <LCD_Init+0xcc>)
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_5x8DOTS | LCD_2LINE;
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <LCD_Init+0xd0>)
 8001f22:	2208      	movs	r2, #8
 8001f24:	701a      	strb	r2, [r3, #0]

	/* Wait for initialization */
	DelayInit();
 8001f26:	f000 f959 	bl	80021dc <DelayInit>
	HAL_Delay(50);
 8001f2a:	2032      	movs	r0, #50	; 0x32
 8001f2c:	f000 ffee 	bl	8002f0c <HAL_Delay>

	ExpanderWrite(dpBacklight);
 8001f30:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <LCD_Init+0xcc>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 f917 	bl	8002168 <ExpanderWrite>
	HAL_Delay(1000);
 8001f3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f3e:	f000 ffe5 	bl	8002f0c <HAL_Delay>

	/* 4bit Mode */
	Write4Bits(0x03 << 4);
 8001f42:	2030      	movs	r0, #48	; 0x30
 8001f44:	f000 f8ff 	bl	8002146 <Write4Bits>
	DelayUS(4500);
 8001f48:	f241 1094 	movw	r0, #4500	; 0x1194
 8001f4c:	f000 f96e 	bl	800222c <DelayUS>

	Write4Bits(0x03 << 4);
 8001f50:	2030      	movs	r0, #48	; 0x30
 8001f52:	f000 f8f8 	bl	8002146 <Write4Bits>
	DelayUS(4500);
 8001f56:	f241 1094 	movw	r0, #4500	; 0x1194
 8001f5a:	f000 f967 	bl	800222c <DelayUS>

	Write4Bits(0x03 << 4);
 8001f5e:	2030      	movs	r0, #48	; 0x30
 8001f60:	f000 f8f1 	bl	8002146 <Write4Bits>
	DelayUS(4500);
 8001f64:	f241 1094 	movw	r0, #4500	; 0x1194
 8001f68:	f000 f960 	bl	800222c <DelayUS>

	Write4Bits(0x02 << 4);
 8001f6c:	2020      	movs	r0, #32
 8001f6e:	f000 f8ea 	bl	8002146 <Write4Bits>
	DelayUS(100);
 8001f72:	2064      	movs	r0, #100	; 0x64
 8001f74:	f000 f95a 	bl	800222c <DelayUS>

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <LCD_Init+0xd0>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f043 0320 	orr.w	r3, r3, #32
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f8a2 	bl	80020cc <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF;
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <LCD_Init+0xd4>)
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	701a      	strb	r2, [r3, #0]
	//LCD_Display();
	dpControl |= LCD_DISPLAYON;
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <LCD_Init+0xd4>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <LCD_Init+0xd4>)
 8001f9a:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <LCD_Init+0xd4>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	f043 0308 	orr.w	r3, r3, #8
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f890 	bl	80020cc <SendCommand>
	LCD_Clear();
 8001fac:	f000 f81e 	bl	8001fec <LCD_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <LCD_Init+0xd8>)
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <LCD_Init+0xd8>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 f883 	bl	80020cc <SendCommand>
	DelayUS(4500);
 8001fc6:	f241 1094 	movw	r0, #4500	; 0x1194
 8001fca:	f000 f92f 	bl	800222c <DelayUS>

	LCD_Home();
 8001fce:	f000 f814 	bl	8001ffa <LCD_Home>

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200002b3 	.word	0x200002b3
 8001fdc:	200002b4 	.word	0x200002b4
 8001fe0:	200002b0 	.word	0x200002b0
 8001fe4:	200002b1 	.word	0x200002b1
 8001fe8:	200002b2 	.word	0x200002b2

08001fec <LCD_Clear>:

void LCD_Clear() {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f000 f86b 	bl	80020cc <SendCommand>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <LCD_Home>:

void LCD_Home() {
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 8001ffe:	2002      	movs	r0, #2
 8002000:	f000 f864 	bl	80020cc <SendCommand>
	DelayUS(2000);
 8002004:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002008:	f000 f910 	bl	800222c <DelayUS>
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row) {
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	460a      	mov	r2, r1
 800201a:	71fb      	strb	r3, [r7, #7]
 800201c:	4613      	mov	r3, r2
 800201e:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <LCD_SetCursor+0x5c>)
 8002022:	f107 0408 	add.w	r4, r7, #8
 8002026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002028:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= dpRows) {
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <LCD_SetCursor+0x60>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	79ba      	ldrb	r2, [r7, #6]
 8002032:	429a      	cmp	r2, r3
 8002034:	d303      	bcc.n	800203e <LCD_SetCursor+0x2e>
		row = dpRows - 1;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <LCD_SetCursor+0x60>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	3b01      	subs	r3, #1
 800203c:	71bb      	strb	r3, [r7, #6]
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	3318      	adds	r3, #24
 8002044:	443b      	add	r3, r7
 8002046:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	4413      	add	r3, r2
 8002050:	b2db      	uxtb	r3, r3
 8002052:	b25b      	sxtb	r3, r3
 8002054:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002058:	b25b      	sxtb	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	4618      	mov	r0, r3
 800205e:	f000 f835 	bl	80020cc <SendCommand>
}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop
 800206c:	08006eb8 	.word	0x08006eb8
 8002070:	200002b3 	.word	0x200002b3

08002074 <LCD_display>:
void LCD_Display() {
	dpControl |= LCD_DISPLAYON;
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void LCD_display(const char c1[], const char c2[]) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
	LCD_Clear();
 800207e:	f7ff ffb5 	bl	8001fec <LCD_Clear>
	LCD_SetCursor(0, 0);
 8002082:	2100      	movs	r1, #0
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff ffc3 	bl	8002010 <LCD_SetCursor>
	while (*c1)
 800208a:	e006      	b.n	800209a <LCD_display+0x26>
		SendChar(*c1++);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f827 	bl	80020e8 <SendChar>
	while (*c1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f4      	bne.n	800208c <LCD_display+0x18>
	LCD_SetCursor(0, 1);
 80020a2:	2101      	movs	r1, #1
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff ffb3 	bl	8002010 <LCD_SetCursor>
	while (*c2)
 80020aa:	e006      	b.n	80020ba <LCD_display+0x46>
		SendChar(*c2++);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	603a      	str	r2, [r7, #0]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f817 	bl	80020e8 <SendChar>
	while (*c2)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f4      	bne.n	80020ac <LCD_display+0x38>
}
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <SendCommand>:

void SendCommand(uint8_t cmd) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
	Send(cmd, 0);
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f812 	bl	8002104 <Send>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <SendChar>:

void SendChar(uint8_t ch) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
	Send(ch, RS);
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2101      	movs	r1, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 f804 	bl	8002104 <Send>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <Send>:

void Send(uint8_t value, uint8_t mode) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	460a      	mov	r2, r1
 800210e:	71fb      	strb	r3, [r7, #7]
 8002110:	4613      	mov	r3, r2
 8002112:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xF0;
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f023 030f 	bic.w	r3, r3, #15
 800211a:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xF0;
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	73bb      	strb	r3, [r7, #14]
	Write4Bits((highnib) | mode);
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	79bb      	ldrb	r3, [r7, #6]
 8002126:	4313      	orrs	r3, r2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f80b 	bl	8002146 <Write4Bits>
	Write4Bits((lownib) | mode);
 8002130:	7bba      	ldrb	r2, [r7, #14]
 8002132:	79bb      	ldrb	r3, [r7, #6]
 8002134:	4313      	orrs	r3, r2
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	f000 f804 	bl	8002146 <Write4Bits>
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <Write4Bits>:

void Write4Bits(uint8_t value) {
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(value);
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f808 	bl	8002168 <ExpanderWrite>
	PulseEnable(value);
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f820 	bl	80021a0 <PulseEnable>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <ExpanderWrite>:

void ExpanderWrite(uint8_t _data) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af02      	add	r7, sp, #8
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
	uint8_t data = _data | dpBacklight;
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <ExpanderWrite+0x30>)
 8002174:	781a      	ldrb	r2, [r3, #0]
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	4313      	orrs	r3, r2
 800217a:	b2db      	uxtb	r3, r3
 800217c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 800217e:	f107 020f 	add.w	r2, r7, #15
 8002182:	230a      	movs	r3, #10
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2301      	movs	r3, #1
 8002188:	217e      	movs	r1, #126	; 0x7e
 800218a:	4804      	ldr	r0, [pc, #16]	; (800219c <ExpanderWrite+0x34>)
 800218c:	f001 fbb2 	bl	80038f4 <HAL_I2C_Master_Transmit>
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200002b4 	.word	0x200002b4
 800219c:	20000090 	.word	0x20000090

080021a0 <PulseEnable>:

void PulseEnable(uint8_t _data) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(_data | ENABLE);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ffd8 	bl	8002168 <ExpanderWrite>
	DelayUS(20);
 80021b8:	2014      	movs	r0, #20
 80021ba:	f000 f837 	bl	800222c <DelayUS>

	ExpanderWrite(_data & ~ENABLE);
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ffce 	bl	8002168 <ExpanderWrite>
	DelayUS(20);
 80021cc:	2014      	movs	r0, #20
 80021ce:	f000 f82d 	bl	800222c <DelayUS>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <DelayInit>:

void DelayInit(void) {
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <DelayInit+0x48>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a0f      	ldr	r2, [pc, #60]	; (8002224 <DelayInit+0x48>)
 80021e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ea:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <DelayInit+0x48>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <DelayInit+0x48>)
 80021f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f6:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <DelayInit+0x4c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <DelayInit+0x4c>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <DelayInit+0x4c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a07      	ldr	r2, [pc, #28]	; (8002228 <DelayInit+0x4c>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <DelayInit+0x4c>)
 8002212:	2200      	movs	r2, #0
 8002214:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8002216:	bf00      	nop
	__ASM volatile ("NOP");
 8002218:	bf00      	nop
	__ASM volatile ("NOP");
 800221a:	bf00      	nop
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	e000edf0 	.word	0xe000edf0
 8002228:	e0001000 	.word	0xe0001000

0800222c <DelayUS>:

void DelayUS(uint32_t us) {
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <DelayUS+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <DelayUS+0x44>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0c9a      	lsrs	r2, r3, #18
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <DelayUS+0x48>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <DelayUS+0x48>)
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	429a      	cmp	r2, r3
 800225e:	d8f6      	bhi.n	800224e <DelayUS+0x22>
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000018 	.word	0x20000018
 8002270:	431bde83 	.word	0x431bde83
 8002274:	e0001000 	.word	0xe0001000

08002278 <lock_open>:
 */

#include "my_lock.h"


void lock_open(void){
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LOCK_PORT, LOCK_PIN, 1);
 800227c:	2201      	movs	r2, #1
 800227e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002282:	4802      	ldr	r0, [pc, #8]	; (800228c <lock_open+0x14>)
 8002284:	f001 f9c1 	bl	800360a <HAL_GPIO_WritePin>
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40010c00 	.word	0x40010c00

08002290 <lock_close>:

void lock_close(void){
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LOCK_PORT, LOCK_PIN, 0);
 8002294:	2200      	movs	r2, #0
 8002296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800229a:	4802      	ldr	r0, [pc, #8]	; (80022a4 <lock_close+0x14>)
 800229c:	f001 f9b5 	bl	800360a <HAL_GPIO_WritePin>
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40010c00 	.word	0x40010c00

080022a8 <pw_update_change>:
char password[LENGTH_OF_PASS + 1] = "11111";
char change_pass[LENGTH_OF_PASS + 1] = "11111";
char password_buf[17] = "";

uint8_t pw_idx = 0;
bool pw_update_change(uint8_t number) {
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
	if (pw_idx >= LENGTH_OF_PASS) {
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <pw_update_change+0x3c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d901      	bls.n	80022be <pw_update_change+0x16>
		return 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e00c      	b.n	80022d8 <pw_update_change+0x30>
	}
	change_pass[pw_idx++] = number + '0';
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <pw_update_change+0x3c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	b2d1      	uxtb	r1, r2
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <pw_update_change+0x3c>)
 80022c8:	7011      	strb	r1, [r2, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	3330      	adds	r3, #48	; 0x30
 80022d0:	b2d9      	uxtb	r1, r3
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <pw_update_change+0x40>)
 80022d4:	5499      	strb	r1, [r3, r2]
	return 1;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	200002c9 	.word	0x200002c9
 80022e8:	20000010 	.word	0x20000010

080022ec <pw_update>:

bool pw_update(uint8_t number) {
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
	if (pw_idx >= 16) {
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <pw_update+0x48>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b0f      	cmp	r3, #15
 80022fc:	d901      	bls.n	8002302 <pw_update+0x16>
		return 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	e012      	b.n	8002328 <pw_update+0x3c>
	}
	password_buf[pw_idx++] = number + '0';
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <pw_update+0x48>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	b2d1      	uxtb	r1, r2
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <pw_update+0x48>)
 800230c:	7011      	strb	r1, [r2, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	3330      	adds	r3, #48	; 0x30
 8002314:	b2d9      	uxtb	r1, r3
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <pw_update+0x4c>)
 8002318:	5499      	strb	r1, [r3, r2]
	password_buf[pw_idx] = '\0';
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <pw_update+0x48>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <pw_update+0x4c>)
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]
	return 1;
 8002326:	2301      	movs	r3, #1
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	200002c9 	.word	0x200002c9
 8002338:	200002b8 	.word	0x200002b8

0800233c <pw_idxGet>:
uint8_t pw_idxGet(void) {
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
	return pw_idx;
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <pw_idxGet+0x10>)
 8002342:	781b      	ldrb	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	200002c9 	.word	0x200002c9

08002350 <pw_checkInPW_change>:
char* pw_ReturnInput(void) {
	return password_buf;
}
bool pw_checkInPW_change(void) {
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	return strcmp(change_pass, password_buf) == 0;
 8002354:	4905      	ldr	r1, [pc, #20]	; (800236c <pw_checkInPW_change+0x1c>)
 8002356:	4806      	ldr	r0, [pc, #24]	; (8002370 <pw_checkInPW_change+0x20>)
 8002358:	f7fd fefa 	bl	8000150 <strcmp>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf0c      	ite	eq
 8002362:	2301      	moveq	r3, #1
 8002364:	2300      	movne	r3, #0
 8002366:	b2db      	uxtb	r3, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200002b8 	.word	0x200002b8
 8002370:	20000010 	.word	0x20000010

08002374 <pw_checkInPW>:
bool pw_checkInPW(void) {
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	return strcmp(password, password_buf) == 0;
 8002378:	4905      	ldr	r1, [pc, #20]	; (8002390 <pw_checkInPW+0x1c>)
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <pw_checkInPW+0x20>)
 800237c:	f7fd fee8 	bl	8000150 <strcmp>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf0c      	ite	eq
 8002386:	2301      	moveq	r3, #1
 8002388:	2300      	movne	r3, #0
 800238a:	b2db      	uxtb	r3, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200002b8 	.word	0x200002b8
 8002394:	20000008 	.word	0x20000008

08002398 <pw_ResetIdx>:
void pw_ResetIdx(void) {
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
	pw_idx = 0;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <pw_ResetIdx+0x14>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	200002c9 	.word	0x200002c9

080023b0 <pw_UpdatePass>:
void pw_UpdatePass(void) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	strcpy(password, change_pass);
 80023b4:	4902      	ldr	r1, [pc, #8]	; (80023c0 <pw_UpdatePass+0x10>)
 80023b6:	4803      	ldr	r0, [pc, #12]	; (80023c4 <pw_UpdatePass+0x14>)
 80023b8:	f004 f910 	bl	80065dc <strcpy>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000010 	.word	0x20000010
 80023c4:	20000008 	.word	0x20000008

080023c8 <sch_init>:
struct {
	struct task *top;
} stack_task;
//******************START TIMER*********************
extern TIM_HandleTypeDef htim2;
void sch_init(void) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <sch_init+0x10>)
 80023ce:	f002 fa49 	bl	8004864 <HAL_TIM_Base_Start_IT>
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000012c 	.word	0x2000012c

080023dc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance) {
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d101      	bne.n	80023f4 <HAL_TIM_PeriodElapsedCallback+0x18>
		sch_update();
 80023f0:	f000 f86e 	bl	80024d0 <sch_update>
	}
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	2000012c 	.word	0x2000012c

08002400 <sch_add_task>:
 delay - the amount of time after which the task will run
 period - the amount of cycle time to run task
 * @retval:	1 - add successfully
 * 			0 - add badly
 * */
bool sch_add_task(void (*pTask)(), uint32_t delay, uint32_t period) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
	struct task *my_task = (struct task*) malloc(sizeof(struct task));
 800240c:	2010      	movs	r0, #16
 800240e:	f003 ffb5 	bl	800637c <malloc>
 8002412:	4603      	mov	r3, r0
 8002414:	617b      	str	r3, [r7, #20]
	my_task->pTask = pTask;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	601a      	str	r2, [r3, #0]
	my_task->counter = delay * FREQ_OF_TIM / 1000;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <sch_add_task+0xc8>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	099a      	lsrs	r2, r3, #6
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	605a      	str	r2, [r3, #4]
	my_task->period = period;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	609a      	str	r2, [r3, #8]
	my_task->next_task = 0;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
	if (stack_task.top == 0) {
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <sch_add_task+0xcc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d104      	bne.n	8002450 <sch_add_task+0x50>
		stack_task.top = my_task;
 8002446:	4a21      	ldr	r2, [pc, #132]	; (80024cc <sch_add_task+0xcc>)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	6013      	str	r3, [r2, #0]
		// stack_task.bottom = stack_task.top;
		// stack_task.time_length = stack_task.top->counter;
		return 1;
 800244c:	2301      	movs	r3, #1
 800244e:	e037      	b.n	80024c0 <sch_add_task+0xc0>
	//     stack_task.bottom->next_task = my_task;
	//     stack_task.bottom = stack_task.bottom->next_task;
	//     stack_task.time_length += my_task->counter;
	//     return 1;
	// }
	struct task *pre = stack_task.top;
 8002450:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <sch_add_task+0xcc>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	61fb      	str	r3, [r7, #28]
	struct task *cur = stack_task.top;
 8002456:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <sch_add_task+0xcc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	61bb      	str	r3, [r7, #24]
	while (cur && my_task->counter >= cur->counter) {
 800245c:	e00b      	b.n	8002476 <sch_add_task+0x76>
		my_task->counter = my_task->counter - cur->counter;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	1ad2      	subs	r2, r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	605a      	str	r2, [r3, #4]
		pre = cur;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	61fb      	str	r3, [r7, #28]
		cur = cur->next_task;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
	while (cur && my_task->counter >= cur->counter) {
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <sch_add_task+0x88>
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	d2ea      	bcs.n	800245e <sch_add_task+0x5e>
	}
	if (pre != cur) {
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	429a      	cmp	r2, r3
 800248e:	d006      	beq.n	800249e <sch_add_task+0x9e>
		pre->next_task = my_task;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	60da      	str	r2, [r3, #12]
		my_task->next_task = cur;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	e005      	b.n	80024aa <sch_add_task+0xaa>
	} else {
		my_task->next_task = cur;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	60da      	str	r2, [r3, #12]
		stack_task.top = my_task;
 80024a4:	4a09      	ldr	r2, [pc, #36]	; (80024cc <sch_add_task+0xcc>)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	6013      	str	r3, [r2, #0]
	}
	if (cur)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <sch_add_task+0xbe>
		cur->counter -= my_task->counter;
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	1ad2      	subs	r2, r2, r3
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	605a      	str	r2, [r3, #4]
	return 1;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3720      	adds	r7, #32
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	10624dd3 	.word	0x10624dd3
 80024cc:	200002cc 	.word	0x200002cc

080024d0 <sch_update>:
/*
 * @brief:	decrease the remaining time of the top task
 * @para:	none
 * @retval:	none
 * */
void sch_update(void) {
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0

	if (stack_task.top == 0){
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <sch_update+0x2c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <sch_update+0x22>
		return;
	}
	if (stack_task.top->counter > 0) {
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <sch_update+0x2c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <sch_update+0x24>
		stack_task.top->counter--;
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <sch_update+0x2c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	3a01      	subs	r2, #1
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	e000      	b.n	80024f4 <sch_update+0x24>
		return;
 80024f2:	bf00      	nop
	}
}
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	200002cc 	.word	0x200002cc

08002500 <sch_delete_task>:
/*
 * @brief:	delete a task in the stack and release the memory
 * @para:	del_task - the task need to be deleted
 * @retval:	none
 * */
static void sch_delete_task(struct task *del_task) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	if (del_task == 0) {
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <sch_delete_task+0x16>
		return;
	}
	free(del_task);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f003 ff3c 	bl	800638c <free>
 8002514:	e000      	b.n	8002518 <sch_delete_task+0x18>
		return;
 8002516:	bf00      	nop
}
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <sch_dispatch>:
 * @brief:	run the top task and update if over remainning time
 * @para:	none
 * @retval:	1 - run successfully
 *			0 - run badly
 * */
bool sch_dispatch(void) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
	if (stack_task.top == 0)
 8002526:	4b18      	ldr	r3, [pc, #96]	; (8002588 <sch_dispatch+0x68>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <sch_dispatch+0x12>
		return 0;
 800252e:	2300      	movs	r3, #0
 8002530:	e026      	b.n	8002580 <sch_dispatch+0x60>
	if (stack_task.top->counter == 0) {
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <sch_dispatch+0x68>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d120      	bne.n	800257e <sch_dispatch+0x5e>
		(*stack_task.top->pTask)();
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <sch_dispatch+0x68>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4798      	blx	r3
		struct task *temp = stack_task.top;
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <sch_dispatch+0x68>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	607b      	str	r3, [r7, #4]
		stack_task.top = stack_task.top->next_task;
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <sch_dispatch+0x68>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <sch_dispatch+0x68>)
 8002552:	6013      	str	r3, [r2, #0]
		temp->next_task = 0;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
		if (temp->period != 0) {
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <sch_dispatch+0x54>
			sch_add_task(temp->pTask, temp->period, temp->period);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6899      	ldr	r1, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	461a      	mov	r2, r3
 8002570:	f7ff ff46 	bl	8002400 <sch_add_task>
		}
		sch_delete_task(temp);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ffc3 	bl	8002500 <sch_delete_task>
		return 1;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <sch_dispatch+0x60>
	}
	return 0;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200002cc 	.word	0x200002cc

0800258c <sch_remove_task>:
void sch_remove_task(void (*pTask)()) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	struct task *cur = stack_task.top;
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <sch_remove_task+0x5c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
	struct task *pre = cur;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	60bb      	str	r3, [r7, #8]
	while (cur) {
 800259e:	e01b      	b.n	80025d8 <sch_remove_task+0x4c>
		if (pTask == cur->pTask) {
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d111      	bne.n	80025ce <sch_remove_task+0x42>
			if (pre == cur) {
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d105      	bne.n	80025be <sch_remove_task+0x32>
				stack_task.top = stack_task.top->next_task;
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <sch_remove_task+0x5c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <sch_remove_task+0x5c>)
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e003      	b.n	80025c6 <sch_remove_task+0x3a>
			} else {
				pre->next_task = cur->next_task;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	60da      	str	r2, [r3, #12]
			}
			sch_delete_task(cur);
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f7ff ff9a 	bl	8002500 <sch_delete_task>
			return;
 80025cc:	e008      	b.n	80025e0 <sch_remove_task+0x54>
		}
		pre = cur;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
		cur = cur->next_task;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	60fb      	str	r3, [r7, #12]
	while (cur) {
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1e0      	bne.n	80025a0 <sch_remove_task+0x14>
	}
	return;
 80025de:	bf00      	nop
}
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200002cc 	.word	0x200002cc

080025ec <hcsr04_init>:
uint32_t Difference2 = 0;
uint8_t Is_First_Captured2 = 0;  // is the first value captured ?
uint32_t Distance2 = 0;
extern TIM_HandleTypeDef htim1;

void hcsr04_init(void) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80025f0:	2100      	movs	r1, #0
 80025f2:	4804      	ldr	r0, [pc, #16]	; (8002604 <hcsr04_init+0x18>)
 80025f4:	f002 f9d8 	bl	80049a8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 80025f8:	210c      	movs	r1, #12
 80025fa:	4802      	ldr	r0, [pc, #8]	; (8002604 <hcsr04_init+0x18>)
 80025fc:	f002 f9d4 	bl	80049a8 <HAL_TIM_IC_Start_IT>
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200000e4 	.word	0x200000e4

08002608 <hcsr04_read>:

void hcsr04_read(void) {
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SOUND_SS_PORT, SOUND_SS_TRI1_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 800260c:	2201      	movs	r2, #1
 800260e:	2120      	movs	r1, #32
 8002610:	4813      	ldr	r0, [pc, #76]	; (8002660 <hcsr04_read+0x58>)
 8002612:	f000 fffa 	bl	800360a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SOUND_SS_PORT, SOUND_SS_TRI2_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8002616:	2201      	movs	r2, #1
 8002618:	2140      	movs	r1, #64	; 0x40
 800261a:	4811      	ldr	r0, [pc, #68]	; (8002660 <hcsr04_read+0x58>)
 800261c:	f000 fff5 	bl	800360a <HAL_GPIO_WritePin>
	DelayUS(10);  // wait for 10 us
 8002620:	200a      	movs	r0, #10
 8002622:	f7ff fe03 	bl	800222c <DelayUS>
	HAL_GPIO_WritePin(SOUND_SS_PORT, SOUND_SS_TRI1_PIN, 0); // pull the TRIG pin low
 8002626:	2200      	movs	r2, #0
 8002628:	2120      	movs	r1, #32
 800262a:	480d      	ldr	r0, [pc, #52]	; (8002660 <hcsr04_read+0x58>)
 800262c:	f000 ffed 	bl	800360a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SOUND_SS_PORT, SOUND_SS_TRI2_PIN, 0); // pull the TRIG pin HIGH
 8002630:	2200      	movs	r2, #0
 8002632:	2140      	movs	r1, #64	; 0x40
 8002634:	480a      	ldr	r0, [pc, #40]	; (8002660 <hcsr04_read+0x58>)
 8002636:	f000 ffe8 	bl	800360a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <hcsr04_read+0x5c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <hcsr04_read+0x5c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0202 	orr.w	r2, r2, #2
 8002648:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <hcsr04_read+0x5c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <hcsr04_read+0x5c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0210 	orr.w	r2, r2, #16
 8002658:	60da      	str	r2, [r3, #12]
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40010800 	.word	0x40010800
 8002664:	200000e4 	.word	0x200000e4

08002668 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7f1b      	ldrb	r3, [r3, #28]
 8002674:	2b01      	cmp	r3, #1
 8002676:	f040 8084 	bne.w	8002782 <HAL_TIM_IC_CaptureCallback+0x11a>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 800267a:	4b89      	ldr	r3, [pc, #548]	; (80028a0 <HAL_TIM_IC_CaptureCallback+0x238>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d11a      	bne.n	80026b8 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8002682:	2100      	movs	r1, #0
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f002 fd07 	bl	8005098 <HAL_TIM_ReadCapturedValue>
 800268a:	4603      	mov	r3, r0
 800268c:	4a85      	ldr	r2, [pc, #532]	; (80028a4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800268e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8002690:	4b83      	ldr	r3, [pc, #524]	; (80028a0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6a1a      	ldr	r2, [r3, #32]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 020a 	bic.w	r2, r2, #10
 80026a4:	621a      	str	r2, [r3, #32]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0202 	orr.w	r2, r2, #2
 80026b4:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
		}

	}
}
 80026b6:	e0eb      	b.n	8002890 <HAL_TIM_IC_CaptureCallback+0x228>
		else if (Is_First_Captured == 1)   // if the first is already captured
 80026b8:	4b79      	ldr	r3, [pc, #484]	; (80028a0 <HAL_TIM_IC_CaptureCallback+0x238>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	f040 80e7 	bne.w	8002890 <HAL_TIM_IC_CaptureCallback+0x228>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 80026c2:	2100      	movs	r1, #0
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f002 fce7 	bl	8005098 <HAL_TIM_ReadCapturedValue>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4a76      	ldr	r2, [pc, #472]	; (80028a8 <HAL_TIM_IC_CaptureCallback+0x240>)
 80026ce:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 80026d8:	4b73      	ldr	r3, [pc, #460]	; (80028a8 <HAL_TIM_IC_CaptureCallback+0x240>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b71      	ldr	r3, [pc, #452]	; (80028a4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d907      	bls.n	80026f4 <HAL_TIM_IC_CaptureCallback+0x8c>
				Difference = IC_Val2 - IC_Val1;
 80026e4:	4b70      	ldr	r3, [pc, #448]	; (80028a8 <HAL_TIM_IC_CaptureCallback+0x240>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b6e      	ldr	r3, [pc, #440]	; (80028a4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	4a6f      	ldr	r2, [pc, #444]	; (80028ac <HAL_TIM_IC_CaptureCallback+0x244>)
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00f      	b.n	8002714 <HAL_TIM_IC_CaptureCallback+0xac>
			else if (IC_Val1 > IC_Val2) {
 80026f4:	4b6b      	ldr	r3, [pc, #428]	; (80028a4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <HAL_TIM_IC_CaptureCallback+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d909      	bls.n	8002714 <HAL_TIM_IC_CaptureCallback+0xac>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8002700:	4b69      	ldr	r3, [pc, #420]	; (80028a8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b67      	ldr	r3, [pc, #412]	; (80028a4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800270e:	33ff      	adds	r3, #255	; 0xff
 8002710:	4a66      	ldr	r2, [pc, #408]	; (80028ac <HAL_TIM_IC_CaptureCallback+0x244>)
 8002712:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034 / 2;
 8002714:	4b65      	ldr	r3, [pc, #404]	; (80028ac <HAL_TIM_IC_CaptureCallback+0x244>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd fe65 	bl	80003e8 <__aeabi_ui2d>
 800271e:	a35e      	add	r3, pc, #376	; (adr r3, 8002898 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002724:	f7fd feda 	bl	80004dc <__aeabi_dmul>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002738:	f7fd fffa 	bl	8000730 <__aeabi_ddiv>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	f7fe f8dc 	bl	8000900 <__aeabi_d2uiz>
 8002748:	4603      	mov	r3, r0
 800274a:	4a59      	ldr	r2, [pc, #356]	; (80028b0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800274c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 800274e:	4b54      	ldr	r3, [pc, #336]	; (80028a0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6a1a      	ldr	r2, [r3, #32]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 020a 	bic.w	r2, r2, #10
 8002762:	621a      	str	r2, [r3, #32]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6a12      	ldr	r2, [r2, #32]
 800276e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	4b4f      	ldr	r3, [pc, #316]	; (80028b4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0202 	bic.w	r2, r2, #2
 800277e:	60da      	str	r2, [r3, #12]
}
 8002780:	e086      	b.n	8002890 <HAL_TIM_IC_CaptureCallback+0x228>
	} else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7f1b      	ldrb	r3, [r3, #28]
 8002786:	2b08      	cmp	r3, #8
 8002788:	f040 8082 	bne.w	8002890 <HAL_TIM_IC_CaptureCallback+0x228>
		if (Is_First_Captured2 == 0) // if the first value is not captured
 800278c:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11a      	bne.n	80027ca <HAL_TIM_IC_CaptureCallback+0x162>
			IC_Val21 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 8002794:	210c      	movs	r1, #12
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f002 fc7e 	bl	8005098 <HAL_TIM_ReadCapturedValue>
 800279c:	4603      	mov	r3, r0
 800279e:	4a47      	ldr	r2, [pc, #284]	; (80028bc <HAL_TIM_IC_CaptureCallback+0x254>)
 80027a0:	6013      	str	r3, [r2, #0]
			Is_First_Captured2 = 1;  // set the first captured as true
 80027a2:	4b45      	ldr	r3, [pc, #276]	; (80028b8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6a1a      	ldr	r2, [r3, #32]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027b6:	621a      	str	r2, [r3, #32]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6a1a      	ldr	r2, [r3, #32]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027c6:	621a      	str	r2, [r3, #32]
}
 80027c8:	e062      	b.n	8002890 <HAL_TIM_IC_CaptureCallback+0x228>
		else if (Is_First_Captured2 == 1)   // if the first is already captured
 80027ca:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d15e      	bne.n	8002890 <HAL_TIM_IC_CaptureCallback+0x228>
			IC_Val22 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read second value
 80027d2:	210c      	movs	r1, #12
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f002 fc5f 	bl	8005098 <HAL_TIM_ReadCapturedValue>
 80027da:	4603      	mov	r3, r0
 80027dc:	4a38      	ldr	r2, [pc, #224]	; (80028c0 <HAL_TIM_IC_CaptureCallback+0x258>)
 80027de:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2200      	movs	r2, #0
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val22 > IC_Val21) {
 80027e8:	4b35      	ldr	r3, [pc, #212]	; (80028c0 <HAL_TIM_IC_CaptureCallback+0x258>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b33      	ldr	r3, [pc, #204]	; (80028bc <HAL_TIM_IC_CaptureCallback+0x254>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d907      	bls.n	8002804 <HAL_TIM_IC_CaptureCallback+0x19c>
				Difference2 = IC_Val22 - IC_Val21;
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_TIM_IC_CaptureCallback+0x258>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b30      	ldr	r3, [pc, #192]	; (80028bc <HAL_TIM_IC_CaptureCallback+0x254>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	4a31      	ldr	r2, [pc, #196]	; (80028c4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00f      	b.n	8002824 <HAL_TIM_IC_CaptureCallback+0x1bc>
			else if (IC_Val21 > IC_Val22) {
 8002804:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <HAL_TIM_IC_CaptureCallback+0x254>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_TIM_IC_CaptureCallback+0x258>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d909      	bls.n	8002824 <HAL_TIM_IC_CaptureCallback+0x1bc>
				Difference2 = (0xffff - IC_Val21) + IC_Val22;
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_TIM_IC_CaptureCallback+0x254>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800281e:	33ff      	adds	r3, #255	; 0xff
 8002820:	4a28      	ldr	r2, [pc, #160]	; (80028c4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002822:	6013      	str	r3, [r2, #0]
			Distance2 = Difference2 * .034 / 2;
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fddd 	bl	80003e8 <__aeabi_ui2d>
 800282e:	a31a      	add	r3, pc, #104	; (adr r3, 8002898 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	f7fd fe52 	bl	80004dc <__aeabi_dmul>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002848:	f7fd ff72 	bl	8000730 <__aeabi_ddiv>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f854 	bl	8000900 <__aeabi_d2uiz>
 8002858:	4603      	mov	r3, r0
 800285a:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_TIM_IC_CaptureCallback+0x260>)
 800285c:	6013      	str	r3, [r2, #0]
			Is_First_Captured2 = 0; // set it back to false
 800285e:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6a1a      	ldr	r2, [r3, #32]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002872:	621a      	str	r2, [r3, #32]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6a12      	ldr	r2, [r2, #32]
 800287e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0210 	bic.w	r2, r2, #16
 800288e:	60da      	str	r2, [r3, #12]
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	b020c49c 	.word	0xb020c49c
 800289c:	3fa16872 	.word	0x3fa16872
 80028a0:	200002dc 	.word	0x200002dc
 80028a4:	200002d0 	.word	0x200002d0
 80028a8:	200002d4 	.word	0x200002d4
 80028ac:	200002d8 	.word	0x200002d8
 80028b0:	200002e0 	.word	0x200002e0
 80028b4:	200000e4 	.word	0x200000e4
 80028b8:	200002f0 	.word	0x200002f0
 80028bc:	200002e4 	.word	0x200002e4
 80028c0:	200002e8 	.word	0x200002e8
 80028c4:	200002ec 	.word	0x200002ec
 80028c8:	200002f4 	.word	0x200002f4

080028cc <toggle_led>:
 *      Author: HP
 */

#include"my_system.h"

static void toggle_led(void) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(DEBUG_LED_PORT, DEBUG_LED_PIN);
 80028d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <toggle_led+0x14>)
 80028d6:	f000 feb0 	bl	800363a <HAL_GPIO_TogglePin>
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40011000 	.word	0x40011000

080028e4 <init>:


extern UART_HandleTypeDef huart2;


void init(void) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	sch_init();
 80028e8:	f7ff fd6e 	bl	80023c8 <sch_init>
	LCD_Init();
 80028ec:	f7ff fb10 	bl	8001f10 <LCD_Init>
	LCD_Clear();
 80028f0:	f7ff fb7c 	bl	8001fec <LCD_Clear>
	keypad_init();
 80028f4:	f7ff fa4a 	bl	8001d8c <keypad_init>
	button_init();
 80028f8:	f7fe fa7c 	bl	8000df4 <button_init>
	fp_init();
 80028fc:	f7fe fc10 	bl	8001120 <fp_init>
	hcsr04_init();
 8002900:	f7ff fe74 	bl	80025ec <hcsr04_init>
	sch_add_task(hcsr04_read, 0, 130);
 8002904:	2282      	movs	r2, #130	; 0x82
 8002906:	2100      	movs	r1, #0
 8002908:	480c      	ldr	r0, [pc, #48]	; (800293c <init+0x58>)
 800290a:	f7ff fd79 	bl	8002400 <sch_add_task>
	sch_add_task(button_read, 0, 50);
 800290e:	2232      	movs	r2, #50	; 0x32
 8002910:	2100      	movs	r1, #0
 8002912:	480b      	ldr	r0, [pc, #44]	; (8002940 <init+0x5c>)
 8002914:	f7ff fd74 	bl	8002400 <sch_add_task>
	sch_add_task(keypad_read, 0, 75);
 8002918:	224b      	movs	r2, #75	; 0x4b
 800291a:	2100      	movs	r1, #0
 800291c:	4809      	ldr	r0, [pc, #36]	; (8002944 <init+0x60>)
 800291e:	f7ff fd6f 	bl	8002400 <sch_add_task>
	sch_add_task(fsm_lock, 0, 10);
 8002922:	220a      	movs	r2, #10
 8002924:	2100      	movs	r1, #0
 8002926:	4808      	ldr	r0, [pc, #32]	; (8002948 <init+0x64>)
 8002928:	f7ff fd6a 	bl	8002400 <sch_add_task>
	sch_add_task(toggle_led, 0, ONE_SECOND);
 800292c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002930:	2100      	movs	r1, #0
 8002932:	4806      	ldr	r0, [pc, #24]	; (800294c <init+0x68>)
 8002934:	f7ff fd64 	bl	8002400 <sch_add_task>
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	08002609 	.word	0x08002609
 8002940:	08000ec5 	.word	0x08000ec5
 8002944:	08001dc9 	.word	0x08001dc9
 8002948:	08001621 	.word	0x08001621
 800294c:	080028cd 	.word	0x080028cd

08002950 <loop>:


void loop(void) {
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	sch_dispatch();
 8002954:	f7ff fde4 	bl	8002520 <sch_dispatch>
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}

0800295c <uart_fp_init>:

extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;

static uint8_t uart_data;
void uart_fp_init(void){
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &uart_data, 1);
 8002960:	2201      	movs	r2, #1
 8002962:	4903      	ldr	r1, [pc, #12]	; (8002970 <uart_fp_init+0x14>)
 8002964:	4803      	ldr	r0, [pc, #12]	; (8002974 <uart_fp_init+0x18>)
 8002966:	f002 ff64 	bl	8005832 <HAL_UART_Receive_IT>
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200002f8 	.word	0x200002f8
 8002974:	20000174 	.word	0x20000174

08002978 <HAL_UART_RxCpltCallback>:
void uart_SendPressedKey(uint8_t key) {
	char str[30];
	uint8_t len = sprintf(str,"#Key:%u!\n",key);
	HAL_UART_Transmit(&huart2, (void*)str, len, 10);
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_UART_RxCpltCallback+0x30>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d109      	bne.n	80029a0 <HAL_UART_RxCpltCallback+0x28>
		fp_receive_data(uart_data);
 800298c:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_UART_RxCpltCallback+0x34>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fdfb 	bl	800158c <fp_receive_data>
		HAL_UART_Receive_IT(&huart1, &uart_data, 1);
 8002996:	2201      	movs	r2, #1
 8002998:	4904      	ldr	r1, [pc, #16]	; (80029ac <HAL_UART_RxCpltCallback+0x34>)
 800299a:	4803      	ldr	r0, [pc, #12]	; (80029a8 <HAL_UART_RxCpltCallback+0x30>)
 800299c:	f002 ff49 	bl	8005832 <HAL_UART_Receive_IT>
	}
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000174 	.word	0x20000174
 80029ac:	200002f8 	.word	0x200002f8

080029b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <HAL_MspInit+0x5c>)
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <HAL_MspInit+0x5c>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6193      	str	r3, [r2, #24]
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_MspInit+0x5c>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_MspInit+0x5c>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <HAL_MspInit+0x5c>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	61d3      	str	r3, [r2, #28]
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_MspInit+0x5c>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_MspInit+0x60>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_MspInit+0x60>)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40010000 	.word	0x40010000

08002a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 0310 	add.w	r3, r7, #16
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <HAL_I2C_MspInit+0x70>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d123      	bne.n	8002a7c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_I2C_MspInit+0x74>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <HAL_I2C_MspInit+0x74>)
 8002a3a:	f043 0308 	orr.w	r3, r3, #8
 8002a3e:	6193      	str	r3, [r2, #24]
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_I2C_MspInit+0x74>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a4c:	23c0      	movs	r3, #192	; 0xc0
 8002a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a50:	2312      	movs	r3, #18
 8002a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a58:	f107 0310 	add.w	r3, r7, #16
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	480b      	ldr	r0, [pc, #44]	; (8002a8c <HAL_I2C_MspInit+0x78>)
 8002a60:	f000 fc38 	bl	80032d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_I2C_MspInit+0x74>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <HAL_I2C_MspInit+0x74>)
 8002a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a6e:	61d3      	str	r3, [r2, #28]
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_I2C_MspInit+0x74>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a7c:	bf00      	nop
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40005400 	.word	0x40005400
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40010c00 	.word	0x40010c00

08002a90 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0310 	add.w	r3, r7, #16
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <HAL_TIM_IC_MspInit+0x84>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d12c      	bne.n	8002b0a <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_TIM_IC_MspInit+0x88>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_TIM_IC_MspInit+0x88>)
 8002ab6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_TIM_IC_MspInit+0x88>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_TIM_IC_MspInit+0x88>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <HAL_TIM_IC_MspInit+0x88>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_TIM_IC_MspInit+0x88>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002ae0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002ae4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aee:	f107 0310 	add.w	r3, r7, #16
 8002af2:	4619      	mov	r1, r3
 8002af4:	4809      	ldr	r0, [pc, #36]	; (8002b1c <HAL_TIM_IC_MspInit+0x8c>)
 8002af6:	f000 fbed 	bl	80032d4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2100      	movs	r1, #0
 8002afe:	201b      	movs	r0, #27
 8002b00:	f000 faff 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002b04:	201b      	movs	r0, #27
 8002b06:	f000 fb18 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b0a:	bf00      	nop
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40010800 	.word	0x40010800

08002b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b30:	d113      	bne.n	8002b5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_TIM_Base_MspInit+0x44>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <HAL_TIM_Base_MspInit+0x44>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	61d3      	str	r3, [r2, #28]
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_TIM_Base_MspInit+0x44>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	201c      	movs	r0, #28
 8002b50:	f000 fad7 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b54:	201c      	movs	r0, #28
 8002b56:	f000 faf0 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	; 0x30
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0320 	add.w	r3, r7, #32
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a57      	ldr	r2, [pc, #348]	; (8002ce0 <HAL_UART_MspInit+0x178>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d13a      	bne.n	8002bfe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b88:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	4a55      	ldr	r2, [pc, #340]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b92:	6193      	str	r3, [r2, #24]
 8002b94:	4b53      	ldr	r3, [pc, #332]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba0:	4b50      	ldr	r3, [pc, #320]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4a4f      	ldr	r2, [pc, #316]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	6193      	str	r3, [r2, #24]
 8002bac:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc6:	f107 0320 	add.w	r3, r7, #32
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4846      	ldr	r0, [pc, #280]	; (8002ce8 <HAL_UART_MspInit+0x180>)
 8002bce:	f000 fb81 	bl	80032d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be0:	f107 0320 	add.w	r3, r7, #32
 8002be4:	4619      	mov	r1, r3
 8002be6:	4840      	ldr	r0, [pc, #256]	; (8002ce8 <HAL_UART_MspInit+0x180>)
 8002be8:	f000 fb74 	bl	80032d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2025      	movs	r0, #37	; 0x25
 8002bf2:	f000 fa86 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bf6:	2025      	movs	r0, #37	; 0x25
 8002bf8:	f000 fa9f 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bfc:	e06c      	b.n	8002cd8 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <HAL_UART_MspInit+0x184>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d130      	bne.n	8002c6a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c08:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	4a35      	ldr	r2, [pc, #212]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c12:	61d3      	str	r3, [r2, #28]
 8002c14:	4b33      	ldr	r3, [pc, #204]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	4a2f      	ldr	r2, [pc, #188]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002c26:	f043 0304 	orr.w	r3, r3, #4
 8002c2a:	6193      	str	r3, [r2, #24]
 8002c2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c38:	2304      	movs	r3, #4
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c40:	2303      	movs	r3, #3
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c44:	f107 0320 	add.w	r3, r7, #32
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4827      	ldr	r0, [pc, #156]	; (8002ce8 <HAL_UART_MspInit+0x180>)
 8002c4c:	f000 fb42 	bl	80032d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c50:	2308      	movs	r3, #8
 8002c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c54:	2300      	movs	r3, #0
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5c:	f107 0320 	add.w	r3, r7, #32
 8002c60:	4619      	mov	r1, r3
 8002c62:	4821      	ldr	r0, [pc, #132]	; (8002ce8 <HAL_UART_MspInit+0x180>)
 8002c64:	f000 fb36 	bl	80032d4 <HAL_GPIO_Init>
}
 8002c68:	e036      	b.n	8002cd8 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a20      	ldr	r2, [pc, #128]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d131      	bne.n	8002cd8 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c74:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	4a1a      	ldr	r2, [pc, #104]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7e:	61d3      	str	r3, [r2, #28]
 8002c80:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8c:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002c92:	f043 0308 	orr.w	r3, r3, #8
 8002c96:	6193      	str	r3, [r2, #24]
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <HAL_UART_MspInit+0x17c>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb2:	f107 0320 	add.w	r3, r7, #32
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	480e      	ldr	r0, [pc, #56]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002cba:	f000 fb0b 	bl	80032d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002cbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ccc:	f107 0320 	add.w	r3, r7, #32
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4808      	ldr	r0, [pc, #32]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002cd4:	f000 fafe 	bl	80032d4 <HAL_GPIO_Init>
}
 8002cd8:	bf00      	nop
 8002cda:	3730      	adds	r7, #48	; 0x30
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40013800 	.word	0x40013800
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010800 	.word	0x40010800
 8002cec:	40004400 	.word	0x40004400
 8002cf0:	40004800 	.word	0x40004800
 8002cf4:	40010c00 	.word	0x40010c00

08002cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <NMI_Handler+0x4>

08002cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d02:	e7fe      	b.n	8002d02 <HardFault_Handler+0x4>

08002d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <MemManage_Handler+0x4>

08002d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0e:	e7fe      	b.n	8002d0e <BusFault_Handler+0x4>

08002d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <UsageFault_Handler+0x4>

08002d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d3e:	f000 f8c9 	bl	8002ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <TIM1_CC_IRQHandler+0x10>)
 8002d4e:	f001 ff37 	bl	8004bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200000e4 	.word	0x200000e4

08002d5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d60:	4802      	ldr	r0, [pc, #8]	; (8002d6c <TIM2_IRQHandler+0x10>)
 8002d62:	f001 ff2d 	bl	8004bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	2000012c 	.word	0x2000012c

08002d70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d74:	4802      	ldr	r0, [pc, #8]	; (8002d80 <USART1_IRQHandler+0x10>)
 8002d76:	f002 fd81 	bl	800587c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000174 	.word	0x20000174

08002d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <_sbrk+0x5c>)
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <_sbrk+0x60>)
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <_sbrk+0x64>)
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <_sbrk+0x68>)
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d207      	bcs.n	8002dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db4:	f003 fbe6 	bl	8006584 <__errno>
 8002db8:	4603      	mov	r3, r0
 8002dba:	220c      	movs	r2, #12
 8002dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	e009      	b.n	8002dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <_sbrk+0x64>)
 8002dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20005000 	.word	0x20005000
 8002de4:	00000400 	.word	0x00000400
 8002de8:	200002fc 	.word	0x200002fc
 8002dec:	20000450 	.word	0x20000450

08002df0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <Reset_Handler>:
 8002dfc:	f7ff fff8 	bl	8002df0 <SystemInit>
 8002e00:	480b      	ldr	r0, [pc, #44]	; (8002e30 <LoopFillZerobss+0xe>)
 8002e02:	490c      	ldr	r1, [pc, #48]	; (8002e34 <LoopFillZerobss+0x12>)
 8002e04:	4a0c      	ldr	r2, [pc, #48]	; (8002e38 <LoopFillZerobss+0x16>)
 8002e06:	2300      	movs	r3, #0
 8002e08:	e002      	b.n	8002e10 <LoopCopyDataInit>

08002e0a <CopyDataInit>:
 8002e0a:	58d4      	ldr	r4, [r2, r3]
 8002e0c:	50c4      	str	r4, [r0, r3]
 8002e0e:	3304      	adds	r3, #4

08002e10 <LoopCopyDataInit>:
 8002e10:	18c4      	adds	r4, r0, r3
 8002e12:	428c      	cmp	r4, r1
 8002e14:	d3f9      	bcc.n	8002e0a <CopyDataInit>
 8002e16:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <LoopFillZerobss+0x1a>)
 8002e18:	4c09      	ldr	r4, [pc, #36]	; (8002e40 <LoopFillZerobss+0x1e>)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e001      	b.n	8002e22 <LoopFillZerobss>

08002e1e <FillZerobss>:
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	3204      	adds	r2, #4

08002e22 <LoopFillZerobss>:
 8002e22:	42a2      	cmp	r2, r4
 8002e24:	d3fb      	bcc.n	8002e1e <FillZerobss>
 8002e26:	f003 fbb3 	bl	8006590 <__libc_init_array>
 8002e2a:	f7fd fd89 	bl	8000940 <main>
 8002e2e:	4770      	bx	lr
 8002e30:	20000000 	.word	0x20000000
 8002e34:	20000074 	.word	0x20000074
 8002e38:	08006f30 	.word	0x08006f30
 8002e3c:	20000074 	.word	0x20000074
 8002e40:	2000044c 	.word	0x2000044c

08002e44 <ADC1_2_IRQHandler>:
 8002e44:	e7fe      	b.n	8002e44 <ADC1_2_IRQHandler>
	...

08002e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <HAL_Init+0x28>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <HAL_Init+0x28>)
 8002e52:	f043 0310 	orr.w	r3, r3, #16
 8002e56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e58:	2003      	movs	r0, #3
 8002e5a:	f000 f947 	bl	80030ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e5e:	200f      	movs	r0, #15
 8002e60:	f000 f808 	bl	8002e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e64:	f7ff fda4 	bl	80029b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40022000 	.word	0x40022000

08002e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_InitTick+0x54>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_InitTick+0x58>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f95f 	bl	8003156 <HAL_SYSTICK_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00e      	b.n	8002ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b0f      	cmp	r3, #15
 8002ea6:	d80a      	bhi.n	8002ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb0:	f000 f927 	bl	8003102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb4:	4a06      	ldr	r2, [pc, #24]	; (8002ed0 <HAL_InitTick+0x5c>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000018 	.word	0x20000018
 8002ecc:	20000020 	.word	0x20000020
 8002ed0:	2000001c 	.word	0x2000001c

08002ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_IncTick+0x1c>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_IncTick+0x20>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	4a03      	ldr	r2, [pc, #12]	; (8002ef4 <HAL_IncTick+0x20>)
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	20000020 	.word	0x20000020
 8002ef4:	20000300 	.word	0x20000300

08002ef8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return uwTick;
 8002efc:	4b02      	ldr	r3, [pc, #8]	; (8002f08 <HAL_GetTick+0x10>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	20000300 	.word	0x20000300

08002f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff fff0 	bl	8002ef8 <HAL_GetTick>
 8002f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d005      	beq.n	8002f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_Delay+0x44>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4413      	add	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f32:	bf00      	nop
 8002f34:	f7ff ffe0 	bl	8002ef8 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d8f7      	bhi.n	8002f34 <HAL_Delay+0x28>
  {
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000020 	.word	0x20000020

08002f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f70:	4013      	ands	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f86:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	60d3      	str	r3, [r2, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	f003 0307 	and.w	r3, r3, #7
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db0b      	blt.n	8002fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4906      	ldr	r1, [pc, #24]	; (8002fec <__NVIC_EnableIRQ+0x34>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2001      	movs	r0, #1
 8002fda:	fa00 f202 	lsl.w	r2, r0, r2
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	e000e100 	.word	0xe000e100

08002ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	2b00      	cmp	r3, #0
 8003002:	db0a      	blt.n	800301a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	490c      	ldr	r1, [pc, #48]	; (800303c <__NVIC_SetPriority+0x4c>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	440b      	add	r3, r1
 8003014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003018:	e00a      	b.n	8003030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4908      	ldr	r1, [pc, #32]	; (8003040 <__NVIC_SetPriority+0x50>)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	3b04      	subs	r3, #4
 8003028:	0112      	lsls	r2, r2, #4
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	440b      	add	r3, r1
 800302e:	761a      	strb	r2, [r3, #24]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000e100 	.word	0xe000e100
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003044:	b480      	push	{r7}
 8003046:	b089      	sub	sp, #36	; 0x24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f1c3 0307 	rsb	r3, r3, #7
 800305e:	2b04      	cmp	r3, #4
 8003060:	bf28      	it	cs
 8003062:	2304      	movcs	r3, #4
 8003064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3304      	adds	r3, #4
 800306a:	2b06      	cmp	r3, #6
 800306c:	d902      	bls.n	8003074 <NVIC_EncodePriority+0x30>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3b03      	subs	r3, #3
 8003072:	e000      	b.n	8003076 <NVIC_EncodePriority+0x32>
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003078:	f04f 32ff 	mov.w	r2, #4294967295
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43da      	mvns	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	401a      	ands	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800308c:	f04f 31ff 	mov.w	r1, #4294967295
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	43d9      	mvns	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	4313      	orrs	r3, r2
         );
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3724      	adds	r7, #36	; 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b8:	d301      	bcc.n	80030be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00f      	b.n	80030de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030be:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <SysTick_Config+0x40>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c6:	210f      	movs	r1, #15
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	f7ff ff90 	bl	8002ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <SysTick_Config+0x40>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <SysTick_Config+0x40>)
 80030d8:	2207      	movs	r2, #7
 80030da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	e000e010 	.word	0xe000e010

080030ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff2d 	bl	8002f54 <__NVIC_SetPriorityGrouping>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003114:	f7ff ff42 	bl	8002f9c <__NVIC_GetPriorityGrouping>
 8003118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	6978      	ldr	r0, [r7, #20]
 8003120:	f7ff ff90 	bl	8003044 <NVIC_EncodePriority>
 8003124:	4602      	mov	r2, r0
 8003126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff5f 	bl	8002ff0 <__NVIC_SetPriority>
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff35 	bl	8002fb8 <__NVIC_EnableIRQ>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ffa2 	bl	80030a8 <SysTick_Config>
 8003164:	4603      	mov	r3, r0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d008      	beq.n	8003198 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2204      	movs	r2, #4
 800318a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e020      	b.n	80031da <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 020e 	bic.w	r2, r2, #14
 80031a6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	2101      	movs	r1, #1
 80031c2:	fa01 f202 	lsl.w	r2, r1, r2
 80031c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d005      	beq.n	8003208 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2204      	movs	r2, #4
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	e051      	b.n	80032ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 020e 	bic.w	r2, r2, #14
 8003216:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <HAL_DMA_Abort_IT+0xd4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d029      	beq.n	8003286 <HAL_DMA_Abort_IT+0xa2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a21      	ldr	r2, [pc, #132]	; (80032bc <HAL_DMA_Abort_IT+0xd8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d022      	beq.n	8003282 <HAL_DMA_Abort_IT+0x9e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1f      	ldr	r2, [pc, #124]	; (80032c0 <HAL_DMA_Abort_IT+0xdc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d01a      	beq.n	800327c <HAL_DMA_Abort_IT+0x98>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <HAL_DMA_Abort_IT+0xe0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d012      	beq.n	8003276 <HAL_DMA_Abort_IT+0x92>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_DMA_Abort_IT+0xe4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00a      	beq.n	8003270 <HAL_DMA_Abort_IT+0x8c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1b      	ldr	r2, [pc, #108]	; (80032cc <HAL_DMA_Abort_IT+0xe8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d102      	bne.n	800326a <HAL_DMA_Abort_IT+0x86>
 8003264:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003268:	e00e      	b.n	8003288 <HAL_DMA_Abort_IT+0xa4>
 800326a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800326e:	e00b      	b.n	8003288 <HAL_DMA_Abort_IT+0xa4>
 8003270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003274:	e008      	b.n	8003288 <HAL_DMA_Abort_IT+0xa4>
 8003276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327a:	e005      	b.n	8003288 <HAL_DMA_Abort_IT+0xa4>
 800327c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003280:	e002      	b.n	8003288 <HAL_DMA_Abort_IT+0xa4>
 8003282:	2310      	movs	r3, #16
 8003284:	e000      	b.n	8003288 <HAL_DMA_Abort_IT+0xa4>
 8003286:	2301      	movs	r3, #1
 8003288:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <HAL_DMA_Abort_IT+0xec>)
 800328a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
    } 
  }
  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40020008 	.word	0x40020008
 80032bc:	4002001c 	.word	0x4002001c
 80032c0:	40020030 	.word	0x40020030
 80032c4:	40020044 	.word	0x40020044
 80032c8:	40020058 	.word	0x40020058
 80032cc:	4002006c 	.word	0x4002006c
 80032d0:	40020000 	.word	0x40020000

080032d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b08b      	sub	sp, #44	; 0x2c
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032e2:	2300      	movs	r3, #0
 80032e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e6:	e169      	b.n	80035bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032e8:	2201      	movs	r2, #1
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	429a      	cmp	r2, r3
 8003302:	f040 8158 	bne.w	80035b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a9a      	ldr	r2, [pc, #616]	; (8003574 <HAL_GPIO_Init+0x2a0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d05e      	beq.n	80033ce <HAL_GPIO_Init+0xfa>
 8003310:	4a98      	ldr	r2, [pc, #608]	; (8003574 <HAL_GPIO_Init+0x2a0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d875      	bhi.n	8003402 <HAL_GPIO_Init+0x12e>
 8003316:	4a98      	ldr	r2, [pc, #608]	; (8003578 <HAL_GPIO_Init+0x2a4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d058      	beq.n	80033ce <HAL_GPIO_Init+0xfa>
 800331c:	4a96      	ldr	r2, [pc, #600]	; (8003578 <HAL_GPIO_Init+0x2a4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d86f      	bhi.n	8003402 <HAL_GPIO_Init+0x12e>
 8003322:	4a96      	ldr	r2, [pc, #600]	; (800357c <HAL_GPIO_Init+0x2a8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d052      	beq.n	80033ce <HAL_GPIO_Init+0xfa>
 8003328:	4a94      	ldr	r2, [pc, #592]	; (800357c <HAL_GPIO_Init+0x2a8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d869      	bhi.n	8003402 <HAL_GPIO_Init+0x12e>
 800332e:	4a94      	ldr	r2, [pc, #592]	; (8003580 <HAL_GPIO_Init+0x2ac>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d04c      	beq.n	80033ce <HAL_GPIO_Init+0xfa>
 8003334:	4a92      	ldr	r2, [pc, #584]	; (8003580 <HAL_GPIO_Init+0x2ac>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d863      	bhi.n	8003402 <HAL_GPIO_Init+0x12e>
 800333a:	4a92      	ldr	r2, [pc, #584]	; (8003584 <HAL_GPIO_Init+0x2b0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d046      	beq.n	80033ce <HAL_GPIO_Init+0xfa>
 8003340:	4a90      	ldr	r2, [pc, #576]	; (8003584 <HAL_GPIO_Init+0x2b0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d85d      	bhi.n	8003402 <HAL_GPIO_Init+0x12e>
 8003346:	2b12      	cmp	r3, #18
 8003348:	d82a      	bhi.n	80033a0 <HAL_GPIO_Init+0xcc>
 800334a:	2b12      	cmp	r3, #18
 800334c:	d859      	bhi.n	8003402 <HAL_GPIO_Init+0x12e>
 800334e:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <HAL_GPIO_Init+0x80>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	080033cf 	.word	0x080033cf
 8003358:	080033a9 	.word	0x080033a9
 800335c:	080033bb 	.word	0x080033bb
 8003360:	080033fd 	.word	0x080033fd
 8003364:	08003403 	.word	0x08003403
 8003368:	08003403 	.word	0x08003403
 800336c:	08003403 	.word	0x08003403
 8003370:	08003403 	.word	0x08003403
 8003374:	08003403 	.word	0x08003403
 8003378:	08003403 	.word	0x08003403
 800337c:	08003403 	.word	0x08003403
 8003380:	08003403 	.word	0x08003403
 8003384:	08003403 	.word	0x08003403
 8003388:	08003403 	.word	0x08003403
 800338c:	08003403 	.word	0x08003403
 8003390:	08003403 	.word	0x08003403
 8003394:	08003403 	.word	0x08003403
 8003398:	080033b1 	.word	0x080033b1
 800339c:	080033c5 	.word	0x080033c5
 80033a0:	4a79      	ldr	r2, [pc, #484]	; (8003588 <HAL_GPIO_Init+0x2b4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033a6:	e02c      	b.n	8003402 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	623b      	str	r3, [r7, #32]
          break;
 80033ae:	e029      	b.n	8003404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	3304      	adds	r3, #4
 80033b6:	623b      	str	r3, [r7, #32]
          break;
 80033b8:	e024      	b.n	8003404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	3308      	adds	r3, #8
 80033c0:	623b      	str	r3, [r7, #32]
          break;
 80033c2:	e01f      	b.n	8003404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	330c      	adds	r3, #12
 80033ca:	623b      	str	r3, [r7, #32]
          break;
 80033cc:	e01a      	b.n	8003404 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033d6:	2304      	movs	r3, #4
 80033d8:	623b      	str	r3, [r7, #32]
          break;
 80033da:	e013      	b.n	8003404 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033e4:	2308      	movs	r3, #8
 80033e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	611a      	str	r2, [r3, #16]
          break;
 80033ee:	e009      	b.n	8003404 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033f0:	2308      	movs	r3, #8
 80033f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	615a      	str	r2, [r3, #20]
          break;
 80033fa:	e003      	b.n	8003404 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033fc:	2300      	movs	r3, #0
 80033fe:	623b      	str	r3, [r7, #32]
          break;
 8003400:	e000      	b.n	8003404 <HAL_GPIO_Init+0x130>
          break;
 8003402:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2bff      	cmp	r3, #255	; 0xff
 8003408:	d801      	bhi.n	800340e <HAL_GPIO_Init+0x13a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	e001      	b.n	8003412 <HAL_GPIO_Init+0x13e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3304      	adds	r3, #4
 8003412:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2bff      	cmp	r3, #255	; 0xff
 8003418:	d802      	bhi.n	8003420 <HAL_GPIO_Init+0x14c>
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	e002      	b.n	8003426 <HAL_GPIO_Init+0x152>
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	3b08      	subs	r3, #8
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	210f      	movs	r1, #15
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	401a      	ands	r2, r3
 8003438:	6a39      	ldr	r1, [r7, #32]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	fa01 f303 	lsl.w	r3, r1, r3
 8003440:	431a      	orrs	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80b1 	beq.w	80035b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003454:	4b4d      	ldr	r3, [pc, #308]	; (800358c <HAL_GPIO_Init+0x2b8>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	4a4c      	ldr	r2, [pc, #304]	; (800358c <HAL_GPIO_Init+0x2b8>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6193      	str	r3, [r2, #24]
 8003460:	4b4a      	ldr	r3, [pc, #296]	; (800358c <HAL_GPIO_Init+0x2b8>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800346c:	4a48      	ldr	r2, [pc, #288]	; (8003590 <HAL_GPIO_Init+0x2bc>)
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	089b      	lsrs	r3, r3, #2
 8003472:	3302      	adds	r3, #2
 8003474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003478:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	220f      	movs	r2, #15
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4013      	ands	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a40      	ldr	r2, [pc, #256]	; (8003594 <HAL_GPIO_Init+0x2c0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d013      	beq.n	80034c0 <HAL_GPIO_Init+0x1ec>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a3f      	ldr	r2, [pc, #252]	; (8003598 <HAL_GPIO_Init+0x2c4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00d      	beq.n	80034bc <HAL_GPIO_Init+0x1e8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a3e      	ldr	r2, [pc, #248]	; (800359c <HAL_GPIO_Init+0x2c8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d007      	beq.n	80034b8 <HAL_GPIO_Init+0x1e4>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a3d      	ldr	r2, [pc, #244]	; (80035a0 <HAL_GPIO_Init+0x2cc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d101      	bne.n	80034b4 <HAL_GPIO_Init+0x1e0>
 80034b0:	2303      	movs	r3, #3
 80034b2:	e006      	b.n	80034c2 <HAL_GPIO_Init+0x1ee>
 80034b4:	2304      	movs	r3, #4
 80034b6:	e004      	b.n	80034c2 <HAL_GPIO_Init+0x1ee>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e002      	b.n	80034c2 <HAL_GPIO_Init+0x1ee>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_GPIO_Init+0x1ee>
 80034c0:	2300      	movs	r3, #0
 80034c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c4:	f002 0203 	and.w	r2, r2, #3
 80034c8:	0092      	lsls	r2, r2, #2
 80034ca:	4093      	lsls	r3, r2
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034d2:	492f      	ldr	r1, [pc, #188]	; (8003590 <HAL_GPIO_Init+0x2bc>)
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3302      	adds	r3, #2
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d006      	beq.n	80034fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034ec:	4b2d      	ldr	r3, [pc, #180]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	492c      	ldr	r1, [pc, #176]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]
 80034f8:	e006      	b.n	8003508 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034fa:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	43db      	mvns	r3, r3
 8003502:	4928      	ldr	r1, [pc, #160]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 8003504:	4013      	ands	r3, r2
 8003506:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d006      	beq.n	8003522 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003514:	4b23      	ldr	r3, [pc, #140]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	4922      	ldr	r1, [pc, #136]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	60cb      	str	r3, [r1, #12]
 8003520:	e006      	b.n	8003530 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	43db      	mvns	r3, r3
 800352a:	491e      	ldr	r1, [pc, #120]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 800352c:	4013      	ands	r3, r2
 800352e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d006      	beq.n	800354a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800353c:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	4918      	ldr	r1, [pc, #96]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
 8003548:	e006      	b.n	8003558 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800354a:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	43db      	mvns	r3, r3
 8003552:	4914      	ldr	r1, [pc, #80]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 8003554:	4013      	ands	r3, r2
 8003556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d021      	beq.n	80035a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	490e      	ldr	r1, [pc, #56]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	4313      	orrs	r3, r2
 800356e:	600b      	str	r3, [r1, #0]
 8003570:	e021      	b.n	80035b6 <HAL_GPIO_Init+0x2e2>
 8003572:	bf00      	nop
 8003574:	10320000 	.word	0x10320000
 8003578:	10310000 	.word	0x10310000
 800357c:	10220000 	.word	0x10220000
 8003580:	10210000 	.word	0x10210000
 8003584:	10120000 	.word	0x10120000
 8003588:	10110000 	.word	0x10110000
 800358c:	40021000 	.word	0x40021000
 8003590:	40010000 	.word	0x40010000
 8003594:	40010800 	.word	0x40010800
 8003598:	40010c00 	.word	0x40010c00
 800359c:	40011000 	.word	0x40011000
 80035a0:	40011400 	.word	0x40011400
 80035a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_GPIO_Init+0x304>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	4909      	ldr	r1, [pc, #36]	; (80035d8 <HAL_GPIO_Init+0x304>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	3301      	adds	r3, #1
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f47f ae8e 	bne.w	80032e8 <HAL_GPIO_Init+0x14>
  }
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	372c      	adds	r7, #44	; 0x2c
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	40010400 	.word	0x40010400

080035dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	887b      	ldrh	r3, [r7, #2]
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
 80035f8:	e001      	b.n	80035fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	807b      	strh	r3, [r7, #2]
 8003616:	4613      	mov	r3, r2
 8003618:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800361a:	787b      	ldrb	r3, [r7, #1]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003620:	887a      	ldrh	r2, [r7, #2]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003626:	e003      	b.n	8003630 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003628:	887b      	ldrh	r3, [r7, #2]
 800362a:	041a      	lsls	r2, r3, #16
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	611a      	str	r2, [r3, #16]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr

0800363a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800363a:	b480      	push	{r7}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800364c:	887a      	ldrh	r2, [r7, #2]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4013      	ands	r3, r2
 8003652:	041a      	lsls	r2, r3, #16
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	43d9      	mvns	r1, r3
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	400b      	ands	r3, r1
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	611a      	str	r2, [r3, #16]
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e12b      	b.n	80038d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff f9be 	bl	8002a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	; 0x24
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d0:	f001 f832 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 80036d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4a81      	ldr	r2, [pc, #516]	; (80038e0 <HAL_I2C_Init+0x274>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d807      	bhi.n	80036f0 <HAL_I2C_Init+0x84>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a80      	ldr	r2, [pc, #512]	; (80038e4 <HAL_I2C_Init+0x278>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	bf94      	ite	ls
 80036e8:	2301      	movls	r3, #1
 80036ea:	2300      	movhi	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e006      	b.n	80036fe <HAL_I2C_Init+0x92>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a7d      	ldr	r2, [pc, #500]	; (80038e8 <HAL_I2C_Init+0x27c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bf94      	ite	ls
 80036f8:	2301      	movls	r3, #1
 80036fa:	2300      	movhi	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0e7      	b.n	80038d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a78      	ldr	r2, [pc, #480]	; (80038ec <HAL_I2C_Init+0x280>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	0c9b      	lsrs	r3, r3, #18
 8003710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a6a      	ldr	r2, [pc, #424]	; (80038e0 <HAL_I2C_Init+0x274>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d802      	bhi.n	8003740 <HAL_I2C_Init+0xd4>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3301      	adds	r3, #1
 800373e:	e009      	b.n	8003754 <HAL_I2C_Init+0xe8>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	4a69      	ldr	r2, [pc, #420]	; (80038f0 <HAL_I2C_Init+0x284>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	3301      	adds	r3, #1
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	495c      	ldr	r1, [pc, #368]	; (80038e0 <HAL_I2C_Init+0x274>)
 8003770:	428b      	cmp	r3, r1
 8003772:	d819      	bhi.n	80037a8 <HAL_I2C_Init+0x13c>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e59      	subs	r1, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003782:	1c59      	adds	r1, r3, #1
 8003784:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003788:	400b      	ands	r3, r1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_I2C_Init+0x138>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e59      	subs	r1, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fbb1 f3f3 	udiv	r3, r1, r3
 800379c:	3301      	adds	r3, #1
 800379e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a2:	e051      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 80037a4:	2304      	movs	r3, #4
 80037a6:	e04f      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d111      	bne.n	80037d4 <HAL_I2C_Init+0x168>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1e58      	subs	r0, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	440b      	add	r3, r1
 80037be:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e012      	b.n	80037fa <HAL_I2C_Init+0x18e>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e58      	subs	r0, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	0099      	lsls	r1, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Init+0x196>
 80037fe:	2301      	movs	r3, #1
 8003800:	e022      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10e      	bne.n	8003828 <HAL_I2C_Init+0x1bc>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1e58      	subs	r0, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	440b      	add	r3, r1
 8003818:	fbb0 f3f3 	udiv	r3, r0, r3
 800381c:	3301      	adds	r3, #1
 800381e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003826:	e00f      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e58      	subs	r0, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	0099      	lsls	r1, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	6809      	ldr	r1, [r1, #0]
 800384c:	4313      	orrs	r3, r2
 800384e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6911      	ldr	r1, [r2, #16]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	4311      	orrs	r1, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	430b      	orrs	r3, r1
 800388a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	000186a0 	.word	0x000186a0
 80038e4:	001e847f 	.word	0x001e847f
 80038e8:	003d08ff 	.word	0x003d08ff
 80038ec:	431bde83 	.word	0x431bde83
 80038f0:	10624dd3 	.word	0x10624dd3

080038f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	461a      	mov	r2, r3
 8003900:	460b      	mov	r3, r1
 8003902:	817b      	strh	r3, [r7, #10]
 8003904:	4613      	mov	r3, r2
 8003906:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003908:	f7ff faf6 	bl	8002ef8 <HAL_GetTick>
 800390c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b20      	cmp	r3, #32
 8003918:	f040 80e0 	bne.w	8003adc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	2319      	movs	r3, #25
 8003922:	2201      	movs	r2, #1
 8003924:	4970      	ldr	r1, [pc, #448]	; (8003ae8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f964 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
 8003934:	e0d3      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_I2C_Master_Transmit+0x50>
 8003940:	2302      	movs	r3, #2
 8003942:	e0cc      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	d007      	beq.n	800396a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0201 	orr.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003978:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2221      	movs	r2, #33	; 0x21
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2210      	movs	r2, #16
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	893a      	ldrh	r2, [r7, #8]
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4a50      	ldr	r2, [pc, #320]	; (8003aec <HAL_I2C_Master_Transmit+0x1f8>)
 80039aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039ac:	8979      	ldrh	r1, [r7, #10]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f89c 	bl	8003af0 <I2C_MasterRequestWrite>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e08d      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039d8:	e066      	b.n	8003aa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	6a39      	ldr	r1, [r7, #32]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fa22 	bl	8003e28 <I2C_WaitOnTXEFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d107      	bne.n	8003a02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e06b      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d11b      	bne.n	8003a7c <HAL_I2C_Master_Transmit+0x188>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d017      	beq.n	8003a7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	6a39      	ldr	r1, [r7, #32]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fa19 	bl	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d107      	bne.n	8003aa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e01a      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d194      	bne.n	80039da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	00100002 	.word	0x00100002
 8003aec:	ffff0000 	.word	0xffff0000

08003af0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	460b      	mov	r3, r1
 8003afe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d006      	beq.n	8003b1a <I2C_MasterRequestWrite+0x2a>
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d003      	beq.n	8003b1a <I2C_MasterRequestWrite+0x2a>
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b18:	d108      	bne.n	8003b2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e00b      	b.n	8003b44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	2b12      	cmp	r3, #18
 8003b32:	d107      	bne.n	8003b44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f84f 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6a:	d103      	bne.n	8003b74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e035      	b.n	8003be4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b80:	d108      	bne.n	8003b94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b82:	897b      	ldrh	r3, [r7, #10]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b90:	611a      	str	r2, [r3, #16]
 8003b92:	e01b      	b.n	8003bcc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b94:	897b      	ldrh	r3, [r7, #10]
 8003b96:	11db      	asrs	r3, r3, #7
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 0306 	and.w	r3, r3, #6
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f063 030f 	orn	r3, r3, #15
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	490e      	ldr	r1, [pc, #56]	; (8003bec <I2C_MasterRequestWrite+0xfc>)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f898 	bl	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e010      	b.n	8003be4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bc2:	897b      	ldrh	r3, [r7, #10]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4907      	ldr	r1, [pc, #28]	; (8003bf0 <I2C_MasterRequestWrite+0x100>)
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f888 	bl	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	00010008 	.word	0x00010008
 8003bf0:	00010002 	.word	0x00010002

08003bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c04:	e048      	b.n	8003c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d044      	beq.n	8003c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0e:	f7ff f973 	bl	8002ef8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d302      	bcc.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d139      	bne.n	8003c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	0c1b      	lsrs	r3, r3, #16
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d10d      	bne.n	8003c4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	43da      	mvns	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	e00c      	b.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	43da      	mvns	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	4013      	ands	r3, r2
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d116      	bne.n	8003c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e023      	b.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	0c1b      	lsrs	r3, r3, #16
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d10d      	bne.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	e00c      	b.n	8003cd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	43da      	mvns	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf0c      	ite	eq
 8003cd0:	2301      	moveq	r3, #1
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d093      	beq.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cf6:	e071      	b.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d06:	d123      	bne.n	8003d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e067      	b.n	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d56:	d041      	beq.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d58:	f7ff f8ce 	bl	8002ef8 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d302      	bcc.n	8003d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d136      	bne.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d10c      	bne.n	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4013      	ands	r3, r2
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bf14      	ite	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	2300      	moveq	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	e00b      	b.n	8003daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	43da      	mvns	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf14      	ite	ne
 8003da4:	2301      	movne	r3, #1
 8003da6:	2300      	moveq	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e021      	b.n	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	0c1b      	lsrs	r3, r3, #16
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d10c      	bne.n	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	43da      	mvns	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e00b      	b.n	8003e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	43da      	mvns	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bf14      	ite	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	2300      	moveq	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f47f af6d 	bne.w	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e34:	e034      	b.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f886 	bl	8003f48 <I2C_IsAcknowledgeFailed>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e034      	b.n	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d028      	beq.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7ff f853 	bl	8002ef8 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d11d      	bne.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b80      	cmp	r3, #128	; 0x80
 8003e70:	d016      	beq.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e007      	b.n	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b80      	cmp	r3, #128	; 0x80
 8003eac:	d1c3      	bne.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ec4:	e034      	b.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f83e 	bl	8003f48 <I2C_IsAcknowledgeFailed>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e034      	b.n	8003f40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d028      	beq.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ede:	f7ff f80b 	bl	8002ef8 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d302      	bcc.n	8003ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d11d      	bne.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d016      	beq.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f043 0220 	orr.w	r2, r3, #32
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e007      	b.n	8003f40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d1c3      	bne.n	8003ec6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5e:	d11b      	bne.n	8003f98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f043 0204 	orr.w	r2, r3, #4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e272      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 8087 	beq.w	80040d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fc4:	4b92      	ldr	r3, [pc, #584]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d00c      	beq.n	8003fea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fd0:	4b8f      	ldr	r3, [pc, #572]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 030c 	and.w	r3, r3, #12
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d112      	bne.n	8004002 <HAL_RCC_OscConfig+0x5e>
 8003fdc:	4b8c      	ldr	r3, [pc, #560]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe8:	d10b      	bne.n	8004002 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fea:	4b89      	ldr	r3, [pc, #548]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d06c      	beq.n	80040d0 <HAL_RCC_OscConfig+0x12c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d168      	bne.n	80040d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e24c      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400a:	d106      	bne.n	800401a <HAL_RCC_OscConfig+0x76>
 800400c:	4b80      	ldr	r3, [pc, #512]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a7f      	ldr	r2, [pc, #508]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	e02e      	b.n	8004078 <HAL_RCC_OscConfig+0xd4>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0x98>
 8004022:	4b7b      	ldr	r3, [pc, #492]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a7a      	ldr	r2, [pc, #488]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b78      	ldr	r3, [pc, #480]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a77      	ldr	r2, [pc, #476]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e01d      	b.n	8004078 <HAL_RCC_OscConfig+0xd4>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0xbc>
 8004046:	4b72      	ldr	r3, [pc, #456]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a71      	ldr	r2, [pc, #452]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800404c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a6e      	ldr	r2, [pc, #440]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e00b      	b.n	8004078 <HAL_RCC_OscConfig+0xd4>
 8004060:	4b6b      	ldr	r3, [pc, #428]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a6a      	ldr	r2, [pc, #424]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b68      	ldr	r3, [pc, #416]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a67      	ldr	r2, [pc, #412]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004076:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d013      	beq.n	80040a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fe ff3a 	bl	8002ef8 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004088:	f7fe ff36 	bl	8002ef8 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e200      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409a:	4b5d      	ldr	r3, [pc, #372]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0xe4>
 80040a6:	e014      	b.n	80040d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fe ff26 	bl	8002ef8 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fe ff22 	bl	8002ef8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e1ec      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c2:	4b53      	ldr	r3, [pc, #332]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x10c>
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d063      	beq.n	80041a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040de:	4b4c      	ldr	r3, [pc, #304]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040ea:	4b49      	ldr	r3, [pc, #292]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d11c      	bne.n	8004130 <HAL_RCC_OscConfig+0x18c>
 80040f6:	4b46      	ldr	r3, [pc, #280]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d116      	bne.n	8004130 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004102:	4b43      	ldr	r3, [pc, #268]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_RCC_OscConfig+0x176>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e1c0      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411a:	4b3d      	ldr	r3, [pc, #244]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4939      	ldr	r1, [pc, #228]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412e:	e03a      	b.n	80041a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d020      	beq.n	800417a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004138:	4b36      	ldr	r3, [pc, #216]	; (8004214 <HAL_RCC_OscConfig+0x270>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413e:	f7fe fedb 	bl	8002ef8 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004146:	f7fe fed7 	bl	8002ef8 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1a1      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004158:	4b2d      	ldr	r3, [pc, #180]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004164:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4927      	ldr	r1, [pc, #156]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]
 8004178:	e015      	b.n	80041a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417a:	4b26      	ldr	r3, [pc, #152]	; (8004214 <HAL_RCC_OscConfig+0x270>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe feba 	bl	8002ef8 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004188:	f7fe feb6 	bl	8002ef8 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e180      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d03a      	beq.n	8004228 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d019      	beq.n	80041ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ba:	4b17      	ldr	r3, [pc, #92]	; (8004218 <HAL_RCC_OscConfig+0x274>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c0:	f7fe fe9a 	bl	8002ef8 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c8:	f7fe fe96 	bl	8002ef8 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e160      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041e6:	2001      	movs	r0, #1
 80041e8:	f000 face 	bl	8004788 <RCC_Delay>
 80041ec:	e01c      	b.n	8004228 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_RCC_OscConfig+0x274>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f4:	f7fe fe80 	bl	8002ef8 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041fa:	e00f      	b.n	800421c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fc:	f7fe fe7c 	bl	8002ef8 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d908      	bls.n	800421c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e146      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000
 8004214:	42420000 	.word	0x42420000
 8004218:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800421c:	4b92      	ldr	r3, [pc, #584]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e9      	bne.n	80041fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80a6 	beq.w	8004382 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423a:	4b8b      	ldr	r3, [pc, #556]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10d      	bne.n	8004262 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	4b88      	ldr	r3, [pc, #544]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	4a87      	ldr	r2, [pc, #540]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	61d3      	str	r3, [r2, #28]
 8004252:	4b85      	ldr	r3, [pc, #532]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004262:	4b82      	ldr	r3, [pc, #520]	; (800446c <HAL_RCC_OscConfig+0x4c8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d118      	bne.n	80042a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800426e:	4b7f      	ldr	r3, [pc, #508]	; (800446c <HAL_RCC_OscConfig+0x4c8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a7e      	ldr	r2, [pc, #504]	; (800446c <HAL_RCC_OscConfig+0x4c8>)
 8004274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800427a:	f7fe fe3d 	bl	8002ef8 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004282:	f7fe fe39 	bl	8002ef8 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b64      	cmp	r3, #100	; 0x64
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e103      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004294:	4b75      	ldr	r3, [pc, #468]	; (800446c <HAL_RCC_OscConfig+0x4c8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d106      	bne.n	80042b6 <HAL_RCC_OscConfig+0x312>
 80042a8:	4b6f      	ldr	r3, [pc, #444]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	4a6e      	ldr	r2, [pc, #440]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6213      	str	r3, [r2, #32]
 80042b4:	e02d      	b.n	8004312 <HAL_RCC_OscConfig+0x36e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x334>
 80042be:	4b6a      	ldr	r3, [pc, #424]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	4a69      	ldr	r2, [pc, #420]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	6213      	str	r3, [r2, #32]
 80042ca:	4b67      	ldr	r3, [pc, #412]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	4a66      	ldr	r2, [pc, #408]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80042d0:	f023 0304 	bic.w	r3, r3, #4
 80042d4:	6213      	str	r3, [r2, #32]
 80042d6:	e01c      	b.n	8004312 <HAL_RCC_OscConfig+0x36e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d10c      	bne.n	80042fa <HAL_RCC_OscConfig+0x356>
 80042e0:	4b61      	ldr	r3, [pc, #388]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4a60      	ldr	r2, [pc, #384]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80042e6:	f043 0304 	orr.w	r3, r3, #4
 80042ea:	6213      	str	r3, [r2, #32]
 80042ec:	4b5e      	ldr	r3, [pc, #376]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	4a5d      	ldr	r2, [pc, #372]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6213      	str	r3, [r2, #32]
 80042f8:	e00b      	b.n	8004312 <HAL_RCC_OscConfig+0x36e>
 80042fa:	4b5b      	ldr	r3, [pc, #364]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4a5a      	ldr	r2, [pc, #360]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	6213      	str	r3, [r2, #32]
 8004306:	4b58      	ldr	r3, [pc, #352]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	4a57      	ldr	r2, [pc, #348]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	f023 0304 	bic.w	r3, r3, #4
 8004310:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d015      	beq.n	8004346 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431a:	f7fe fded 	bl	8002ef8 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004320:	e00a      	b.n	8004338 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004322:	f7fe fde9 	bl	8002ef8 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004330:	4293      	cmp	r3, r2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e0b1      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004338:	4b4b      	ldr	r3, [pc, #300]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0ee      	beq.n	8004322 <HAL_RCC_OscConfig+0x37e>
 8004344:	e014      	b.n	8004370 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004346:	f7fe fdd7 	bl	8002ef8 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434c:	e00a      	b.n	8004364 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434e:	f7fe fdd3 	bl	8002ef8 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	f241 3288 	movw	r2, #5000	; 0x1388
 800435c:	4293      	cmp	r3, r2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e09b      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004364:	4b40      	ldr	r3, [pc, #256]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ee      	bne.n	800434e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d105      	bne.n	8004382 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004376:	4b3c      	ldr	r3, [pc, #240]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	4a3b      	ldr	r2, [pc, #236]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 800437c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004380:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 8087 	beq.w	800449a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800438c:	4b36      	ldr	r3, [pc, #216]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 030c 	and.w	r3, r3, #12
 8004394:	2b08      	cmp	r3, #8
 8004396:	d061      	beq.n	800445c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d146      	bne.n	800442e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a0:	4b33      	ldr	r3, [pc, #204]	; (8004470 <HAL_RCC_OscConfig+0x4cc>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a6:	f7fe fda7 	bl	8002ef8 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ae:	f7fe fda3 	bl	8002ef8 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e06d      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c0:	4b29      	ldr	r3, [pc, #164]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f0      	bne.n	80043ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d108      	bne.n	80043e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043d6:	4b24      	ldr	r3, [pc, #144]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	4921      	ldr	r1, [pc, #132]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e8:	4b1f      	ldr	r3, [pc, #124]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a19      	ldr	r1, [r3, #32]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	430b      	orrs	r3, r1
 80043fa:	491b      	ldr	r1, [pc, #108]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004400:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <HAL_RCC_OscConfig+0x4cc>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7fe fd77 	bl	8002ef8 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440e:	f7fe fd73 	bl	8002ef8 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e03d      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x46a>
 800442c:	e035      	b.n	800449a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <HAL_RCC_OscConfig+0x4cc>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fe fd60 	bl	8002ef8 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443c:	f7fe fd5c 	bl	8002ef8 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e026      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_RCC_OscConfig+0x4c4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x498>
 800445a:	e01e      	b.n	800449a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e019      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
 8004468:	40021000 	.word	0x40021000
 800446c:	40007000 	.word	0x40007000
 8004470:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_RCC_OscConfig+0x500>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	429a      	cmp	r2, r3
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d001      	beq.n	800449a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40021000 	.word	0x40021000

080044a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0d0      	b.n	800465e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044bc:	4b6a      	ldr	r3, [pc, #424]	; (8004668 <HAL_RCC_ClockConfig+0x1c0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d910      	bls.n	80044ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b67      	ldr	r3, [pc, #412]	; (8004668 <HAL_RCC_ClockConfig+0x1c0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 0207 	bic.w	r2, r3, #7
 80044d2:	4965      	ldr	r1, [pc, #404]	; (8004668 <HAL_RCC_ClockConfig+0x1c0>)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044da:	4b63      	ldr	r3, [pc, #396]	; (8004668 <HAL_RCC_ClockConfig+0x1c0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d001      	beq.n	80044ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0b8      	b.n	800465e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004504:	4b59      	ldr	r3, [pc, #356]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4a58      	ldr	r2, [pc, #352]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 800450a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800450e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800451c:	4b53      	ldr	r3, [pc, #332]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4a52      	ldr	r2, [pc, #328]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004522:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004526:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004528:	4b50      	ldr	r3, [pc, #320]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	494d      	ldr	r1, [pc, #308]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004536:	4313      	orrs	r3, r2
 8004538:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d040      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d107      	bne.n	800455e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	4b47      	ldr	r3, [pc, #284]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d115      	bne.n	8004586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e07f      	b.n	800465e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d107      	bne.n	8004576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	4b41      	ldr	r3, [pc, #260]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e073      	b.n	800465e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004576:	4b3d      	ldr	r3, [pc, #244]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e06b      	b.n	800465e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004586:	4b39      	ldr	r3, [pc, #228]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f023 0203 	bic.w	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4936      	ldr	r1, [pc, #216]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	4313      	orrs	r3, r2
 8004596:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004598:	f7fe fcae 	bl	8002ef8 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a0:	f7fe fcaa 	bl	8002ef8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e053      	b.n	800465e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b6:	4b2d      	ldr	r3, [pc, #180]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 020c 	and.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1eb      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c8:	4b27      	ldr	r3, [pc, #156]	; (8004668 <HAL_RCC_ClockConfig+0x1c0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d210      	bcs.n	80045f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b24      	ldr	r3, [pc, #144]	; (8004668 <HAL_RCC_ClockConfig+0x1c0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 0207 	bic.w	r2, r3, #7
 80045de:	4922      	ldr	r1, [pc, #136]	; (8004668 <HAL_RCC_ClockConfig+0x1c0>)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b20      	ldr	r3, [pc, #128]	; (8004668 <HAL_RCC_ClockConfig+0x1c0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e032      	b.n	800465e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4916      	ldr	r1, [pc, #88]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004612:	4313      	orrs	r3, r2
 8004614:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004622:	4b12      	ldr	r3, [pc, #72]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	490e      	ldr	r1, [pc, #56]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004632:	4313      	orrs	r3, r2
 8004634:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004636:	f000 f821 	bl	800467c <HAL_RCC_GetSysClockFreq>
 800463a:	4602      	mov	r2, r0
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	490a      	ldr	r1, [pc, #40]	; (8004670 <HAL_RCC_ClockConfig+0x1c8>)
 8004648:	5ccb      	ldrb	r3, [r1, r3]
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	4a09      	ldr	r2, [pc, #36]	; (8004674 <HAL_RCC_ClockConfig+0x1cc>)
 8004650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004652:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_RCC_ClockConfig+0x1d0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fe fc0c 	bl	8002e74 <HAL_InitTick>

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40022000 	.word	0x40022000
 800466c:	40021000 	.word	0x40021000
 8004670:	08006ec8 	.word	0x08006ec8
 8004674:	20000018 	.word	0x20000018
 8004678:	2000001c 	.word	0x2000001c

0800467c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004696:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <HAL_RCC_GetSysClockFreq+0x94>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d002      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x30>
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d003      	beq.n	80046b2 <HAL_RCC_GetSysClockFreq+0x36>
 80046aa:	e027      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046ac:	4b19      	ldr	r3, [pc, #100]	; (8004714 <HAL_RCC_GetSysClockFreq+0x98>)
 80046ae:	613b      	str	r3, [r7, #16]
      break;
 80046b0:	e027      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	0c9b      	lsrs	r3, r3, #18
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	4a17      	ldr	r2, [pc, #92]	; (8004718 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046bc:	5cd3      	ldrb	r3, [r2, r3]
 80046be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d010      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046ca:	4b11      	ldr	r3, [pc, #68]	; (8004710 <HAL_RCC_GetSysClockFreq+0x94>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	0c5b      	lsrs	r3, r3, #17
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	4a11      	ldr	r2, [pc, #68]	; (800471c <HAL_RCC_GetSysClockFreq+0xa0>)
 80046d6:	5cd3      	ldrb	r3, [r2, r3]
 80046d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a0d      	ldr	r2, [pc, #52]	; (8004714 <HAL_RCC_GetSysClockFreq+0x98>)
 80046de:	fb03 f202 	mul.w	r2, r3, r2
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e004      	b.n	80046f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a0c      	ldr	r2, [pc, #48]	; (8004720 <HAL_RCC_GetSysClockFreq+0xa4>)
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	613b      	str	r3, [r7, #16]
      break;
 80046fa:	e002      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_RCC_GetSysClockFreq+0x98>)
 80046fe:	613b      	str	r3, [r7, #16]
      break;
 8004700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004702:	693b      	ldr	r3, [r7, #16]
}
 8004704:	4618      	mov	r0, r3
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	007a1200 	.word	0x007a1200
 8004718:	08006ee0 	.word	0x08006ee0
 800471c:	08006ef0 	.word	0x08006ef0
 8004720:	003d0900 	.word	0x003d0900

08004724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004728:	4b02      	ldr	r3, [pc, #8]	; (8004734 <HAL_RCC_GetHCLKFreq+0x10>)
 800472a:	681b      	ldr	r3, [r3, #0]
}
 800472c:	4618      	mov	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	20000018 	.word	0x20000018

08004738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800473c:	f7ff fff2 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4903      	ldr	r1, [pc, #12]	; (800475c <HAL_RCC_GetPCLK1Freq+0x24>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004754:	4618      	mov	r0, r3
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40021000 	.word	0x40021000
 800475c:	08006ed8 	.word	0x08006ed8

08004760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004764:	f7ff ffde 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 8004768:	4602      	mov	r2, r0
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	0adb      	lsrs	r3, r3, #11
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	4903      	ldr	r1, [pc, #12]	; (8004784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004776:	5ccb      	ldrb	r3, [r1, r3]
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800477c:	4618      	mov	r0, r3
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40021000 	.word	0x40021000
 8004784:	08006ed8 	.word	0x08006ed8

08004788 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <RCC_Delay+0x34>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <RCC_Delay+0x38>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
 800479a:	0a5b      	lsrs	r3, r3, #9
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	fb02 f303 	mul.w	r3, r2, r3
 80047a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047a4:	bf00      	nop
  }
  while (Delay --);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1e5a      	subs	r2, r3, #1
 80047aa:	60fa      	str	r2, [r7, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f9      	bne.n	80047a4 <RCC_Delay+0x1c>
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr
 80047bc:	20000018 	.word	0x20000018
 80047c0:	10624dd3 	.word	0x10624dd3

080047c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e041      	b.n	800485a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fe f998 	bl	8002b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f000 fca8 	bl	8005158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d001      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e03a      	b.n	80048f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a18      	ldr	r2, [pc, #96]	; (80048fc <HAL_TIM_Base_Start_IT+0x98>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00e      	beq.n	80048bc <HAL_TIM_Base_Start_IT+0x58>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a6:	d009      	beq.n	80048bc <HAL_TIM_Base_Start_IT+0x58>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a14      	ldr	r2, [pc, #80]	; (8004900 <HAL_TIM_Base_Start_IT+0x9c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d004      	beq.n	80048bc <HAL_TIM_Base_Start_IT+0x58>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a13      	ldr	r2, [pc, #76]	; (8004904 <HAL_TIM_Base_Start_IT+0xa0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d111      	bne.n	80048e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b06      	cmp	r3, #6
 80048cc:	d010      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048de:	e007      	b.n	80048f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800

08004908 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e041      	b.n	800499e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fe f8ae 	bl	8002a90 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3304      	adds	r3, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f000 fc06 	bl	8005158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_IC_Start_IT+0x1e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	e013      	b.n	80049ee <HAL_TIM_IC_Start_IT+0x46>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_IC_Start_IT+0x2e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	e00b      	b.n	80049ee <HAL_TIM_IC_Start_IT+0x46>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_IC_Start_IT+0x3e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	e003      	b.n	80049ee <HAL_TIM_IC_Start_IT+0x46>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <HAL_TIM_IC_Start_IT+0x58>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e013      	b.n	8004a28 <HAL_TIM_IC_Start_IT+0x80>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d104      	bne.n	8004a10 <HAL_TIM_IC_Start_IT+0x68>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e00b      	b.n	8004a28 <HAL_TIM_IC_Start_IT+0x80>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d104      	bne.n	8004a20 <HAL_TIM_IC_Start_IT+0x78>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e003      	b.n	8004a28 <HAL_TIM_IC_Start_IT+0x80>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a2a:	7bbb      	ldrb	r3, [r7, #14]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d102      	bne.n	8004a36 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a30:	7b7b      	ldrb	r3, [r7, #13]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d001      	beq.n	8004a3a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e0b8      	b.n	8004bac <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d104      	bne.n	8004a4a <HAL_TIM_IC_Start_IT+0xa2>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a48:	e013      	b.n	8004a72 <HAL_TIM_IC_Start_IT+0xca>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d104      	bne.n	8004a5a <HAL_TIM_IC_Start_IT+0xb2>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a58:	e00b      	b.n	8004a72 <HAL_TIM_IC_Start_IT+0xca>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d104      	bne.n	8004a6a <HAL_TIM_IC_Start_IT+0xc2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a68:	e003      	b.n	8004a72 <HAL_TIM_IC_Start_IT+0xca>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_IC_Start_IT+0xda>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	e013      	b.n	8004aaa <HAL_TIM_IC_Start_IT+0x102>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_IC_Start_IT+0xea>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a90:	e00b      	b.n	8004aaa <HAL_TIM_IC_Start_IT+0x102>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_IC_Start_IT+0xfa>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa0:	e003      	b.n	8004aaa <HAL_TIM_IC_Start_IT+0x102>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b0c      	cmp	r3, #12
 8004aae:	d841      	bhi.n	8004b34 <HAL_TIM_IC_Start_IT+0x18c>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <HAL_TIM_IC_Start_IT+0x110>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004aed 	.word	0x08004aed
 8004abc:	08004b35 	.word	0x08004b35
 8004ac0:	08004b35 	.word	0x08004b35
 8004ac4:	08004b35 	.word	0x08004b35
 8004ac8:	08004aff 	.word	0x08004aff
 8004acc:	08004b35 	.word	0x08004b35
 8004ad0:	08004b35 	.word	0x08004b35
 8004ad4:	08004b35 	.word	0x08004b35
 8004ad8:	08004b11 	.word	0x08004b11
 8004adc:	08004b35 	.word	0x08004b35
 8004ae0:	08004b35 	.word	0x08004b35
 8004ae4:	08004b35 	.word	0x08004b35
 8004ae8:	08004b23 	.word	0x08004b23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0202 	orr.w	r2, r2, #2
 8004afa:	60da      	str	r2, [r3, #12]
      break;
 8004afc:	e01d      	b.n	8004b3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0204 	orr.w	r2, r2, #4
 8004b0c:	60da      	str	r2, [r3, #12]
      break;
 8004b0e:	e014      	b.n	8004b3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0208 	orr.w	r2, r2, #8
 8004b1e:	60da      	str	r2, [r3, #12]
      break;
 8004b20:	e00b      	b.n	8004b3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0210 	orr.w	r2, r2, #16
 8004b30:	60da      	str	r2, [r3, #12]
      break;
 8004b32:	e002      	b.n	8004b3a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d134      	bne.n	8004baa <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2201      	movs	r2, #1
 8004b46:	6839      	ldr	r1, [r7, #0]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fd0a 	bl	8005562 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a18      	ldr	r2, [pc, #96]	; (8004bb4 <HAL_TIM_IC_Start_IT+0x20c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <HAL_TIM_IC_Start_IT+0x1ce>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b60:	d009      	beq.n	8004b76 <HAL_TIM_IC_Start_IT+0x1ce>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a14      	ldr	r2, [pc, #80]	; (8004bb8 <HAL_TIM_IC_Start_IT+0x210>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_TIM_IC_Start_IT+0x1ce>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a12      	ldr	r2, [pc, #72]	; (8004bbc <HAL_TIM_IC_Start_IT+0x214>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d111      	bne.n	8004b9a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b06      	cmp	r3, #6
 8004b86:	d010      	beq.n	8004baa <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b98:	e007      	b.n	8004baa <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40000400 	.word	0x40000400
 8004bbc:	40000800 	.word	0x40000800

08004bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d122      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d11b      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0202 	mvn.w	r2, #2
 8004bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fd fd30 	bl	8002668 <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa88 	bl	8005120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fa8e 	bl	8005132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d122      	bne.n	8004c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d11b      	bne.n	8004c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0204 	mvn.w	r2, #4
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fd fd06 	bl	8002668 <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa5e 	bl	8005120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fa64 	bl	8005132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d122      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d11b      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0208 	mvn.w	r2, #8
 8004c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2204      	movs	r2, #4
 8004c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fd fcdc 	bl	8002668 <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fa34 	bl	8005120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fa3a 	bl	8005132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b10      	cmp	r3, #16
 8004cd0:	d122      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d11b      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0210 	mvn.w	r2, #16
 8004ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2208      	movs	r2, #8
 8004cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fd fcb2 	bl	8002668 <HAL_TIM_IC_CaptureCallback>
 8004d04:	e005      	b.n	8004d12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fa0a 	bl	8005120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fa10 	bl	8005132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10e      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0201 	mvn.w	r2, #1
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fd fb4c 	bl	80023dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b80      	cmp	r3, #128	; 0x80
 8004d50:	d10e      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5c:	2b80      	cmp	r3, #128	; 0x80
 8004d5e:	d107      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fc85 	bl	800567a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7a:	2b40      	cmp	r3, #64	; 0x40
 8004d7c:	d10e      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d88:	2b40      	cmp	r3, #64	; 0x40
 8004d8a:	d107      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f9d4 	bl	8005144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d10e      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	d107      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0220 	mvn.w	r2, #32
 8004dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fc50 	bl	8005668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_IC_ConfigChannel+0x1e>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e088      	b.n	8004f00 <HAL_TIM_IC_ConfigChannel+0x130>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11b      	bne.n	8004e34 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004e0c:	f000 fa06 	bl	800521c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 020c 	bic.w	r2, r2, #12
 8004e1e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6999      	ldr	r1, [r3, #24]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	619a      	str	r2, [r3, #24]
 8004e32:	e060      	b.n	8004ef6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d11c      	bne.n	8004e74 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004e4a:	f000 fa6f 	bl	800532c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e5c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6999      	ldr	r1, [r3, #24]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	021a      	lsls	r2, r3, #8
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	619a      	str	r2, [r3, #24]
 8004e72:	e040      	b.n	8004ef6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d11b      	bne.n	8004eb2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004e8a:	f000 faba 	bl	8005402 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 020c 	bic.w	r2, r2, #12
 8004e9c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69d9      	ldr	r1, [r3, #28]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	61da      	str	r2, [r3, #28]
 8004eb0:	e021      	b.n	8004ef6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b0c      	cmp	r3, #12
 8004eb6:	d11c      	bne.n	8004ef2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004ec8:	f000 fad6 	bl	8005478 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004eda:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69d9      	ldr	r1, [r3, #28]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	021a      	lsls	r2, r3, #8
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	61da      	str	r2, [r3, #28]
 8004ef0:	e001      	b.n	8004ef6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIM_ConfigClockSource+0x1c>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e0b4      	b.n	800508e <HAL_TIM_ConfigClockSource+0x186>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5c:	d03e      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0xd4>
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f62:	f200 8087 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6a:	f000 8086 	beq.w	800507a <HAL_TIM_ConfigClockSource+0x172>
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f72:	d87f      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f74:	2b70      	cmp	r3, #112	; 0x70
 8004f76:	d01a      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0xa6>
 8004f78:	2b70      	cmp	r3, #112	; 0x70
 8004f7a:	d87b      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7c:	2b60      	cmp	r3, #96	; 0x60
 8004f7e:	d050      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x11a>
 8004f80:	2b60      	cmp	r3, #96	; 0x60
 8004f82:	d877      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f84:	2b50      	cmp	r3, #80	; 0x50
 8004f86:	d03c      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0xfa>
 8004f88:	2b50      	cmp	r3, #80	; 0x50
 8004f8a:	d873      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d058      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x13a>
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d86f      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f94:	2b30      	cmp	r3, #48	; 0x30
 8004f96:	d064      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15a>
 8004f98:	2b30      	cmp	r3, #48	; 0x30
 8004f9a:	d86b      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d060      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d867      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d05c      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d05a      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	e062      	b.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fbe:	f000 fab1 	bl	8005524 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	609a      	str	r2, [r3, #8]
      break;
 8004fda:	e04f      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fec:	f000 fa9a 	bl	8005524 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ffe:	609a      	str	r2, [r3, #8]
      break;
 8005000:	e03c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	461a      	mov	r2, r3
 8005010:	f000 f95e 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2150      	movs	r1, #80	; 0x50
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fa68 	bl	80054f0 <TIM_ITRx_SetConfig>
      break;
 8005020:	e02c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800502e:	461a      	mov	r2, r3
 8005030:	f000 f9b8 	bl	80053a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2160      	movs	r1, #96	; 0x60
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fa58 	bl	80054f0 <TIM_ITRx_SetConfig>
      break;
 8005040:	e01c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800504e:	461a      	mov	r2, r3
 8005050:	f000 f93e 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2140      	movs	r1, #64	; 0x40
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fa48 	bl	80054f0 <TIM_ITRx_SetConfig>
      break;
 8005060:	e00c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	4610      	mov	r0, r2
 800506e:	f000 fa3f 	bl	80054f0 <TIM_ITRx_SetConfig>
      break;
 8005072:	e003      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
      break;
 8005078:	e000      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800507a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b0c      	cmp	r3, #12
 80050aa:	d831      	bhi.n	8005110 <HAL_TIM_ReadCapturedValue+0x78>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050e9 	.word	0x080050e9
 80050b8:	08005111 	.word	0x08005111
 80050bc:	08005111 	.word	0x08005111
 80050c0:	08005111 	.word	0x08005111
 80050c4:	080050f3 	.word	0x080050f3
 80050c8:	08005111 	.word	0x08005111
 80050cc:	08005111 	.word	0x08005111
 80050d0:	08005111 	.word	0x08005111
 80050d4:	080050fd 	.word	0x080050fd
 80050d8:	08005111 	.word	0x08005111
 80050dc:	08005111 	.word	0x08005111
 80050e0:	08005111 	.word	0x08005111
 80050e4:	08005107 	.word	0x08005107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ee:	60fb      	str	r3, [r7, #12]

      break;
 80050f0:	e00f      	b.n	8005112 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	60fb      	str	r3, [r7, #12]

      break;
 80050fa:	e00a      	b.n	8005112 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	60fb      	str	r3, [r7, #12]

      break;
 8005104:	e005      	b.n	8005112 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	60fb      	str	r3, [r7, #12]

      break;
 800510e:	e000      	b.n	8005112 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005110:	bf00      	nop
  }

  return tmpreg;
 8005112:	68fb      	ldr	r3, [r7, #12]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop

08005120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr
	...

08005158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a29      	ldr	r2, [pc, #164]	; (8005210 <TIM_Base_SetConfig+0xb8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00b      	beq.n	8005188 <TIM_Base_SetConfig+0x30>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005176:	d007      	beq.n	8005188 <TIM_Base_SetConfig+0x30>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a26      	ldr	r2, [pc, #152]	; (8005214 <TIM_Base_SetConfig+0xbc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_Base_SetConfig+0x30>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a25      	ldr	r2, [pc, #148]	; (8005218 <TIM_Base_SetConfig+0xc0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d108      	bne.n	800519a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <TIM_Base_SetConfig+0xb8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00b      	beq.n	80051ba <TIM_Base_SetConfig+0x62>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a8:	d007      	beq.n	80051ba <TIM_Base_SetConfig+0x62>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a19      	ldr	r2, [pc, #100]	; (8005214 <TIM_Base_SetConfig+0xbc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_Base_SetConfig+0x62>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a18      	ldr	r2, [pc, #96]	; (8005218 <TIM_Base_SetConfig+0xc0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a07      	ldr	r2, [pc, #28]	; (8005210 <TIM_Base_SetConfig+0xb8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d103      	bne.n	8005200 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	615a      	str	r2, [r3, #20]
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40000400 	.word	0x40000400
 8005218:	40000800 	.word	0x40000800

0800521c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	f023 0201 	bic.w	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <TIM_TI1_SetConfig+0xa8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00b      	beq.n	8005262 <TIM_TI1_SetConfig+0x46>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005250:	d007      	beq.n	8005262 <TIM_TI1_SetConfig+0x46>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4a1c      	ldr	r2, [pc, #112]	; (80052c8 <TIM_TI1_SetConfig+0xac>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d003      	beq.n	8005262 <TIM_TI1_SetConfig+0x46>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4a1b      	ldr	r2, [pc, #108]	; (80052cc <TIM_TI1_SetConfig+0xb0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d101      	bne.n	8005266 <TIM_TI1_SetConfig+0x4a>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <TIM_TI1_SetConfig+0x4c>
 8005266:	2300      	movs	r3, #0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	e003      	b.n	8005286 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f043 0301 	orr.w	r3, r3, #1
 8005284:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800528c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	b2db      	uxtb	r3, r3
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f023 030a 	bic.w	r3, r3, #10
 80052a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f003 030a 	and.w	r3, r3, #10
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800

080052d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f023 030a 	bic.w	r3, r3, #10
 800530c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr

0800532c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f023 0210 	bic.w	r2, r3, #16
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800536a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	031b      	lsls	r3, r3, #12
 8005370:	b29b      	uxth	r3, r3
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800537e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr

080053a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f023 0210 	bic.w	r2, r3, #16
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	031b      	lsls	r3, r3, #12
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	621a      	str	r2, [r3, #32]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005402:	b480      	push	{r7}
 8005404:	b087      	sub	sp, #28
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
 800540e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800543e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	b2db      	uxtb	r3, r3
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005452:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr

08005478 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054b6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	031b      	lsls	r3, r3, #12
 80054bc:	b29b      	uxth	r3, r3
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ca:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	031b      	lsls	r3, r3, #12
 80054d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	621a      	str	r2, [r3, #32]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr

080054f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	f043 0307 	orr.w	r3, r3, #7
 8005512:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	609a      	str	r2, [r3, #8]
}
 800551a:	bf00      	nop
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800553e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	021a      	lsls	r2, r3, #8
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	431a      	orrs	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4313      	orrs	r3, r2
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	609a      	str	r2, [r3, #8]
}
 8005558:	bf00      	nop
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	bc80      	pop	{r7}
 8005560:	4770      	bx	lr

08005562 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005562:	b480      	push	{r7}
 8005564:	b087      	sub	sp, #28
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f003 031f 	and.w	r3, r3, #31
 8005574:	2201      	movs	r2, #1
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	43db      	mvns	r3, r3
 8005584:	401a      	ands	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1a      	ldr	r2, [r3, #32]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f003 031f 	and.w	r3, r3, #31
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	fa01 f303 	lsl.w	r3, r1, r3
 800559a:	431a      	orrs	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	621a      	str	r2, [r3, #32]
}
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
	...

080055ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055c0:	2302      	movs	r3, #2
 80055c2:	e046      	b.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a16      	ldr	r2, [pc, #88]	; (800565c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005610:	d009      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a12      	ldr	r2, [pc, #72]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a10      	ldr	r2, [pc, #64]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d10c      	bne.n	8005640 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	4313      	orrs	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr
 800565c:	40012c00 	.word	0x40012c00
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800

08005668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr

0800567a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e042      	b.n	8005724 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fd fa58 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2224      	movs	r2, #36	; 0x24
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fdc5 	bl	8006260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695a      	ldr	r2, [r3, #20]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08a      	sub	sp, #40	; 0x28
 8005730:	af02      	add	r7, sp, #8
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	4613      	mov	r3, r2
 800573a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b20      	cmp	r3, #32
 800574a:	d16d      	bne.n	8005828 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <HAL_UART_Transmit+0x2c>
 8005752:	88fb      	ldrh	r3, [r7, #6]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e066      	b.n	800582a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2221      	movs	r2, #33	; 0x21
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800576a:	f7fd fbc5 	bl	8002ef8 <HAL_GetTick>
 800576e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	88fa      	ldrh	r2, [r7, #6]
 800577a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005784:	d108      	bne.n	8005798 <HAL_UART_Transmit+0x6c>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	e003      	b.n	80057a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057a0:	e02a      	b.n	80057f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2200      	movs	r2, #0
 80057aa:	2180      	movs	r1, #128	; 0x80
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 fb14 	bl	8005dda <UART_WaitOnFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e036      	b.n	800582a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10b      	bne.n	80057da <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	3302      	adds	r3, #2
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e007      	b.n	80057ea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	781a      	ldrb	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	3301      	adds	r3, #1
 80057e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1cf      	bne.n	80057a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2200      	movs	r2, #0
 800580a:	2140      	movs	r1, #64	; 0x40
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fae4 	bl	8005dda <UART_WaitOnFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e006      	b.n	800582a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	e000      	b.n	800582a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005828:	2302      	movs	r3, #2
  }
}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	4613      	mov	r3, r2
 800583e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b20      	cmp	r3, #32
 800584a:	d112      	bne.n	8005872 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_UART_Receive_IT+0x26>
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e00b      	b.n	8005874 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	461a      	mov	r2, r3
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fb24 	bl	8005eb6 <UART_Start_Receive_IT>
 800586e:	4603      	mov	r3, r0
 8005870:	e000      	b.n	8005874 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005872:	2302      	movs	r3, #2
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b0ba      	sub	sp, #232	; 0xe8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10f      	bne.n	80058e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <HAL_UART_IRQHandler+0x66>
 80058ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fc01 	bl	80060e2 <UART_Receive_IT>
      return;
 80058e0:	e25b      	b.n	8005d9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80de 	beq.w	8005aa8 <HAL_UART_IRQHandler+0x22c>
 80058ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 80d1 	beq.w	8005aa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00b      	beq.n	800592a <HAL_UART_IRQHandler+0xae>
 8005912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005922:	f043 0201 	orr.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <HAL_UART_IRQHandler+0xd2>
 8005936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	f043 0202 	orr.w	r2, r3, #2
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <HAL_UART_IRQHandler+0xf6>
 800595a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596a:	f043 0204 	orr.w	r2, r3, #4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d011      	beq.n	80059a2 <HAL_UART_IRQHandler+0x126>
 800597e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d105      	bne.n	8005996 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800598a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599a:	f043 0208 	orr.w	r2, r3, #8
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 81f2 	beq.w	8005d90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_UART_IRQHandler+0x14e>
 80059b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fb8c 	bl	80060e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bf14      	ite	ne
 80059d8:	2301      	movne	r3, #1
 80059da:	2300      	moveq	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d103      	bne.n	80059f6 <HAL_UART_IRQHandler+0x17a>
 80059ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d04f      	beq.n	8005a96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa96 	bl	8005f28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d041      	beq.n	8005a8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3314      	adds	r3, #20
 8005a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3314      	adds	r3, #20
 8005a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1d9      	bne.n	8005a0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d013      	beq.n	8005a86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	4a7e      	ldr	r2, [pc, #504]	; (8005c5c <HAL_UART_IRQHandler+0x3e0>)
 8005a64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fd fbba 	bl	80031e4 <HAL_DMA_Abort_IT>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d016      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a80:	4610      	mov	r0, r2
 8005a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	e00e      	b.n	8005aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f993 	bl	8005db2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8c:	e00a      	b.n	8005aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f98f 	bl	8005db2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	e006      	b.n	8005aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f98b 	bl	8005db2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005aa2:	e175      	b.n	8005d90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa4:	bf00      	nop
    return;
 8005aa6:	e173      	b.n	8005d90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	f040 814f 	bne.w	8005d50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab6:	f003 0310 	and.w	r3, r3, #16
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 8148 	beq.w	8005d50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 8141 	beq.w	8005d50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	60bb      	str	r3, [r7, #8]
 8005ae2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 80b6 	beq.w	8005c60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8145 	beq.w	8005d94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b12:	429a      	cmp	r2, r3
 8005b14:	f080 813e 	bcs.w	8005d94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	f000 8088 	beq.w	8005c3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	330c      	adds	r3, #12
 8005b54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b58:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1d9      	bne.n	8005b2c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3314      	adds	r3, #20
 8005b98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ba0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ba4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e1      	bne.n	8005b78 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3314      	adds	r3, #20
 8005bba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3314      	adds	r3, #20
 8005bd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bd8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e3      	bne.n	8005bb4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	330c      	adds	r3, #12
 8005c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c0c:	f023 0310 	bic.w	r3, r3, #16
 8005c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e3      	bne.n	8005bfa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fd fa99 	bl	800316e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f8b6 	bl	8005dc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c58:	e09c      	b.n	8005d94 <HAL_UART_IRQHandler+0x518>
 8005c5a:	bf00      	nop
 8005c5c:	08005fed 	.word	0x08005fed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 808e 	beq.w	8005d98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8089 	beq.w	8005d98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005caa:	647a      	str	r2, [r7, #68]	; 0x44
 8005cac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e3      	bne.n	8005c86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3314      	adds	r3, #20
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	f023 0301 	bic.w	r3, r3, #1
 8005cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3314      	adds	r3, #20
 8005cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ce2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e3      	bne.n	8005cbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0310 	bic.w	r3, r3, #16
 8005d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	330c      	adds	r3, #12
 8005d24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d28:	61fa      	str	r2, [r7, #28]
 8005d2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	69b9      	ldr	r1, [r7, #24]
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	617b      	str	r3, [r7, #20]
   return(result);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e3      	bne.n	8005d04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f83b 	bl	8005dc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d4e:	e023      	b.n	8005d98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <HAL_UART_IRQHandler+0x4f4>
 8005d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f953 	bl	8006014 <UART_Transmit_IT>
    return;
 8005d6e:	e014      	b.n	8005d9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00e      	beq.n	8005d9a <HAL_UART_IRQHandler+0x51e>
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f992 	bl	80060b2 <UART_EndTransmit_IT>
    return;
 8005d8e:	e004      	b.n	8005d9a <HAL_UART_IRQHandler+0x51e>
    return;
 8005d90:	bf00      	nop
 8005d92:	e002      	b.n	8005d9a <HAL_UART_IRQHandler+0x51e>
      return;
 8005d94:	bf00      	nop
 8005d96:	e000      	b.n	8005d9a <HAL_UART_IRQHandler+0x51e>
      return;
 8005d98:	bf00      	nop
  }
}
 8005d9a:	37e8      	adds	r7, #232	; 0xe8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr

08005db2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bc80      	pop	{r7}
 8005dd8:	4770      	bx	lr

08005dda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b090      	sub	sp, #64	; 0x40
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	603b      	str	r3, [r7, #0]
 8005de6:	4613      	mov	r3, r2
 8005de8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dea:	e050      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d04c      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <UART_WaitOnFlagUntilTimeout+0x30>
 8005dfa:	f7fd f87d 	bl	8002ef8 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d241      	bcs.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	330c      	adds	r3, #12
 8005e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e2a:	637a      	str	r2, [r7, #52]	; 0x34
 8005e2c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1e5      	bne.n	8005e0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3314      	adds	r3, #20
 8005e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f023 0301 	bic.w	r3, r3, #1
 8005e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3314      	adds	r3, #20
 8005e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e5e:	623a      	str	r2, [r7, #32]
 8005e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	69f9      	ldr	r1, [r7, #28]
 8005e64:	6a3a      	ldr	r2, [r7, #32]
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e5      	bne.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e00f      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4013      	ands	r3, r2
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2301      	moveq	r3, #1
 8005ea0:	2300      	movne	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d09f      	beq.n	8005dec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3740      	adds	r7, #64	; 0x40
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	88fa      	ldrh	r2, [r7, #6]
 8005ece:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2222      	movs	r2, #34	; 0x22
 8005ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005efa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695a      	ldr	r2, [r3, #20]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0220 	orr.w	r2, r2, #32
 8005f1a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr

08005f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b095      	sub	sp, #84	; 0x54
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	330c      	adds	r3, #12
 8005f36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f50:	643a      	str	r2, [r7, #64]	; 0x40
 8005f52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e5      	bne.n	8005f30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3314      	adds	r3, #20
 8005f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f023 0301 	bic.w	r3, r3, #1
 8005f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3314      	adds	r3, #20
 8005f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f8c:	e841 2300 	strex	r3, r2, [r1]
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e5      	bne.n	8005f64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d119      	bne.n	8005fd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	330c      	adds	r3, #12
 8005fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f023 0310 	bic.w	r3, r3, #16
 8005fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc0:	61ba      	str	r2, [r7, #24]
 8005fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6979      	ldr	r1, [r7, #20]
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e5      	bne.n	8005fa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fe2:	bf00      	nop
 8005fe4:	3754      	adds	r7, #84	; 0x54
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr

08005fec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f7ff fed3 	bl	8005db2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b21      	cmp	r3, #33	; 0x21
 8006026:	d13e      	bne.n	80060a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006030:	d114      	bne.n	800605c <UART_Transmit_IT+0x48>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d110      	bne.n	800605c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800604e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	1c9a      	adds	r2, r3, #2
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	621a      	str	r2, [r3, #32]
 800605a:	e008      	b.n	800606e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	1c59      	adds	r1, r3, #1
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6211      	str	r1, [r2, #32]
 8006066:	781a      	ldrb	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29b      	uxth	r3, r3
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	4619      	mov	r1, r3
 800607c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10f      	bne.n	80060a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006090:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e000      	b.n	80060a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060a6:	2302      	movs	r3, #2
  }
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr

080060b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fe64 	bl	8005da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b08c      	sub	sp, #48	; 0x30
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b22      	cmp	r3, #34	; 0x22
 80060f4:	f040 80ae 	bne.w	8006254 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006100:	d117      	bne.n	8006132 <UART_Receive_IT+0x50>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d113      	bne.n	8006132 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006112:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006120:	b29a      	uxth	r2, r3
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	1c9a      	adds	r2, r3, #2
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	629a      	str	r2, [r3, #40]	; 0x28
 8006130:	e026      	b.n	8006180 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006138:	2300      	movs	r3, #0
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006144:	d007      	beq.n	8006156 <UART_Receive_IT+0x74>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <UART_Receive_IT+0x82>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	b2da      	uxtb	r2, r3
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e008      	b.n	8006176 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006170:	b2da      	uxtb	r2, r3
 8006172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006174:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29b      	uxth	r3, r3
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	4619      	mov	r1, r3
 800618e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006190:	2b00      	cmp	r3, #0
 8006192:	d15d      	bne.n	8006250 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0220 	bic.w	r2, r2, #32
 80061a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695a      	ldr	r2, [r3, #20]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0201 	bic.w	r2, r2, #1
 80061c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d135      	bne.n	8006246 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	e853 3f00 	ldrex	r3, [r3]
 80061ee:	613b      	str	r3, [r7, #16]
   return(result);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f023 0310 	bic.w	r3, r3, #16
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006200:	623a      	str	r2, [r7, #32]
 8006202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	69f9      	ldr	r1, [r7, #28]
 8006206:	6a3a      	ldr	r2, [r7, #32]
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	61bb      	str	r3, [r7, #24]
   return(result);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e5      	bne.n	80061e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	2b10      	cmp	r3, #16
 8006220:	d10a      	bne.n	8006238 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fdc0 	bl	8005dc4 <HAL_UARTEx_RxEventCallback>
 8006244:	e002      	b.n	800624c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fc fb96 	bl	8002978 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	e002      	b.n	8006256 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3730      	adds	r7, #48	; 0x30
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800629a:	f023 030c 	bic.w	r3, r3, #12
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	430b      	orrs	r3, r1
 80062a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a2c      	ldr	r2, [pc, #176]	; (8006374 <UART_SetConfig+0x114>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d103      	bne.n	80062d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062c8:	f7fe fa4a 	bl	8004760 <HAL_RCC_GetPCLK2Freq>
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	e002      	b.n	80062d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80062d0:	f7fe fa32 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 80062d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009a      	lsls	r2, r3, #2
 80062e0:	441a      	add	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ec:	4a22      	ldr	r2, [pc, #136]	; (8006378 <UART_SetConfig+0x118>)
 80062ee:	fba2 2303 	umull	r2, r3, r2, r3
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	0119      	lsls	r1, r3, #4
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009a      	lsls	r2, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	fbb2 f2f3 	udiv	r2, r2, r3
 800630c:	4b1a      	ldr	r3, [pc, #104]	; (8006378 <UART_SetConfig+0x118>)
 800630e:	fba3 0302 	umull	r0, r3, r3, r2
 8006312:	095b      	lsrs	r3, r3, #5
 8006314:	2064      	movs	r0, #100	; 0x64
 8006316:	fb00 f303 	mul.w	r3, r0, r3
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	3332      	adds	r3, #50	; 0x32
 8006320:	4a15      	ldr	r2, [pc, #84]	; (8006378 <UART_SetConfig+0x118>)
 8006322:	fba2 2303 	umull	r2, r3, r2, r3
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800632c:	4419      	add	r1, r3
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009a      	lsls	r2, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	fbb2 f2f3 	udiv	r2, r2, r3
 8006344:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <UART_SetConfig+0x118>)
 8006346:	fba3 0302 	umull	r0, r3, r3, r2
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	2064      	movs	r0, #100	; 0x64
 800634e:	fb00 f303 	mul.w	r3, r0, r3
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	3332      	adds	r3, #50	; 0x32
 8006358:	4a07      	ldr	r2, [pc, #28]	; (8006378 <UART_SetConfig+0x118>)
 800635a:	fba2 2303 	umull	r2, r3, r2, r3
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	f003 020f 	and.w	r2, r3, #15
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	440a      	add	r2, r1
 800636a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40013800 	.word	0x40013800
 8006378:	51eb851f 	.word	0x51eb851f

0800637c <malloc>:
 800637c:	4b02      	ldr	r3, [pc, #8]	; (8006388 <malloc+0xc>)
 800637e:	4601      	mov	r1, r0
 8006380:	6818      	ldr	r0, [r3, #0]
 8006382:	f000 b82b 	b.w	80063dc <_malloc_r>
 8006386:	bf00      	nop
 8006388:	20000070 	.word	0x20000070

0800638c <free>:
 800638c:	4b02      	ldr	r3, [pc, #8]	; (8006398 <free+0xc>)
 800638e:	4601      	mov	r1, r0
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	f000 b92b 	b.w	80065ec <_free_r>
 8006396:	bf00      	nop
 8006398:	20000070 	.word	0x20000070

0800639c <sbrk_aligned>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	4e0e      	ldr	r6, [pc, #56]	; (80063d8 <sbrk_aligned+0x3c>)
 80063a0:	460c      	mov	r4, r1
 80063a2:	6831      	ldr	r1, [r6, #0]
 80063a4:	4605      	mov	r5, r0
 80063a6:	b911      	cbnz	r1, 80063ae <sbrk_aligned+0x12>
 80063a8:	f000 f8dc 	bl	8006564 <_sbrk_r>
 80063ac:	6030      	str	r0, [r6, #0]
 80063ae:	4621      	mov	r1, r4
 80063b0:	4628      	mov	r0, r5
 80063b2:	f000 f8d7 	bl	8006564 <_sbrk_r>
 80063b6:	1c43      	adds	r3, r0, #1
 80063b8:	d00a      	beq.n	80063d0 <sbrk_aligned+0x34>
 80063ba:	1cc4      	adds	r4, r0, #3
 80063bc:	f024 0403 	bic.w	r4, r4, #3
 80063c0:	42a0      	cmp	r0, r4
 80063c2:	d007      	beq.n	80063d4 <sbrk_aligned+0x38>
 80063c4:	1a21      	subs	r1, r4, r0
 80063c6:	4628      	mov	r0, r5
 80063c8:	f000 f8cc 	bl	8006564 <_sbrk_r>
 80063cc:	3001      	adds	r0, #1
 80063ce:	d101      	bne.n	80063d4 <sbrk_aligned+0x38>
 80063d0:	f04f 34ff 	mov.w	r4, #4294967295
 80063d4:	4620      	mov	r0, r4
 80063d6:	bd70      	pop	{r4, r5, r6, pc}
 80063d8:	20000308 	.word	0x20000308

080063dc <_malloc_r>:
 80063dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e0:	1ccd      	adds	r5, r1, #3
 80063e2:	f025 0503 	bic.w	r5, r5, #3
 80063e6:	3508      	adds	r5, #8
 80063e8:	2d0c      	cmp	r5, #12
 80063ea:	bf38      	it	cc
 80063ec:	250c      	movcc	r5, #12
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	4607      	mov	r7, r0
 80063f2:	db01      	blt.n	80063f8 <_malloc_r+0x1c>
 80063f4:	42a9      	cmp	r1, r5
 80063f6:	d905      	bls.n	8006404 <_malloc_r+0x28>
 80063f8:	230c      	movs	r3, #12
 80063fa:	2600      	movs	r6, #0
 80063fc:	603b      	str	r3, [r7, #0]
 80063fe:	4630      	mov	r0, r6
 8006400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006404:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80064d8 <_malloc_r+0xfc>
 8006408:	f000 f868 	bl	80064dc <__malloc_lock>
 800640c:	f8d8 3000 	ldr.w	r3, [r8]
 8006410:	461c      	mov	r4, r3
 8006412:	bb5c      	cbnz	r4, 800646c <_malloc_r+0x90>
 8006414:	4629      	mov	r1, r5
 8006416:	4638      	mov	r0, r7
 8006418:	f7ff ffc0 	bl	800639c <sbrk_aligned>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	4604      	mov	r4, r0
 8006420:	d155      	bne.n	80064ce <_malloc_r+0xf2>
 8006422:	f8d8 4000 	ldr.w	r4, [r8]
 8006426:	4626      	mov	r6, r4
 8006428:	2e00      	cmp	r6, #0
 800642a:	d145      	bne.n	80064b8 <_malloc_r+0xdc>
 800642c:	2c00      	cmp	r4, #0
 800642e:	d048      	beq.n	80064c2 <_malloc_r+0xe6>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	4631      	mov	r1, r6
 8006434:	4638      	mov	r0, r7
 8006436:	eb04 0903 	add.w	r9, r4, r3
 800643a:	f000 f893 	bl	8006564 <_sbrk_r>
 800643e:	4581      	cmp	r9, r0
 8006440:	d13f      	bne.n	80064c2 <_malloc_r+0xe6>
 8006442:	6821      	ldr	r1, [r4, #0]
 8006444:	4638      	mov	r0, r7
 8006446:	1a6d      	subs	r5, r5, r1
 8006448:	4629      	mov	r1, r5
 800644a:	f7ff ffa7 	bl	800639c <sbrk_aligned>
 800644e:	3001      	adds	r0, #1
 8006450:	d037      	beq.n	80064c2 <_malloc_r+0xe6>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	442b      	add	r3, r5
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	f8d8 3000 	ldr.w	r3, [r8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d038      	beq.n	80064d2 <_malloc_r+0xf6>
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	42a2      	cmp	r2, r4
 8006464:	d12b      	bne.n	80064be <_malloc_r+0xe2>
 8006466:	2200      	movs	r2, #0
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	e00f      	b.n	800648c <_malloc_r+0xb0>
 800646c:	6822      	ldr	r2, [r4, #0]
 800646e:	1b52      	subs	r2, r2, r5
 8006470:	d41f      	bmi.n	80064b2 <_malloc_r+0xd6>
 8006472:	2a0b      	cmp	r2, #11
 8006474:	d917      	bls.n	80064a6 <_malloc_r+0xca>
 8006476:	1961      	adds	r1, r4, r5
 8006478:	42a3      	cmp	r3, r4
 800647a:	6025      	str	r5, [r4, #0]
 800647c:	bf18      	it	ne
 800647e:	6059      	strne	r1, [r3, #4]
 8006480:	6863      	ldr	r3, [r4, #4]
 8006482:	bf08      	it	eq
 8006484:	f8c8 1000 	streq.w	r1, [r8]
 8006488:	5162      	str	r2, [r4, r5]
 800648a:	604b      	str	r3, [r1, #4]
 800648c:	4638      	mov	r0, r7
 800648e:	f104 060b 	add.w	r6, r4, #11
 8006492:	f000 f829 	bl	80064e8 <__malloc_unlock>
 8006496:	f026 0607 	bic.w	r6, r6, #7
 800649a:	1d23      	adds	r3, r4, #4
 800649c:	1af2      	subs	r2, r6, r3
 800649e:	d0ae      	beq.n	80063fe <_malloc_r+0x22>
 80064a0:	1b9b      	subs	r3, r3, r6
 80064a2:	50a3      	str	r3, [r4, r2]
 80064a4:	e7ab      	b.n	80063fe <_malloc_r+0x22>
 80064a6:	42a3      	cmp	r3, r4
 80064a8:	6862      	ldr	r2, [r4, #4]
 80064aa:	d1dd      	bne.n	8006468 <_malloc_r+0x8c>
 80064ac:	f8c8 2000 	str.w	r2, [r8]
 80064b0:	e7ec      	b.n	800648c <_malloc_r+0xb0>
 80064b2:	4623      	mov	r3, r4
 80064b4:	6864      	ldr	r4, [r4, #4]
 80064b6:	e7ac      	b.n	8006412 <_malloc_r+0x36>
 80064b8:	4634      	mov	r4, r6
 80064ba:	6876      	ldr	r6, [r6, #4]
 80064bc:	e7b4      	b.n	8006428 <_malloc_r+0x4c>
 80064be:	4613      	mov	r3, r2
 80064c0:	e7cc      	b.n	800645c <_malloc_r+0x80>
 80064c2:	230c      	movs	r3, #12
 80064c4:	4638      	mov	r0, r7
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	f000 f80e 	bl	80064e8 <__malloc_unlock>
 80064cc:	e797      	b.n	80063fe <_malloc_r+0x22>
 80064ce:	6025      	str	r5, [r4, #0]
 80064d0:	e7dc      	b.n	800648c <_malloc_r+0xb0>
 80064d2:	605b      	str	r3, [r3, #4]
 80064d4:	deff      	udf	#255	; 0xff
 80064d6:	bf00      	nop
 80064d8:	20000304 	.word	0x20000304

080064dc <__malloc_lock>:
 80064dc:	4801      	ldr	r0, [pc, #4]	; (80064e4 <__malloc_lock+0x8>)
 80064de:	f000 b87b 	b.w	80065d8 <__retarget_lock_acquire_recursive>
 80064e2:	bf00      	nop
 80064e4:	20000448 	.word	0x20000448

080064e8 <__malloc_unlock>:
 80064e8:	4801      	ldr	r0, [pc, #4]	; (80064f0 <__malloc_unlock+0x8>)
 80064ea:	f000 b876 	b.w	80065da <__retarget_lock_release_recursive>
 80064ee:	bf00      	nop
 80064f0:	20000448 	.word	0x20000448

080064f4 <siprintf>:
 80064f4:	b40e      	push	{r1, r2, r3}
 80064f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064fa:	b500      	push	{lr}
 80064fc:	b09c      	sub	sp, #112	; 0x70
 80064fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006500:	9002      	str	r0, [sp, #8]
 8006502:	9006      	str	r0, [sp, #24]
 8006504:	9107      	str	r1, [sp, #28]
 8006506:	9104      	str	r1, [sp, #16]
 8006508:	4808      	ldr	r0, [pc, #32]	; (800652c <siprintf+0x38>)
 800650a:	4909      	ldr	r1, [pc, #36]	; (8006530 <siprintf+0x3c>)
 800650c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006510:	9105      	str	r1, [sp, #20]
 8006512:	6800      	ldr	r0, [r0, #0]
 8006514:	a902      	add	r1, sp, #8
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	f000 f90a 	bl	8006730 <_svfiprintf_r>
 800651c:	2200      	movs	r2, #0
 800651e:	9b02      	ldr	r3, [sp, #8]
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	b01c      	add	sp, #112	; 0x70
 8006524:	f85d eb04 	ldr.w	lr, [sp], #4
 8006528:	b003      	add	sp, #12
 800652a:	4770      	bx	lr
 800652c:	20000070 	.word	0x20000070
 8006530:	ffff0208 	.word	0xffff0208

08006534 <memcmp>:
 8006534:	b510      	push	{r4, lr}
 8006536:	3901      	subs	r1, #1
 8006538:	4402      	add	r2, r0
 800653a:	4290      	cmp	r0, r2
 800653c:	d101      	bne.n	8006542 <memcmp+0xe>
 800653e:	2000      	movs	r0, #0
 8006540:	e005      	b.n	800654e <memcmp+0x1a>
 8006542:	7803      	ldrb	r3, [r0, #0]
 8006544:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006548:	42a3      	cmp	r3, r4
 800654a:	d001      	beq.n	8006550 <memcmp+0x1c>
 800654c:	1b18      	subs	r0, r3, r4
 800654e:	bd10      	pop	{r4, pc}
 8006550:	3001      	adds	r0, #1
 8006552:	e7f2      	b.n	800653a <memcmp+0x6>

08006554 <memset>:
 8006554:	4603      	mov	r3, r0
 8006556:	4402      	add	r2, r0
 8006558:	4293      	cmp	r3, r2
 800655a:	d100      	bne.n	800655e <memset+0xa>
 800655c:	4770      	bx	lr
 800655e:	f803 1b01 	strb.w	r1, [r3], #1
 8006562:	e7f9      	b.n	8006558 <memset+0x4>

08006564 <_sbrk_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	2300      	movs	r3, #0
 8006568:	4d05      	ldr	r5, [pc, #20]	; (8006580 <_sbrk_r+0x1c>)
 800656a:	4604      	mov	r4, r0
 800656c:	4608      	mov	r0, r1
 800656e:	602b      	str	r3, [r5, #0]
 8006570:	f7fc fc08 	bl	8002d84 <_sbrk>
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d102      	bne.n	800657e <_sbrk_r+0x1a>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	b103      	cbz	r3, 800657e <_sbrk_r+0x1a>
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	20000444 	.word	0x20000444

08006584 <__errno>:
 8006584:	4b01      	ldr	r3, [pc, #4]	; (800658c <__errno+0x8>)
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20000070 	.word	0x20000070

08006590 <__libc_init_array>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	2600      	movs	r6, #0
 8006594:	4d0c      	ldr	r5, [pc, #48]	; (80065c8 <__libc_init_array+0x38>)
 8006596:	4c0d      	ldr	r4, [pc, #52]	; (80065cc <__libc_init_array+0x3c>)
 8006598:	1b64      	subs	r4, r4, r5
 800659a:	10a4      	asrs	r4, r4, #2
 800659c:	42a6      	cmp	r6, r4
 800659e:	d109      	bne.n	80065b4 <__libc_init_array+0x24>
 80065a0:	f000 fbc6 	bl	8006d30 <_init>
 80065a4:	2600      	movs	r6, #0
 80065a6:	4d0a      	ldr	r5, [pc, #40]	; (80065d0 <__libc_init_array+0x40>)
 80065a8:	4c0a      	ldr	r4, [pc, #40]	; (80065d4 <__libc_init_array+0x44>)
 80065aa:	1b64      	subs	r4, r4, r5
 80065ac:	10a4      	asrs	r4, r4, #2
 80065ae:	42a6      	cmp	r6, r4
 80065b0:	d105      	bne.n	80065be <__libc_init_array+0x2e>
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b8:	4798      	blx	r3
 80065ba:	3601      	adds	r6, #1
 80065bc:	e7ee      	b.n	800659c <__libc_init_array+0xc>
 80065be:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c2:	4798      	blx	r3
 80065c4:	3601      	adds	r6, #1
 80065c6:	e7f2      	b.n	80065ae <__libc_init_array+0x1e>
 80065c8:	08006f28 	.word	0x08006f28
 80065cc:	08006f28 	.word	0x08006f28
 80065d0:	08006f28 	.word	0x08006f28
 80065d4:	08006f2c 	.word	0x08006f2c

080065d8 <__retarget_lock_acquire_recursive>:
 80065d8:	4770      	bx	lr

080065da <__retarget_lock_release_recursive>:
 80065da:	4770      	bx	lr

080065dc <strcpy>:
 80065dc:	4603      	mov	r3, r0
 80065de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065e2:	f803 2b01 	strb.w	r2, [r3], #1
 80065e6:	2a00      	cmp	r2, #0
 80065e8:	d1f9      	bne.n	80065de <strcpy+0x2>
 80065ea:	4770      	bx	lr

080065ec <_free_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4605      	mov	r5, r0
 80065f0:	2900      	cmp	r1, #0
 80065f2:	d040      	beq.n	8006676 <_free_r+0x8a>
 80065f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065f8:	1f0c      	subs	r4, r1, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	bfb8      	it	lt
 80065fe:	18e4      	addlt	r4, r4, r3
 8006600:	f7ff ff6c 	bl	80064dc <__malloc_lock>
 8006604:	4a1c      	ldr	r2, [pc, #112]	; (8006678 <_free_r+0x8c>)
 8006606:	6813      	ldr	r3, [r2, #0]
 8006608:	b933      	cbnz	r3, 8006618 <_free_r+0x2c>
 800660a:	6063      	str	r3, [r4, #4]
 800660c:	6014      	str	r4, [r2, #0]
 800660e:	4628      	mov	r0, r5
 8006610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006614:	f7ff bf68 	b.w	80064e8 <__malloc_unlock>
 8006618:	42a3      	cmp	r3, r4
 800661a:	d908      	bls.n	800662e <_free_r+0x42>
 800661c:	6820      	ldr	r0, [r4, #0]
 800661e:	1821      	adds	r1, r4, r0
 8006620:	428b      	cmp	r3, r1
 8006622:	bf01      	itttt	eq
 8006624:	6819      	ldreq	r1, [r3, #0]
 8006626:	685b      	ldreq	r3, [r3, #4]
 8006628:	1809      	addeq	r1, r1, r0
 800662a:	6021      	streq	r1, [r4, #0]
 800662c:	e7ed      	b.n	800660a <_free_r+0x1e>
 800662e:	461a      	mov	r2, r3
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	b10b      	cbz	r3, 8006638 <_free_r+0x4c>
 8006634:	42a3      	cmp	r3, r4
 8006636:	d9fa      	bls.n	800662e <_free_r+0x42>
 8006638:	6811      	ldr	r1, [r2, #0]
 800663a:	1850      	adds	r0, r2, r1
 800663c:	42a0      	cmp	r0, r4
 800663e:	d10b      	bne.n	8006658 <_free_r+0x6c>
 8006640:	6820      	ldr	r0, [r4, #0]
 8006642:	4401      	add	r1, r0
 8006644:	1850      	adds	r0, r2, r1
 8006646:	4283      	cmp	r3, r0
 8006648:	6011      	str	r1, [r2, #0]
 800664a:	d1e0      	bne.n	800660e <_free_r+0x22>
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4408      	add	r0, r1
 8006652:	6010      	str	r0, [r2, #0]
 8006654:	6053      	str	r3, [r2, #4]
 8006656:	e7da      	b.n	800660e <_free_r+0x22>
 8006658:	d902      	bls.n	8006660 <_free_r+0x74>
 800665a:	230c      	movs	r3, #12
 800665c:	602b      	str	r3, [r5, #0]
 800665e:	e7d6      	b.n	800660e <_free_r+0x22>
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	1821      	adds	r1, r4, r0
 8006664:	428b      	cmp	r3, r1
 8006666:	bf01      	itttt	eq
 8006668:	6819      	ldreq	r1, [r3, #0]
 800666a:	685b      	ldreq	r3, [r3, #4]
 800666c:	1809      	addeq	r1, r1, r0
 800666e:	6021      	streq	r1, [r4, #0]
 8006670:	6063      	str	r3, [r4, #4]
 8006672:	6054      	str	r4, [r2, #4]
 8006674:	e7cb      	b.n	800660e <_free_r+0x22>
 8006676:	bd38      	pop	{r3, r4, r5, pc}
 8006678:	20000304 	.word	0x20000304

0800667c <__ssputs_r>:
 800667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	461f      	mov	r7, r3
 8006682:	688e      	ldr	r6, [r1, #8]
 8006684:	4682      	mov	sl, r0
 8006686:	42be      	cmp	r6, r7
 8006688:	460c      	mov	r4, r1
 800668a:	4690      	mov	r8, r2
 800668c:	680b      	ldr	r3, [r1, #0]
 800668e:	d82c      	bhi.n	80066ea <__ssputs_r+0x6e>
 8006690:	898a      	ldrh	r2, [r1, #12]
 8006692:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006696:	d026      	beq.n	80066e6 <__ssputs_r+0x6a>
 8006698:	6965      	ldr	r5, [r4, #20]
 800669a:	6909      	ldr	r1, [r1, #16]
 800669c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066a0:	eba3 0901 	sub.w	r9, r3, r1
 80066a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066a8:	1c7b      	adds	r3, r7, #1
 80066aa:	444b      	add	r3, r9
 80066ac:	106d      	asrs	r5, r5, #1
 80066ae:	429d      	cmp	r5, r3
 80066b0:	bf38      	it	cc
 80066b2:	461d      	movcc	r5, r3
 80066b4:	0553      	lsls	r3, r2, #21
 80066b6:	d527      	bpl.n	8006708 <__ssputs_r+0x8c>
 80066b8:	4629      	mov	r1, r5
 80066ba:	f7ff fe8f 	bl	80063dc <_malloc_r>
 80066be:	4606      	mov	r6, r0
 80066c0:	b360      	cbz	r0, 800671c <__ssputs_r+0xa0>
 80066c2:	464a      	mov	r2, r9
 80066c4:	6921      	ldr	r1, [r4, #16]
 80066c6:	f000 faed 	bl	8006ca4 <memcpy>
 80066ca:	89a3      	ldrh	r3, [r4, #12]
 80066cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d4:	81a3      	strh	r3, [r4, #12]
 80066d6:	6126      	str	r6, [r4, #16]
 80066d8:	444e      	add	r6, r9
 80066da:	6026      	str	r6, [r4, #0]
 80066dc:	463e      	mov	r6, r7
 80066de:	6165      	str	r5, [r4, #20]
 80066e0:	eba5 0509 	sub.w	r5, r5, r9
 80066e4:	60a5      	str	r5, [r4, #8]
 80066e6:	42be      	cmp	r6, r7
 80066e8:	d900      	bls.n	80066ec <__ssputs_r+0x70>
 80066ea:	463e      	mov	r6, r7
 80066ec:	4632      	mov	r2, r6
 80066ee:	4641      	mov	r1, r8
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	f000 faaf 	bl	8006c54 <memmove>
 80066f6:	2000      	movs	r0, #0
 80066f8:	68a3      	ldr	r3, [r4, #8]
 80066fa:	1b9b      	subs	r3, r3, r6
 80066fc:	60a3      	str	r3, [r4, #8]
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	4433      	add	r3, r6
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006708:	462a      	mov	r2, r5
 800670a:	f000 fad9 	bl	8006cc0 <_realloc_r>
 800670e:	4606      	mov	r6, r0
 8006710:	2800      	cmp	r0, #0
 8006712:	d1e0      	bne.n	80066d6 <__ssputs_r+0x5a>
 8006714:	4650      	mov	r0, sl
 8006716:	6921      	ldr	r1, [r4, #16]
 8006718:	f7ff ff68 	bl	80065ec <_free_r>
 800671c:	230c      	movs	r3, #12
 800671e:	f8ca 3000 	str.w	r3, [sl]
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800672c:	81a3      	strh	r3, [r4, #12]
 800672e:	e7e9      	b.n	8006704 <__ssputs_r+0x88>

08006730 <_svfiprintf_r>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	4698      	mov	r8, r3
 8006736:	898b      	ldrh	r3, [r1, #12]
 8006738:	4607      	mov	r7, r0
 800673a:	061b      	lsls	r3, r3, #24
 800673c:	460d      	mov	r5, r1
 800673e:	4614      	mov	r4, r2
 8006740:	b09d      	sub	sp, #116	; 0x74
 8006742:	d50e      	bpl.n	8006762 <_svfiprintf_r+0x32>
 8006744:	690b      	ldr	r3, [r1, #16]
 8006746:	b963      	cbnz	r3, 8006762 <_svfiprintf_r+0x32>
 8006748:	2140      	movs	r1, #64	; 0x40
 800674a:	f7ff fe47 	bl	80063dc <_malloc_r>
 800674e:	6028      	str	r0, [r5, #0]
 8006750:	6128      	str	r0, [r5, #16]
 8006752:	b920      	cbnz	r0, 800675e <_svfiprintf_r+0x2e>
 8006754:	230c      	movs	r3, #12
 8006756:	603b      	str	r3, [r7, #0]
 8006758:	f04f 30ff 	mov.w	r0, #4294967295
 800675c:	e0d0      	b.n	8006900 <_svfiprintf_r+0x1d0>
 800675e:	2340      	movs	r3, #64	; 0x40
 8006760:	616b      	str	r3, [r5, #20]
 8006762:	2300      	movs	r3, #0
 8006764:	9309      	str	r3, [sp, #36]	; 0x24
 8006766:	2320      	movs	r3, #32
 8006768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800676c:	2330      	movs	r3, #48	; 0x30
 800676e:	f04f 0901 	mov.w	r9, #1
 8006772:	f8cd 800c 	str.w	r8, [sp, #12]
 8006776:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006918 <_svfiprintf_r+0x1e8>
 800677a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800677e:	4623      	mov	r3, r4
 8006780:	469a      	mov	sl, r3
 8006782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006786:	b10a      	cbz	r2, 800678c <_svfiprintf_r+0x5c>
 8006788:	2a25      	cmp	r2, #37	; 0x25
 800678a:	d1f9      	bne.n	8006780 <_svfiprintf_r+0x50>
 800678c:	ebba 0b04 	subs.w	fp, sl, r4
 8006790:	d00b      	beq.n	80067aa <_svfiprintf_r+0x7a>
 8006792:	465b      	mov	r3, fp
 8006794:	4622      	mov	r2, r4
 8006796:	4629      	mov	r1, r5
 8006798:	4638      	mov	r0, r7
 800679a:	f7ff ff6f 	bl	800667c <__ssputs_r>
 800679e:	3001      	adds	r0, #1
 80067a0:	f000 80a9 	beq.w	80068f6 <_svfiprintf_r+0x1c6>
 80067a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067a6:	445a      	add	r2, fp
 80067a8:	9209      	str	r2, [sp, #36]	; 0x24
 80067aa:	f89a 3000 	ldrb.w	r3, [sl]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 80a1 	beq.w	80068f6 <_svfiprintf_r+0x1c6>
 80067b4:	2300      	movs	r3, #0
 80067b6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067be:	f10a 0a01 	add.w	sl, sl, #1
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	9307      	str	r3, [sp, #28]
 80067c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067ca:	931a      	str	r3, [sp, #104]	; 0x68
 80067cc:	4654      	mov	r4, sl
 80067ce:	2205      	movs	r2, #5
 80067d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d4:	4850      	ldr	r0, [pc, #320]	; (8006918 <_svfiprintf_r+0x1e8>)
 80067d6:	f000 fa57 	bl	8006c88 <memchr>
 80067da:	9a04      	ldr	r2, [sp, #16]
 80067dc:	b9d8      	cbnz	r0, 8006816 <_svfiprintf_r+0xe6>
 80067de:	06d0      	lsls	r0, r2, #27
 80067e0:	bf44      	itt	mi
 80067e2:	2320      	movmi	r3, #32
 80067e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067e8:	0711      	lsls	r1, r2, #28
 80067ea:	bf44      	itt	mi
 80067ec:	232b      	movmi	r3, #43	; 0x2b
 80067ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067f2:	f89a 3000 	ldrb.w	r3, [sl]
 80067f6:	2b2a      	cmp	r3, #42	; 0x2a
 80067f8:	d015      	beq.n	8006826 <_svfiprintf_r+0xf6>
 80067fa:	4654      	mov	r4, sl
 80067fc:	2000      	movs	r0, #0
 80067fe:	f04f 0c0a 	mov.w	ip, #10
 8006802:	9a07      	ldr	r2, [sp, #28]
 8006804:	4621      	mov	r1, r4
 8006806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800680a:	3b30      	subs	r3, #48	; 0x30
 800680c:	2b09      	cmp	r3, #9
 800680e:	d94d      	bls.n	80068ac <_svfiprintf_r+0x17c>
 8006810:	b1b0      	cbz	r0, 8006840 <_svfiprintf_r+0x110>
 8006812:	9207      	str	r2, [sp, #28]
 8006814:	e014      	b.n	8006840 <_svfiprintf_r+0x110>
 8006816:	eba0 0308 	sub.w	r3, r0, r8
 800681a:	fa09 f303 	lsl.w	r3, r9, r3
 800681e:	4313      	orrs	r3, r2
 8006820:	46a2      	mov	sl, r4
 8006822:	9304      	str	r3, [sp, #16]
 8006824:	e7d2      	b.n	80067cc <_svfiprintf_r+0x9c>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	1d19      	adds	r1, r3, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	9103      	str	r1, [sp, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	bfbb      	ittet	lt
 8006832:	425b      	neglt	r3, r3
 8006834:	f042 0202 	orrlt.w	r2, r2, #2
 8006838:	9307      	strge	r3, [sp, #28]
 800683a:	9307      	strlt	r3, [sp, #28]
 800683c:	bfb8      	it	lt
 800683e:	9204      	strlt	r2, [sp, #16]
 8006840:	7823      	ldrb	r3, [r4, #0]
 8006842:	2b2e      	cmp	r3, #46	; 0x2e
 8006844:	d10c      	bne.n	8006860 <_svfiprintf_r+0x130>
 8006846:	7863      	ldrb	r3, [r4, #1]
 8006848:	2b2a      	cmp	r3, #42	; 0x2a
 800684a:	d134      	bne.n	80068b6 <_svfiprintf_r+0x186>
 800684c:	9b03      	ldr	r3, [sp, #12]
 800684e:	3402      	adds	r4, #2
 8006850:	1d1a      	adds	r2, r3, #4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	9203      	str	r2, [sp, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	bfb8      	it	lt
 800685a:	f04f 33ff 	movlt.w	r3, #4294967295
 800685e:	9305      	str	r3, [sp, #20]
 8006860:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800691c <_svfiprintf_r+0x1ec>
 8006864:	2203      	movs	r2, #3
 8006866:	4650      	mov	r0, sl
 8006868:	7821      	ldrb	r1, [r4, #0]
 800686a:	f000 fa0d 	bl	8006c88 <memchr>
 800686e:	b138      	cbz	r0, 8006880 <_svfiprintf_r+0x150>
 8006870:	2240      	movs	r2, #64	; 0x40
 8006872:	9b04      	ldr	r3, [sp, #16]
 8006874:	eba0 000a 	sub.w	r0, r0, sl
 8006878:	4082      	lsls	r2, r0
 800687a:	4313      	orrs	r3, r2
 800687c:	3401      	adds	r4, #1
 800687e:	9304      	str	r3, [sp, #16]
 8006880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006884:	2206      	movs	r2, #6
 8006886:	4826      	ldr	r0, [pc, #152]	; (8006920 <_svfiprintf_r+0x1f0>)
 8006888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800688c:	f000 f9fc 	bl	8006c88 <memchr>
 8006890:	2800      	cmp	r0, #0
 8006892:	d038      	beq.n	8006906 <_svfiprintf_r+0x1d6>
 8006894:	4b23      	ldr	r3, [pc, #140]	; (8006924 <_svfiprintf_r+0x1f4>)
 8006896:	bb1b      	cbnz	r3, 80068e0 <_svfiprintf_r+0x1b0>
 8006898:	9b03      	ldr	r3, [sp, #12]
 800689a:	3307      	adds	r3, #7
 800689c:	f023 0307 	bic.w	r3, r3, #7
 80068a0:	3308      	adds	r3, #8
 80068a2:	9303      	str	r3, [sp, #12]
 80068a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a6:	4433      	add	r3, r6
 80068a8:	9309      	str	r3, [sp, #36]	; 0x24
 80068aa:	e768      	b.n	800677e <_svfiprintf_r+0x4e>
 80068ac:	460c      	mov	r4, r1
 80068ae:	2001      	movs	r0, #1
 80068b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80068b4:	e7a6      	b.n	8006804 <_svfiprintf_r+0xd4>
 80068b6:	2300      	movs	r3, #0
 80068b8:	f04f 0c0a 	mov.w	ip, #10
 80068bc:	4619      	mov	r1, r3
 80068be:	3401      	adds	r4, #1
 80068c0:	9305      	str	r3, [sp, #20]
 80068c2:	4620      	mov	r0, r4
 80068c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068c8:	3a30      	subs	r2, #48	; 0x30
 80068ca:	2a09      	cmp	r2, #9
 80068cc:	d903      	bls.n	80068d6 <_svfiprintf_r+0x1a6>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0c6      	beq.n	8006860 <_svfiprintf_r+0x130>
 80068d2:	9105      	str	r1, [sp, #20]
 80068d4:	e7c4      	b.n	8006860 <_svfiprintf_r+0x130>
 80068d6:	4604      	mov	r4, r0
 80068d8:	2301      	movs	r3, #1
 80068da:	fb0c 2101 	mla	r1, ip, r1, r2
 80068de:	e7f0      	b.n	80068c2 <_svfiprintf_r+0x192>
 80068e0:	ab03      	add	r3, sp, #12
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	462a      	mov	r2, r5
 80068e6:	4638      	mov	r0, r7
 80068e8:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <_svfiprintf_r+0x1f8>)
 80068ea:	a904      	add	r1, sp, #16
 80068ec:	f3af 8000 	nop.w
 80068f0:	1c42      	adds	r2, r0, #1
 80068f2:	4606      	mov	r6, r0
 80068f4:	d1d6      	bne.n	80068a4 <_svfiprintf_r+0x174>
 80068f6:	89ab      	ldrh	r3, [r5, #12]
 80068f8:	065b      	lsls	r3, r3, #25
 80068fa:	f53f af2d 	bmi.w	8006758 <_svfiprintf_r+0x28>
 80068fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006900:	b01d      	add	sp, #116	; 0x74
 8006902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006906:	ab03      	add	r3, sp, #12
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	462a      	mov	r2, r5
 800690c:	4638      	mov	r0, r7
 800690e:	4b06      	ldr	r3, [pc, #24]	; (8006928 <_svfiprintf_r+0x1f8>)
 8006910:	a904      	add	r1, sp, #16
 8006912:	f000 f87d 	bl	8006a10 <_printf_i>
 8006916:	e7eb      	b.n	80068f0 <_svfiprintf_r+0x1c0>
 8006918:	08006ef2 	.word	0x08006ef2
 800691c:	08006ef8 	.word	0x08006ef8
 8006920:	08006efc 	.word	0x08006efc
 8006924:	00000000 	.word	0x00000000
 8006928:	0800667d 	.word	0x0800667d

0800692c <_printf_common>:
 800692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006930:	4616      	mov	r6, r2
 8006932:	4699      	mov	r9, r3
 8006934:	688a      	ldr	r2, [r1, #8]
 8006936:	690b      	ldr	r3, [r1, #16]
 8006938:	4607      	mov	r7, r0
 800693a:	4293      	cmp	r3, r2
 800693c:	bfb8      	it	lt
 800693e:	4613      	movlt	r3, r2
 8006940:	6033      	str	r3, [r6, #0]
 8006942:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006946:	460c      	mov	r4, r1
 8006948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800694c:	b10a      	cbz	r2, 8006952 <_printf_common+0x26>
 800694e:	3301      	adds	r3, #1
 8006950:	6033      	str	r3, [r6, #0]
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	0699      	lsls	r1, r3, #26
 8006956:	bf42      	ittt	mi
 8006958:	6833      	ldrmi	r3, [r6, #0]
 800695a:	3302      	addmi	r3, #2
 800695c:	6033      	strmi	r3, [r6, #0]
 800695e:	6825      	ldr	r5, [r4, #0]
 8006960:	f015 0506 	ands.w	r5, r5, #6
 8006964:	d106      	bne.n	8006974 <_printf_common+0x48>
 8006966:	f104 0a19 	add.w	sl, r4, #25
 800696a:	68e3      	ldr	r3, [r4, #12]
 800696c:	6832      	ldr	r2, [r6, #0]
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	42ab      	cmp	r3, r5
 8006972:	dc2b      	bgt.n	80069cc <_printf_common+0xa0>
 8006974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006978:	1e13      	subs	r3, r2, #0
 800697a:	6822      	ldr	r2, [r4, #0]
 800697c:	bf18      	it	ne
 800697e:	2301      	movne	r3, #1
 8006980:	0692      	lsls	r2, r2, #26
 8006982:	d430      	bmi.n	80069e6 <_printf_common+0xba>
 8006984:	4649      	mov	r1, r9
 8006986:	4638      	mov	r0, r7
 8006988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800698c:	47c0      	blx	r8
 800698e:	3001      	adds	r0, #1
 8006990:	d023      	beq.n	80069da <_printf_common+0xae>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	6922      	ldr	r2, [r4, #16]
 8006996:	f003 0306 	and.w	r3, r3, #6
 800699a:	2b04      	cmp	r3, #4
 800699c:	bf14      	ite	ne
 800699e:	2500      	movne	r5, #0
 80069a0:	6833      	ldreq	r3, [r6, #0]
 80069a2:	f04f 0600 	mov.w	r6, #0
 80069a6:	bf08      	it	eq
 80069a8:	68e5      	ldreq	r5, [r4, #12]
 80069aa:	f104 041a 	add.w	r4, r4, #26
 80069ae:	bf08      	it	eq
 80069b0:	1aed      	subeq	r5, r5, r3
 80069b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80069b6:	bf08      	it	eq
 80069b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069bc:	4293      	cmp	r3, r2
 80069be:	bfc4      	itt	gt
 80069c0:	1a9b      	subgt	r3, r3, r2
 80069c2:	18ed      	addgt	r5, r5, r3
 80069c4:	42b5      	cmp	r5, r6
 80069c6:	d11a      	bne.n	80069fe <_printf_common+0xd2>
 80069c8:	2000      	movs	r0, #0
 80069ca:	e008      	b.n	80069de <_printf_common+0xb2>
 80069cc:	2301      	movs	r3, #1
 80069ce:	4652      	mov	r2, sl
 80069d0:	4649      	mov	r1, r9
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c0      	blx	r8
 80069d6:	3001      	adds	r0, #1
 80069d8:	d103      	bne.n	80069e2 <_printf_common+0xb6>
 80069da:	f04f 30ff 	mov.w	r0, #4294967295
 80069de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e2:	3501      	adds	r5, #1
 80069e4:	e7c1      	b.n	800696a <_printf_common+0x3e>
 80069e6:	2030      	movs	r0, #48	; 0x30
 80069e8:	18e1      	adds	r1, r4, r3
 80069ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069f4:	4422      	add	r2, r4
 80069f6:	3302      	adds	r3, #2
 80069f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069fc:	e7c2      	b.n	8006984 <_printf_common+0x58>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4622      	mov	r2, r4
 8006a02:	4649      	mov	r1, r9
 8006a04:	4638      	mov	r0, r7
 8006a06:	47c0      	blx	r8
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d0e6      	beq.n	80069da <_printf_common+0xae>
 8006a0c:	3601      	adds	r6, #1
 8006a0e:	e7d9      	b.n	80069c4 <_printf_common+0x98>

08006a10 <_printf_i>:
 8006a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a14:	7e0f      	ldrb	r7, [r1, #24]
 8006a16:	4691      	mov	r9, r2
 8006a18:	2f78      	cmp	r7, #120	; 0x78
 8006a1a:	4680      	mov	r8, r0
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	469a      	mov	sl, r3
 8006a20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a26:	d807      	bhi.n	8006a38 <_printf_i+0x28>
 8006a28:	2f62      	cmp	r7, #98	; 0x62
 8006a2a:	d80a      	bhi.n	8006a42 <_printf_i+0x32>
 8006a2c:	2f00      	cmp	r7, #0
 8006a2e:	f000 80d5 	beq.w	8006bdc <_printf_i+0x1cc>
 8006a32:	2f58      	cmp	r7, #88	; 0x58
 8006a34:	f000 80c1 	beq.w	8006bba <_printf_i+0x1aa>
 8006a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a40:	e03a      	b.n	8006ab8 <_printf_i+0xa8>
 8006a42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a46:	2b15      	cmp	r3, #21
 8006a48:	d8f6      	bhi.n	8006a38 <_printf_i+0x28>
 8006a4a:	a101      	add	r1, pc, #4	; (adr r1, 8006a50 <_printf_i+0x40>)
 8006a4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a50:	08006aa9 	.word	0x08006aa9
 8006a54:	08006abd 	.word	0x08006abd
 8006a58:	08006a39 	.word	0x08006a39
 8006a5c:	08006a39 	.word	0x08006a39
 8006a60:	08006a39 	.word	0x08006a39
 8006a64:	08006a39 	.word	0x08006a39
 8006a68:	08006abd 	.word	0x08006abd
 8006a6c:	08006a39 	.word	0x08006a39
 8006a70:	08006a39 	.word	0x08006a39
 8006a74:	08006a39 	.word	0x08006a39
 8006a78:	08006a39 	.word	0x08006a39
 8006a7c:	08006bc3 	.word	0x08006bc3
 8006a80:	08006ae9 	.word	0x08006ae9
 8006a84:	08006b7d 	.word	0x08006b7d
 8006a88:	08006a39 	.word	0x08006a39
 8006a8c:	08006a39 	.word	0x08006a39
 8006a90:	08006be5 	.word	0x08006be5
 8006a94:	08006a39 	.word	0x08006a39
 8006a98:	08006ae9 	.word	0x08006ae9
 8006a9c:	08006a39 	.word	0x08006a39
 8006aa0:	08006a39 	.word	0x08006a39
 8006aa4:	08006b85 	.word	0x08006b85
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	1d1a      	adds	r2, r3, #4
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	602a      	str	r2, [r5, #0]
 8006ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e0a0      	b.n	8006bfe <_printf_i+0x1ee>
 8006abc:	6820      	ldr	r0, [r4, #0]
 8006abe:	682b      	ldr	r3, [r5, #0]
 8006ac0:	0607      	lsls	r7, r0, #24
 8006ac2:	f103 0104 	add.w	r1, r3, #4
 8006ac6:	6029      	str	r1, [r5, #0]
 8006ac8:	d501      	bpl.n	8006ace <_printf_i+0xbe>
 8006aca:	681e      	ldr	r6, [r3, #0]
 8006acc:	e003      	b.n	8006ad6 <_printf_i+0xc6>
 8006ace:	0646      	lsls	r6, r0, #25
 8006ad0:	d5fb      	bpl.n	8006aca <_printf_i+0xba>
 8006ad2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ad6:	2e00      	cmp	r6, #0
 8006ad8:	da03      	bge.n	8006ae2 <_printf_i+0xd2>
 8006ada:	232d      	movs	r3, #45	; 0x2d
 8006adc:	4276      	negs	r6, r6
 8006ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae2:	230a      	movs	r3, #10
 8006ae4:	4859      	ldr	r0, [pc, #356]	; (8006c4c <_printf_i+0x23c>)
 8006ae6:	e012      	b.n	8006b0e <_printf_i+0xfe>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	6820      	ldr	r0, [r4, #0]
 8006aec:	1d19      	adds	r1, r3, #4
 8006aee:	6029      	str	r1, [r5, #0]
 8006af0:	0605      	lsls	r5, r0, #24
 8006af2:	d501      	bpl.n	8006af8 <_printf_i+0xe8>
 8006af4:	681e      	ldr	r6, [r3, #0]
 8006af6:	e002      	b.n	8006afe <_printf_i+0xee>
 8006af8:	0641      	lsls	r1, r0, #25
 8006afa:	d5fb      	bpl.n	8006af4 <_printf_i+0xe4>
 8006afc:	881e      	ldrh	r6, [r3, #0]
 8006afe:	2f6f      	cmp	r7, #111	; 0x6f
 8006b00:	bf0c      	ite	eq
 8006b02:	2308      	moveq	r3, #8
 8006b04:	230a      	movne	r3, #10
 8006b06:	4851      	ldr	r0, [pc, #324]	; (8006c4c <_printf_i+0x23c>)
 8006b08:	2100      	movs	r1, #0
 8006b0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b0e:	6865      	ldr	r5, [r4, #4]
 8006b10:	2d00      	cmp	r5, #0
 8006b12:	bfa8      	it	ge
 8006b14:	6821      	ldrge	r1, [r4, #0]
 8006b16:	60a5      	str	r5, [r4, #8]
 8006b18:	bfa4      	itt	ge
 8006b1a:	f021 0104 	bicge.w	r1, r1, #4
 8006b1e:	6021      	strge	r1, [r4, #0]
 8006b20:	b90e      	cbnz	r6, 8006b26 <_printf_i+0x116>
 8006b22:	2d00      	cmp	r5, #0
 8006b24:	d04b      	beq.n	8006bbe <_printf_i+0x1ae>
 8006b26:	4615      	mov	r5, r2
 8006b28:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b2c:	fb03 6711 	mls	r7, r3, r1, r6
 8006b30:	5dc7      	ldrb	r7, [r0, r7]
 8006b32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b36:	4637      	mov	r7, r6
 8006b38:	42bb      	cmp	r3, r7
 8006b3a:	460e      	mov	r6, r1
 8006b3c:	d9f4      	bls.n	8006b28 <_printf_i+0x118>
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d10b      	bne.n	8006b5a <_printf_i+0x14a>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	07de      	lsls	r6, r3, #31
 8006b46:	d508      	bpl.n	8006b5a <_printf_i+0x14a>
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	6861      	ldr	r1, [r4, #4]
 8006b4c:	4299      	cmp	r1, r3
 8006b4e:	bfde      	ittt	le
 8006b50:	2330      	movle	r3, #48	; 0x30
 8006b52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b5a:	1b52      	subs	r2, r2, r5
 8006b5c:	6122      	str	r2, [r4, #16]
 8006b5e:	464b      	mov	r3, r9
 8006b60:	4621      	mov	r1, r4
 8006b62:	4640      	mov	r0, r8
 8006b64:	f8cd a000 	str.w	sl, [sp]
 8006b68:	aa03      	add	r2, sp, #12
 8006b6a:	f7ff fedf 	bl	800692c <_printf_common>
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d14a      	bne.n	8006c08 <_printf_i+0x1f8>
 8006b72:	f04f 30ff 	mov.w	r0, #4294967295
 8006b76:	b004      	add	sp, #16
 8006b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	f043 0320 	orr.w	r3, r3, #32
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	2778      	movs	r7, #120	; 0x78
 8006b86:	4832      	ldr	r0, [pc, #200]	; (8006c50 <_printf_i+0x240>)
 8006b88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	6829      	ldr	r1, [r5, #0]
 8006b90:	061f      	lsls	r7, r3, #24
 8006b92:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b96:	d402      	bmi.n	8006b9e <_printf_i+0x18e>
 8006b98:	065f      	lsls	r7, r3, #25
 8006b9a:	bf48      	it	mi
 8006b9c:	b2b6      	uxthmi	r6, r6
 8006b9e:	07df      	lsls	r7, r3, #31
 8006ba0:	bf48      	it	mi
 8006ba2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ba6:	6029      	str	r1, [r5, #0]
 8006ba8:	bf48      	it	mi
 8006baa:	6023      	strmi	r3, [r4, #0]
 8006bac:	b91e      	cbnz	r6, 8006bb6 <_printf_i+0x1a6>
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	f023 0320 	bic.w	r3, r3, #32
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	2310      	movs	r3, #16
 8006bb8:	e7a6      	b.n	8006b08 <_printf_i+0xf8>
 8006bba:	4824      	ldr	r0, [pc, #144]	; (8006c4c <_printf_i+0x23c>)
 8006bbc:	e7e4      	b.n	8006b88 <_printf_i+0x178>
 8006bbe:	4615      	mov	r5, r2
 8006bc0:	e7bd      	b.n	8006b3e <_printf_i+0x12e>
 8006bc2:	682b      	ldr	r3, [r5, #0]
 8006bc4:	6826      	ldr	r6, [r4, #0]
 8006bc6:	1d18      	adds	r0, r3, #4
 8006bc8:	6961      	ldr	r1, [r4, #20]
 8006bca:	6028      	str	r0, [r5, #0]
 8006bcc:	0635      	lsls	r5, r6, #24
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	d501      	bpl.n	8006bd6 <_printf_i+0x1c6>
 8006bd2:	6019      	str	r1, [r3, #0]
 8006bd4:	e002      	b.n	8006bdc <_printf_i+0x1cc>
 8006bd6:	0670      	lsls	r0, r6, #25
 8006bd8:	d5fb      	bpl.n	8006bd2 <_printf_i+0x1c2>
 8006bda:	8019      	strh	r1, [r3, #0]
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4615      	mov	r5, r2
 8006be0:	6123      	str	r3, [r4, #16]
 8006be2:	e7bc      	b.n	8006b5e <_printf_i+0x14e>
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	2100      	movs	r1, #0
 8006be8:	1d1a      	adds	r2, r3, #4
 8006bea:	602a      	str	r2, [r5, #0]
 8006bec:	681d      	ldr	r5, [r3, #0]
 8006bee:	6862      	ldr	r2, [r4, #4]
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 f849 	bl	8006c88 <memchr>
 8006bf6:	b108      	cbz	r0, 8006bfc <_printf_i+0x1ec>
 8006bf8:	1b40      	subs	r0, r0, r5
 8006bfa:	6060      	str	r0, [r4, #4]
 8006bfc:	6863      	ldr	r3, [r4, #4]
 8006bfe:	6123      	str	r3, [r4, #16]
 8006c00:	2300      	movs	r3, #0
 8006c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c06:	e7aa      	b.n	8006b5e <_printf_i+0x14e>
 8006c08:	462a      	mov	r2, r5
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	6923      	ldr	r3, [r4, #16]
 8006c10:	47d0      	blx	sl
 8006c12:	3001      	adds	r0, #1
 8006c14:	d0ad      	beq.n	8006b72 <_printf_i+0x162>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	079b      	lsls	r3, r3, #30
 8006c1a:	d413      	bmi.n	8006c44 <_printf_i+0x234>
 8006c1c:	68e0      	ldr	r0, [r4, #12]
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	4298      	cmp	r0, r3
 8006c22:	bfb8      	it	lt
 8006c24:	4618      	movlt	r0, r3
 8006c26:	e7a6      	b.n	8006b76 <_printf_i+0x166>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	4632      	mov	r2, r6
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	4640      	mov	r0, r8
 8006c30:	47d0      	blx	sl
 8006c32:	3001      	adds	r0, #1
 8006c34:	d09d      	beq.n	8006b72 <_printf_i+0x162>
 8006c36:	3501      	adds	r5, #1
 8006c38:	68e3      	ldr	r3, [r4, #12]
 8006c3a:	9903      	ldr	r1, [sp, #12]
 8006c3c:	1a5b      	subs	r3, r3, r1
 8006c3e:	42ab      	cmp	r3, r5
 8006c40:	dcf2      	bgt.n	8006c28 <_printf_i+0x218>
 8006c42:	e7eb      	b.n	8006c1c <_printf_i+0x20c>
 8006c44:	2500      	movs	r5, #0
 8006c46:	f104 0619 	add.w	r6, r4, #25
 8006c4a:	e7f5      	b.n	8006c38 <_printf_i+0x228>
 8006c4c:	08006f03 	.word	0x08006f03
 8006c50:	08006f14 	.word	0x08006f14

08006c54 <memmove>:
 8006c54:	4288      	cmp	r0, r1
 8006c56:	b510      	push	{r4, lr}
 8006c58:	eb01 0402 	add.w	r4, r1, r2
 8006c5c:	d902      	bls.n	8006c64 <memmove+0x10>
 8006c5e:	4284      	cmp	r4, r0
 8006c60:	4623      	mov	r3, r4
 8006c62:	d807      	bhi.n	8006c74 <memmove+0x20>
 8006c64:	1e43      	subs	r3, r0, #1
 8006c66:	42a1      	cmp	r1, r4
 8006c68:	d008      	beq.n	8006c7c <memmove+0x28>
 8006c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c72:	e7f8      	b.n	8006c66 <memmove+0x12>
 8006c74:	4601      	mov	r1, r0
 8006c76:	4402      	add	r2, r0
 8006c78:	428a      	cmp	r2, r1
 8006c7a:	d100      	bne.n	8006c7e <memmove+0x2a>
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c86:	e7f7      	b.n	8006c78 <memmove+0x24>

08006c88 <memchr>:
 8006c88:	4603      	mov	r3, r0
 8006c8a:	b510      	push	{r4, lr}
 8006c8c:	b2c9      	uxtb	r1, r1
 8006c8e:	4402      	add	r2, r0
 8006c90:	4293      	cmp	r3, r2
 8006c92:	4618      	mov	r0, r3
 8006c94:	d101      	bne.n	8006c9a <memchr+0x12>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e003      	b.n	8006ca2 <memchr+0x1a>
 8006c9a:	7804      	ldrb	r4, [r0, #0]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	428c      	cmp	r4, r1
 8006ca0:	d1f6      	bne.n	8006c90 <memchr+0x8>
 8006ca2:	bd10      	pop	{r4, pc}

08006ca4 <memcpy>:
 8006ca4:	440a      	add	r2, r1
 8006ca6:	4291      	cmp	r1, r2
 8006ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cac:	d100      	bne.n	8006cb0 <memcpy+0xc>
 8006cae:	4770      	bx	lr
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cb6:	4291      	cmp	r1, r2
 8006cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cbc:	d1f9      	bne.n	8006cb2 <memcpy+0xe>
 8006cbe:	bd10      	pop	{r4, pc}

08006cc0 <_realloc_r>:
 8006cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	4614      	mov	r4, r2
 8006cc8:	460e      	mov	r6, r1
 8006cca:	b921      	cbnz	r1, 8006cd6 <_realloc_r+0x16>
 8006ccc:	4611      	mov	r1, r2
 8006cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd2:	f7ff bb83 	b.w	80063dc <_malloc_r>
 8006cd6:	b92a      	cbnz	r2, 8006ce4 <_realloc_r+0x24>
 8006cd8:	f7ff fc88 	bl	80065ec <_free_r>
 8006cdc:	4625      	mov	r5, r4
 8006cde:	4628      	mov	r0, r5
 8006ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce4:	f000 f81b 	bl	8006d1e <_malloc_usable_size_r>
 8006ce8:	4284      	cmp	r4, r0
 8006cea:	4607      	mov	r7, r0
 8006cec:	d802      	bhi.n	8006cf4 <_realloc_r+0x34>
 8006cee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006cf2:	d812      	bhi.n	8006d1a <_realloc_r+0x5a>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	f7ff fb70 	bl	80063dc <_malloc_r>
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d0ed      	beq.n	8006cde <_realloc_r+0x1e>
 8006d02:	42bc      	cmp	r4, r7
 8006d04:	4622      	mov	r2, r4
 8006d06:	4631      	mov	r1, r6
 8006d08:	bf28      	it	cs
 8006d0a:	463a      	movcs	r2, r7
 8006d0c:	f7ff ffca 	bl	8006ca4 <memcpy>
 8006d10:	4631      	mov	r1, r6
 8006d12:	4640      	mov	r0, r8
 8006d14:	f7ff fc6a 	bl	80065ec <_free_r>
 8006d18:	e7e1      	b.n	8006cde <_realloc_r+0x1e>
 8006d1a:	4635      	mov	r5, r6
 8006d1c:	e7df      	b.n	8006cde <_realloc_r+0x1e>

08006d1e <_malloc_usable_size_r>:
 8006d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d22:	1f18      	subs	r0, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	bfbc      	itt	lt
 8006d28:	580b      	ldrlt	r3, [r1, r0]
 8006d2a:	18c0      	addlt	r0, r0, r3
 8006d2c:	4770      	bx	lr
	...

08006d30 <_init>:
 8006d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d32:	bf00      	nop
 8006d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d36:	bc08      	pop	{r3}
 8006d38:	469e      	mov	lr, r3
 8006d3a:	4770      	bx	lr

08006d3c <_fini>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	bf00      	nop
 8006d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d42:	bc08      	pop	{r3}
 8006d44:	469e      	mov	lr, r3
 8006d46:	4770      	bx	lr
