
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007208  08007208  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007208  08007208  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007208  08007208  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000074  08007284  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08007284  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e87  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003645  00000000  00000000  00032f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  000365b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ede  00000000  00000000  000378e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa45  00000000  00000000  000387c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019dec  00000000  00000000  0005320b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008db54  00000000  00000000  0006cff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005404  00000000  00000000  000fab4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000fff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006fe4 	.word	0x08006fe4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006fe4 	.word	0x08006fe4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__aeabi_d2uiz>:
 8000900:	004a      	lsls	r2, r1, #1
 8000902:	d211      	bcs.n	8000928 <__aeabi_d2uiz+0x28>
 8000904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000908:	d211      	bcs.n	800092e <__aeabi_d2uiz+0x2e>
 800090a:	d50d      	bpl.n	8000928 <__aeabi_d2uiz+0x28>
 800090c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000914:	d40e      	bmi.n	8000934 <__aeabi_d2uiz+0x34>
 8000916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d102      	bne.n	800093a <__aeabi_d2uiz+0x3a>
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	4770      	bx	lr
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	4770      	bx	lr

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f002 fbda 	bl	80030fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f813 	bl	8000972 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f000 f9b0 	bl	8000cb0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000950:	f000 f8e4 	bl	8000b1c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000954:	f000 f852 	bl	80009fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000958:	f000 f92c 	bl	8000bb4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800095c:	f000 f954 	bl	8000c08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000960:	f000 f97c 	bl	8000c5c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000964:	f000 f878 	bl	8000a58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  init();
 8000968:	f002 f8e0 	bl	8002b2c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  loop();
 800096c:	f002 f916 	bl	8002b9c <loop>
 8000970:	e7fc      	b.n	800096c <main+0x2c>

08000972 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b090      	sub	sp, #64	; 0x40
 8000976:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	2228      	movs	r2, #40	; 0x28
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f005 ff41 	bl	8006808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800099c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a2:	2301      	movs	r3, #1
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 fc4c 	bl	8004258 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009c6:	f000 fa0f 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ce:	2302      	movs	r3, #2
 80009d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2102      	movs	r1, #2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 feb9 	bl	800475c <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009f0:	f000 f9fa 	bl	8000de8 <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3740      	adds	r7, #64	; 0x40
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a02:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <MX_I2C1_Init+0x54>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x58>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a3a:	f002 ff71 	bl	8003920 <HAL_I2C_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a44:	f000 f9d0 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000090 	.word	0x20000090
 8000a50:	40005400 	.word	0x40005400
 8000a54:	000186a0 	.word	0x000186a0

08000a58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a76:	4a28      	ldr	r2, [pc, #160]	; (8000b18 <MX_TIM1_Init+0xc0>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a7c:	2247      	movs	r2, #71	; 0x47
 8000a7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000aa0:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000aa2:	f004 f88b 	bl	8004bbc <HAL_TIM_IC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000aac:	f000 f99c 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4619      	mov	r1, r3
 8000abe:	4815      	ldr	r0, [pc, #84]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000ac0:	f004 fece 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000aca:	f000 f98d 	bl	8000de8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000ae6:	f004 facd 	bl	8005084 <HAL_TIM_IC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000af0:	f000 f97a 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	220c      	movs	r2, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <MX_TIM1_Init+0xbc>)
 8000afc:	f004 fac2 	bl	8005084 <HAL_TIM_IC_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8000b06:	f000 f96f 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000e4 	.word	0x200000e4
 8000b18:	40012c00 	.word	0x40012c00

08000b1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b42:	2263      	movs	r2, #99	; 0x63
 8000b44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72-1;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b4e:	2247      	movs	r2, #71	; 0x47
 8000b50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b5e:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b60:	f003 ff8a 	bl	8004a78 <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 f93d 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b7c:	f004 fb1e 	bl	80051bc <HAL_TIM_ConfigClockSource>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000b86:	f000 f92f 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b98:	f004 fe62 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000ba2:	f000 f921 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000012c 	.word	0x2000012c

08000bb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <MX_USART1_UART_Init+0x50>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bdc:	220c      	movs	r2, #12
 8000bde:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bee:	f004 fea7 	bl	8005940 <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000bf8:	f000 f8f6 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000174 	.word	0x20000174
 8000c04:	40013800 	.word	0x40013800

08000c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <MX_USART2_UART_Init+0x50>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c14:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c40:	f004 fe7e 	bl	8005940 <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c4a:	f000 f8cd 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200001bc 	.word	0x200001bc
 8000c58:	40004400 	.word	0x40004400

08000c5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <MX_USART3_UART_Init+0x50>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_USART3_UART_Init+0x4c>)
 8000c94:	f004 fe54 	bl	8005940 <HAL_UART_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c9e:	f000 f8a3 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000204 	.word	0x20000204
 8000cac:	40004800 	.word	0x40004800

08000cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a43      	ldr	r2, [pc, #268]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cdc:	4b3e      	ldr	r3, [pc, #248]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a3d      	ldr	r2, [pc, #244]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000ce2:	f043 0320 	orr.w	r3, r3, #32
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b3b      	ldr	r3, [pc, #236]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0320 	and.w	r3, r3, #32
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a37      	ldr	r2, [pc, #220]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b35      	ldr	r3, [pc, #212]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a31      	ldr	r2, [pc, #196]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <MX_GPIO_Init+0x128>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2a:	482c      	ldr	r0, [pc, #176]	; (8000ddc <MX_GPIO_Init+0x12c>)
 8000d2c:	f002 fdc7 	bl	80038be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2160      	movs	r1, #96	; 0x60
 8000d34:	482a      	ldr	r0, [pc, #168]	; (8000de0 <MX_GPIO_Init+0x130>)
 8000d36:	f002 fdc2 	bl	80038be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f243 0102 	movw	r1, #12290	; 0x3002
 8000d40:	4828      	ldr	r0, [pc, #160]	; (8000de4 <MX_GPIO_Init+0x134>)
 8000d42:	f002 fdbc 	bl	80038be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481f      	ldr	r0, [pc, #124]	; (8000ddc <MX_GPIO_Init+0x12c>)
 8000d60:	f002 fc12 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d64:	2310      	movs	r3, #16
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4619      	mov	r1, r3
 8000d76:	481a      	ldr	r0, [pc, #104]	; (8000de0 <MX_GPIO_Init+0x130>)
 8000d78:	f002 fc06 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d7c:	2360      	movs	r3, #96	; 0x60
 8000d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	4813      	ldr	r0, [pc, #76]	; (8000de0 <MX_GPIO_Init+0x130>)
 8000d94:	f002 fbf8 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4619      	mov	r1, r3
 8000daa:	480e      	ldr	r0, [pc, #56]	; (8000de4 <MX_GPIO_Init+0x134>)
 8000dac:	f002 fbec 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13;
 8000db0:	f243 0302 	movw	r3, #12290	; 0x3002
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <MX_GPIO_Init+0x134>)
 8000dca:	f002 fbdd 	bl	8003588 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40010800 	.word	0x40010800
 8000de4:	40010c00 	.word	0x40010c00

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <button_init>:
	uint16_t pin;
} button[NUMBER_OF_BUTTON];
/*
 * button[0]: indoor-open button
 * */
void button_init(void) {
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_OF_BUTTON; i++) {
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	e04f      	b.n	8000ea0 <button_init+0xac>
		button[i].reg[0] = button[i].reg[1] = button[i].reg[2] = RELEASE;
 8000e00:	492e      	ldr	r1, [pc, #184]	; (8000ebc <button_init+0xc8>)
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	3302      	adds	r3, #2
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	4929      	ldr	r1, [pc, #164]	; (8000ebc <button_init+0xc8>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	440b      	add	r3, r1
 8000e22:	3302      	adds	r3, #2
 8000e24:	7818      	ldrb	r0, [r3, #0]
 8000e26:	4925      	ldr	r1, [pc, #148]	; (8000ebc <button_init+0xc8>)
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	440b      	add	r3, r1
 8000e34:	3301      	adds	r3, #1
 8000e36:	4602      	mov	r2, r0
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	4920      	ldr	r1, [pc, #128]	; (8000ebc <button_init+0xc8>)
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	3301      	adds	r3, #1
 8000e4a:	7818      	ldrb	r0, [r3, #0]
 8000e4c:	491b      	ldr	r1, [pc, #108]	; (8000ebc <button_init+0xc8>)
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	701a      	strb	r2, [r3, #0]
		button[i].is_long_pressed = 0;
 8000e5e:	4917      	ldr	r1, [pc, #92]	; (8000ebc <button_init+0xc8>)
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
		button[i].is_pressed = 0;
 8000e72:	4912      	ldr	r1, [pc, #72]	; (8000ebc <button_init+0xc8>)
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	440b      	add	r3, r1
 8000e80:	3303      	adds	r3, #3
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
		button[i].timer = LONG_PRESSED_TIME;
 8000e86:	490d      	ldr	r1, [pc, #52]	; (8000ebc <button_init+0xc8>)
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	440b      	add	r3, r1
 8000e94:	3308      	adds	r3, #8
 8000e96:	2296      	movs	r2, #150	; 0x96
 8000e98:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_BUTTON; i++) {
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	ddac      	ble.n	8000e00 <button_init+0xc>
	}
	// port and pin were matched by hand
	button[0].port = BUTTON_PORT;
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <button_init+0xc8>)
 8000ea8:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <button_init+0xcc>)
 8000eaa:	60da      	str	r2, [r3, #12]
	button[0].pin = BUTTON_PIN;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <button_init+0xc8>)
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	821a      	strh	r2, [r3, #16]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	2000024c 	.word	0x2000024c
 8000ec0:	40010800 	.word	0x40010800

08000ec4 <button_read>:
/*
 * @brief:	read the value of all buttons
 * @para:	none
 * @retval:	none
 * */
void button_read(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_BUTTON; i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	e0d5      	b.n	800107c <button_read+0x1b8>
		button[i].reg[0] = button[i].reg[1];
 8000ed0:	496f      	ldr	r1, [pc, #444]	; (8001090 <button_read+0x1cc>)
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	440b      	add	r3, r1
 8000ede:	3301      	adds	r3, #1
 8000ee0:	7818      	ldrb	r0, [r3, #0]
 8000ee2:	496b      	ldr	r1, [pc, #428]	; (8001090 <button_read+0x1cc>)
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	701a      	strb	r2, [r3, #0]
		button[i].reg[1] = button[i].reg[2];
 8000ef4:	4966      	ldr	r1, [pc, #408]	; (8001090 <button_read+0x1cc>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	3302      	adds	r3, #2
 8000f04:	7818      	ldrb	r0, [r3, #0]
 8000f06:	4962      	ldr	r1, [pc, #392]	; (8001090 <button_read+0x1cc>)
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	3301      	adds	r3, #1
 8000f16:	4602      	mov	r2, r0
 8000f18:	701a      	strb	r2, [r3, #0]
		button[i].reg[2] = HAL_GPIO_ReadPin(button[i].port, button[i].pin);
 8000f1a:	495d      	ldr	r1, [pc, #372]	; (8001090 <button_read+0x1cc>)
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	330c      	adds	r3, #12
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	4958      	ldr	r1, [pc, #352]	; (8001090 <button_read+0x1cc>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	3310      	adds	r3, #16
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f002 fca6 	bl	8003890 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4618      	mov	r0, r3
 8000f48:	4951      	ldr	r1, [pc, #324]	; (8001090 <button_read+0x1cc>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	3302      	adds	r3, #2
 8000f58:	4602      	mov	r2, r0
 8000f5a:	701a      	strb	r2, [r3, #0]
		if (button[i].reg[0] == button[i].reg[1]
 8000f5c:	494c      	ldr	r1, [pc, #304]	; (8001090 <button_read+0x1cc>)
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	7819      	ldrb	r1, [r3, #0]
 8000f6c:	4848      	ldr	r0, [pc, #288]	; (8001090 <button_read+0x1cc>)
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4403      	add	r3, r0
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4299      	cmp	r1, r3
 8000f80:	d179      	bne.n	8001076 <button_read+0x1b2>
				&& button[i].reg[1] == button[i].reg[2]) {
 8000f82:	4943      	ldr	r1, [pc, #268]	; (8001090 <button_read+0x1cc>)
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	3301      	adds	r3, #1
 8000f92:	7819      	ldrb	r1, [r3, #0]
 8000f94:	483e      	ldr	r0, [pc, #248]	; (8001090 <button_read+0x1cc>)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4403      	add	r3, r0
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4299      	cmp	r1, r3
 8000fa8:	d165      	bne.n	8001076 <button_read+0x1b2>
			//stable state, not bouncing
			if (button[i].reg[2] == PRESSED) {
 8000faa:	4939      	ldr	r1, [pc, #228]	; (8001090 <button_read+0x1cc>)
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	3302      	adds	r3, #2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d133      	bne.n	8001028 <button_read+0x164>
				button[i].is_pressed = 1;
 8000fc0:	4933      	ldr	r1, [pc, #204]	; (8001090 <button_read+0x1cc>)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	3303      	adds	r3, #3
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
				//decrease counter to toggle is_long_pressed flag
				if (button[i].timer > 0) {
 8000fd4:	492e      	ldr	r1, [pc, #184]	; (8001090 <button_read+0x1cc>)
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3308      	adds	r3, #8
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d013      	beq.n	8001012 <button_read+0x14e>
					button[i].timer--;
 8000fea:	4929      	ldr	r1, [pc, #164]	; (8001090 <button_read+0x1cc>)
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	1e59      	subs	r1, r3, #1
 8000ffe:	4824      	ldr	r0, [pc, #144]	; (8001090 <button_read+0x1cc>)
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4403      	add	r3, r0
 800100c:	3308      	adds	r3, #8
 800100e:	6019      	str	r1, [r3, #0]
 8001010:	e031      	b.n	8001076 <button_read+0x1b2>
				} else {
					button[i].is_long_pressed = 1;
 8001012:	491f      	ldr	r1, [pc, #124]	; (8001090 <button_read+0x1cc>)
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	3304      	adds	r3, #4
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e026      	b.n	8001076 <button_read+0x1b2>
				}
			} else {
				button[i].is_long_pressed = button[i].is_pressed = 0;
 8001028:	4919      	ldr	r1, [pc, #100]	; (8001090 <button_read+0x1cc>)
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3303      	adds	r3, #3
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	4914      	ldr	r1, [pc, #80]	; (8001090 <button_read+0x1cc>)
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	3303      	adds	r3, #3
 800104c:	7818      	ldrb	r0, [r3, #0]
 800104e:	4910      	ldr	r1, [pc, #64]	; (8001090 <button_read+0x1cc>)
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3304      	adds	r3, #4
 800105e:	4602      	mov	r2, r0
 8001060:	701a      	strb	r2, [r3, #0]
				button[i].timer = LONG_PRESSED_TIME;
 8001062:	490b      	ldr	r1, [pc, #44]	; (8001090 <button_read+0x1cc>)
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3308      	adds	r3, #8
 8001072:	2296      	movs	r2, #150	; 0x96
 8001074:	601a      	str	r2, [r3, #0]
	for (unsigned i = 0; i < NUMBER_OF_BUTTON; i++) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3301      	adds	r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f43f af26 	beq.w	8000ed0 <button_read+0xc>
			}
		}
	}
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000024c 	.word	0x2000024c

08001094 <is_button_pressed>:
/*
 * @brief:	return the is_pressed flag
 * @para:	i - id of button
 * @retval:	is_pressed (0: released, 1: pressed)
 * */
bool is_button_pressed(unsigned i) {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	if (i >= NUMBER_OF_BUTTON)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <is_button_pressed+0x12>
		return ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e008      	b.n	80010b8 <is_button_pressed+0x24>
	return button[i].is_pressed;
 80010a6:	4907      	ldr	r1, [pc, #28]	; (80010c4 <is_button_pressed+0x30>)
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3303      	adds	r3, #3
 80010b6:	781b      	ldrb	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000024c 	.word	0x2000024c

080010c8 <bz_alarm>:
#include"my_buzzer.h"

static void bz_on(void);
static void bz_off(void);

void bz_alarm(void){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	sch_add_task(bz_on, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <bz_alarm+0x20>)
 80010d2:	f001 fab9 	bl	8002648 <sch_add_task>
	sch_add_task(bz_off, ONE_SECOND, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <bz_alarm+0x24>)
 80010de:	f001 fab3 	bl	8002648 <sch_add_task>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	080010f1 	.word	0x080010f1
 80010ec:	08001109 	.word	0x08001109

080010f0 <bz_on>:

static void bz_on(void){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, 1);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fa:	4802      	ldr	r0, [pc, #8]	; (8001104 <bz_on+0x14>)
 80010fc:	f002 fbdf 	bl	80038be <HAL_GPIO_WritePin>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40010c00 	.word	0x40010c00

08001108 <bz_off>:

static void bz_off(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001112:	4802      	ldr	r0, [pc, #8]	; (800111c <bz_off+0x14>)
 8001114:	f002 fbd3 	bl	80038be <HAL_GPIO_WritePin>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40010c00 	.word	0x40010c00

08001120 <esp32_init>:
#define LOCK_CMD	"LOCK:0#"
#define ESP_BUF_MAX	7
static uint8_t esp32_buffer[ESP_BUF_MAX];
static uint8_t esp32_idx = 0;
static bool esp32_flag = 0;
void esp32_init(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	uart_esp32_init();
 8001124:	f001 fd4e 	bl	8002bc4 <uart_esp32_init>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <esp32_receive_data>:

void esp32_receive_data(uint8_t uart_data3) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	esp32_buffer[esp32_idx++] = uart_data3;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <esp32_receive_data+0x4c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	b2d1      	uxtb	r1, r2
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <esp32_receive_data+0x4c>)
 8001140:	7011      	strb	r1, [r2, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <esp32_receive_data+0x50>)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	5453      	strb	r3, [r2, r1]
	if (esp32_buffer[esp32_idx - 1] == '#') {
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <esp32_receive_data+0x4c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <esp32_receive_data+0x50>)
 8001152:	5cd3      	ldrb	r3, [r2, r3]
 8001154:	2b23      	cmp	r3, #35	; 0x23
 8001156:	d102      	bne.n	800115e <esp32_receive_data+0x32>
		esp32_flag = 1;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <esp32_receive_data+0x54>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
	}
	if (esp32_idx >= ESP_BUF_MAX) {
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <esp32_receive_data+0x4c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <esp32_receive_data+0x40>
		esp32_idx = 0;
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <esp32_receive_data+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
	}
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000267 	.word	0x20000267
 800117c:	20000260 	.word	0x20000260
 8001180:	20000268 	.word	0x20000268

08001184 <esp32_get_flag>:
bool esp32_get_flag(void) {
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	return esp32_flag;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <esp32_get_flag+0x10>)
 800118a:	781b      	ldrb	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	20000268 	.word	0x20000268

08001198 <esp32_reset_flag>:
void esp32_reset_flag(void){
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	esp32_flag =0;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <esp32_reset_flag+0x14>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000268 	.word	0x20000268

080011b0 <esp32_send_lock>:
void esp32_send_lock(bool lock_status) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	if (lock_status) {
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d010      	beq.n	80011e2 <esp32_send_lock+0x32>
		char str[10];
		uint8_t len = sprintf(str, "LOCK:1#");
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4911      	ldr	r1, [pc, #68]	; (800120c <esp32_send_lock+0x5c>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	f005 faee 	bl	80067a8 <siprintf>
 80011cc:	4603      	mov	r3, r0
 80011ce:	77bb      	strb	r3, [r7, #30]
		HAL_UART_Transmit(&huart3, (void*) str, len, 100);
 80011d0:	7fbb      	ldrb	r3, [r7, #30]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	f107 0114 	add.w	r1, r7, #20
 80011d8:	2364      	movs	r3, #100	; 0x64
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <esp32_send_lock+0x60>)
 80011dc:	f004 fc00 	bl	80059e0 <HAL_UART_Transmit>
	} else {
		char str[10];
		uint8_t len = sprintf(str, "LOCK:0#");
		HAL_UART_Transmit(&huart3, (void*) str, len, 100);
	}
}
 80011e0:	e00f      	b.n	8001202 <esp32_send_lock+0x52>
		uint8_t len = sprintf(str, "LOCK:0#");
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	490b      	ldr	r1, [pc, #44]	; (8001214 <esp32_send_lock+0x64>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f005 fadd 	bl	80067a8 <siprintf>
 80011ee:	4603      	mov	r3, r0
 80011f0:	77fb      	strb	r3, [r7, #31]
		HAL_UART_Transmit(&huart3, (void*) str, len, 100);
 80011f2:	7ffb      	ldrb	r3, [r7, #31]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f107 0108 	add.w	r1, r7, #8
 80011fa:	2364      	movs	r3, #100	; 0x64
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <esp32_send_lock+0x60>)
 80011fe:	f004 fbef 	bl	80059e0 <HAL_UART_Transmit>
}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	08006ffc 	.word	0x08006ffc
 8001210:	20000204 	.word	0x20000204
 8001214:	08007004 	.word	0x08007004

08001218 <esp32_send_fingerID>:
void esp32_send_people(uint8_t people_cnt) {
	char str[10];
	uint8_t len = sprintf(str, "PEO:%d#", people_cnt);
	HAL_UART_Transmit(&huart3, (void*) str, len, 100);
}
void esp32_send_fingerID(uint16_t fingerID) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
	char str[10];
	uint8_t len = sprintf(str, "ID:%d#", fingerID);
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4908      	ldr	r1, [pc, #32]	; (800124c <esp32_send_fingerID+0x34>)
 800122a:	4618      	mov	r0, r3
 800122c:	f005 fabc 	bl	80067a8 <siprintf>
 8001230:	4603      	mov	r3, r0
 8001232:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart3, (void*) str, len, 100);
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	b29a      	uxth	r2, r3
 8001238:	f107 010c 	add.w	r1, r7, #12
 800123c:	2364      	movs	r3, #100	; 0x64
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <esp32_send_fingerID+0x38>)
 8001240:	f004 fbce 	bl	80059e0 <HAL_UART_Transmit>
}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	08007014 	.word	0x08007014
 8001250:	20000204 	.word	0x20000204

08001254 <esp32_send_sleep>:
void esp32_send_sleep(uint32_t sleep_period) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	char str[10];
	uint8_t len = sprintf(str, "SLP:%lu#", sleep_period);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4909      	ldr	r1, [pc, #36]	; (8001288 <esp32_send_sleep+0x34>)
 8001264:	4618      	mov	r0, r3
 8001266:	f005 fa9f 	bl	80067a8 <siprintf>
 800126a:	4603      	mov	r3, r0
 800126c:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart3, (void*) str, len, 100);
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	b29a      	uxth	r2, r3
 8001272:	f107 010c 	add.w	r1, r7, #12
 8001276:	2364      	movs	r3, #100	; 0x64
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <esp32_send_sleep+0x38>)
 800127a:	f004 fbb1 	bl	80059e0 <HAL_UART_Transmit>
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	0800701c 	.word	0x0800701c
 800128c:	20000204 	.word	0x20000204

08001290 <fp_init>:
static bool merge_finger(void);
static void fp_reset_timer(void);
static bool store_finger(void);
static bool search_finger(void);

void fp_init(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	uart_fp_init();
 8001294:	f001 fc88 	bl	8002ba8 <uart_fp_init>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <fg_get_id>:

uint16_t fg_get_id(void){
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	return page_id;
 80012a0:	4b02      	ldr	r3, [pc, #8]	; (80012ac <fg_get_id+0x10>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	2000029c 	.word	0x2000029c

080012b0 <fp_search>:
bool fp_search(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	fp_reset_timer();
 80012b4:	f000 f892 	bl	80013dc <fp_reset_timer>
	get_finger(2);
 80012b8:	2002      	movs	r0, #2
 80012ba:	f000 f8ae 	bl	800141a <get_finger>
	if (merge_finger()) {
 80012be:	f000 f899 	bl	80013f4 <merge_finger>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <fp_search+0x26>
		if (search_finger()) {
 80012c8:	f000 f830 	bl	800132c <search_finger>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <fp_search+0x26>
			return 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <fp_search+0x28>
		}
	}
	return 0;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	bd80      	pop	{r7, pc}

080012dc <fp_enroll>:
bool fp_enroll(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	fp_reset_timer();
 80012e0:	f000 f87c 	bl	80013dc <fp_reset_timer>
	get_finger(2);
 80012e4:	2002      	movs	r0, #2
 80012e6:	f000 f898 	bl	800141a <get_finger>
	if (merge_finger()) {
 80012ea:	f000 f883 	bl	80013f4 <merge_finger>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d006      	beq.n	8001302 <fp_enroll+0x26>
		if (store_finger()) {
 80012f4:	f000 f846 	bl	8001384 <store_finger>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <fp_enroll+0x26>
			return 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <fp_enroll+0x28>
		}
	}
	return 0;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	bd80      	pop	{r7, pc}

08001308 <fp_run_timer>:
void fp_run_timer(void) {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	if (finger_timer > 0) {
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <fp_run_timer+0x20>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <fp_run_timer+0x18>
		finger_timer--;
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <fp_run_timer+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	3b01      	subs	r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b02      	ldr	r3, [pc, #8]	; (8001328 <fp_run_timer+0x20>)
 800131e:	701a      	strb	r2, [r3, #0]
	}
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000000 	.word	0x20000000

0800132c <search_finger>:
static bool search_finger(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
	ins_search_flag = 1;
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <search_finger+0x50>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
	uint8_t data[5] = { 0x01, 0x00, 0x00, 0x00, 0x63 };
 8001338:	4a11      	ldr	r2, [pc, #68]	; (8001380 <search_finger+0x54>)
 800133a:	463b      	mov	r3, r7
 800133c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001340:	6018      	str	r0, [r3, #0]
 8001342:	3304      	adds	r3, #4
 8001344:	7019      	strb	r1, [r3, #0]
	build_ins(INS_SEARCH, 5, data);
 8001346:	463b      	mov	r3, r7
 8001348:	461a      	mov	r2, r3
 800134a:	2105      	movs	r1, #5
 800134c:	2004      	movs	r0, #4
 800134e:	f000 f953 	bl	80015f8 <build_ins>
	send_ins();
 8001352:	f000 f9bb 	bl	80016cc <send_ins>
	if (check_respone_search()) {
 8001356:	f000 f895 	bl	8001484 <check_respone_search>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d004      	beq.n	800136a <search_finger+0x3e>
		ins_search_flag = 0;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <search_finger+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
		return 1;
 8001366:	2301      	movs	r3, #1
 8001368:	e003      	b.n	8001372 <search_finger+0x46>
	}
	ins_search_flag = 0;
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <search_finger+0x50>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000026a 	.word	0x2000026a
 8001380:	08007028 	.word	0x08007028

08001384 <store_finger>:
static bool store_finger(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
	uint8_t data[3] = { 0x01, (uint8_t) (idx_page >> 8), (uint8_t) (idx_page) };
 800138a:	2301      	movs	r3, #1
 800138c:	713b      	strb	r3, [r7, #4]
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <store_finger+0x54>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	b29b      	uxth	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	717b      	strb	r3, [r7, #5]
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <store_finger+0x54>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	71bb      	strb	r3, [r7, #6]
	build_ins(INS_STORE_CHAR, 3, data);
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	461a      	mov	r2, r3
 80013a6:	2103      	movs	r1, #3
 80013a8:	2006      	movs	r0, #6
 80013aa:	f000 f925 	bl	80015f8 <build_ins>
	send_ins();
 80013ae:	f000 f98d 	bl	80016cc <send_ins>
	if (check_respone()) {
 80013b2:	f000 f8d3 	bl	800155c <check_respone>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d007      	beq.n	80013cc <store_finger+0x48>
		idx_page++;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <store_finger+0x54>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <store_finger+0x54>)
 80013c6:	801a      	strh	r2, [r3, #0]
		return 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <store_finger+0x4a>
	}
	return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000029a 	.word	0x2000029a

080013dc <fp_reset_timer>:
static void fp_reset_timer(void) {
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
	finger_timer = FINGER_TIMER;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <fp_reset_timer+0x14>)
 80013e2:	220a      	movs	r2, #10
 80013e4:	701a      	strb	r2, [r3, #0]
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000000 	.word	0x20000000

080013f4 <merge_finger>:
static bool merge_finger(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	build_ins(INS_REG_MODEL, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2005      	movs	r0, #5
 80013fe:	f000 f8fb 	bl	80015f8 <build_ins>
	send_ins();
 8001402:	f000 f963 	bl	80016cc <send_ins>
	if (check_respone()) {
 8001406:	f000 f8a9 	bl	800155c <check_respone>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <merge_finger+0x20>
		return 1;
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <merge_finger+0x22>
	}
	return 0;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}

0800141a <get_finger>:
static void get_finger(uint8_t time) {
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < time; i++) {
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e022      	b.n	8001470 <get_finger+0x56>
		fp_reset_timer();
 800142a:	f7ff ffd7 	bl	80013dc <fp_reset_timer>
		while (1) {
			build_ins(INS_GET_IMAGE, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2001      	movs	r0, #1
 8001434:	f000 f8e0 	bl	80015f8 <build_ins>
			send_ins();
 8001438:	f000 f948 	bl	80016cc <send_ins>
			if (check_respone()) {
 800143c:	f000 f88e 	bl	800155c <check_respone>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f3      	beq.n	800142e <get_finger+0x14>
				uint8_t data = i + 1;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	3301      	adds	r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	73bb      	strb	r3, [r7, #14]
				build_ins(INS_GEN_CHAR, 1, &data);
 800144e:	f107 030e 	add.w	r3, r7, #14
 8001452:	461a      	mov	r2, r3
 8001454:	2101      	movs	r1, #1
 8001456:	2002      	movs	r0, #2
 8001458:	f000 f8ce 	bl	80015f8 <build_ins>
				send_ins();
 800145c:	f000 f936 	bl	80016cc <send_ins>
				if (check_respone()) {
 8001460:	f000 f87c 	bl	800155c <check_respone>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0e1      	beq.n	800142e <get_finger+0x14>
	for (uint8_t i = 0; i < time; i++) {
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	3301      	adds	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	429a      	cmp	r2, r3
 8001476:	d3d8      	bcc.n	800142a <get_finger+0x10>
					break;
				}
			}
		}
	}
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <check_respone_search>:

static bool check_respone_search(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
	while (!receive_flag) {
 800148a:	e008      	b.n	800149e <check_respone_search+0x1a>
		if (finger_timer == 0) {
 800148c:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <check_respone_search+0xbc>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d104      	bne.n	800149e <check_respone_search+0x1a>
			idx = 0;
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <check_respone_search+0xc0>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
			return 0;
 800149a:	2300      	movs	r3, #0
 800149c:	e04b      	b.n	8001536 <check_respone_search+0xb2>
	while (!receive_flag) {
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <check_respone_search+0xc4>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f2      	beq.n	800148c <check_respone_search+0x8>
		}
	}
	receive_flag = !receive_flag;
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <check_respone_search+0xc4>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf0c      	ite	eq
 80014ae:	2301      	moveq	r3, #1
 80014b0:	2300      	movne	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <check_respone_search+0xc4>)
 80014b8:	701a      	strb	r2, [r3, #0]
	uint8_t header[9] = ACK_HEADER;
 80014ba:	4a24      	ldr	r2, [pc, #144]	; (800154c <check_respone_search+0xc8>)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	ca07      	ldmia	r2, {r0, r1, r2}
 80014c0:	c303      	stmia	r3!, {r0, r1}
 80014c2:	701a      	strb	r2, [r3, #0]
	header[8] = 0x07;
 80014c4:	2307      	movs	r3, #7
 80014c6:	733b      	strb	r3, [r7, #12]
	if (memcmp(header, from_sensor, 9)) {
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2209      	movs	r2, #9
 80014cc:	4920      	ldr	r1, [pc, #128]	; (8001550 <check_respone_search+0xcc>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 f98a 	bl	80067e8 <memcmp>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <check_respone_search+0x60>
		idx = 0;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <check_respone_search+0xc0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
		return 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e028      	b.n	8001536 <check_respone_search+0xb2>
	}
	if (from_sensor[9] == 0x00) {
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <check_respone_search+0xcc>)
 80014e6:	7a5b      	ldrb	r3, [r3, #9]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d11c      	bne.n	8001526 <check_respone_search+0xa2>
		idx = 0;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <check_respone_search+0xc0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
		page_id = (uint16_t) (from_sensor[10]) << 8 | from_sensor[11];
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <check_respone_search+0xcc>)
 80014f4:	7a9b      	ldrb	r3, [r3, #10]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <check_respone_search+0xcc>)
 80014fc:	7adb      	ldrb	r3, [r3, #11]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21b      	sxth	r3, r3
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <check_respone_search+0xd0>)
 8001508:	801a      	strh	r2, [r3, #0]
		score = (uint16_t) (from_sensor[12]) << 8 | from_sensor[13];
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <check_respone_search+0xcc>)
 800150c:	7b1b      	ldrb	r3, [r3, #12]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <check_respone_search+0xcc>)
 8001514:	7b5b      	ldrb	r3, [r3, #13]
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21b      	sxth	r3, r3
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <check_respone_search+0xd4>)
 8001520:	801a      	strh	r2, [r3, #0]
		return 1;
 8001522:	2301      	movs	r3, #1
 8001524:	e007      	b.n	8001536 <check_respone_search+0xb2>
	}
	if (idx >= ACK_LEN_16) {
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <check_respone_search+0xc0>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b0f      	cmp	r3, #15
 800152c:	d902      	bls.n	8001534 <check_respone_search+0xb0>
		idx = 0;
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <check_respone_search+0xc0>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000000 	.word	0x20000000
 8001544:	20000298 	.word	0x20000298
 8001548:	20000269 	.word	0x20000269
 800154c:	08007030 	.word	0x08007030
 8001550:	20000284 	.word	0x20000284
 8001554:	2000029c 	.word	0x2000029c
 8001558:	2000029e 	.word	0x2000029e

0800155c <check_respone>:
static bool check_respone(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
	while (!receive_flag) {
 8001562:	e008      	b.n	8001576 <check_respone+0x1a>
		if (finger_timer == 0) {
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <check_respone+0x88>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d104      	bne.n	8001576 <check_respone+0x1a>
			idx = 0;
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <check_respone+0x8c>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
			return 0;
 8001572:	2300      	movs	r3, #0
 8001574:	e031      	b.n	80015da <check_respone+0x7e>
	while (!receive_flag) {
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <check_respone+0x90>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f2      	beq.n	8001564 <check_respone+0x8>
		}
	}
	receive_flag = !receive_flag;
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <check_respone+0x90>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	bf0c      	ite	eq
 8001586:	2301      	moveq	r3, #1
 8001588:	2300      	movne	r3, #0
 800158a:	b2db      	uxtb	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <check_respone+0x90>)
 8001590:	701a      	strb	r2, [r3, #0]
	uint8_t header[9] = ACK_HEADER;
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <check_respone+0x94>)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	ca07      	ldmia	r2, {r0, r1, r2}
 8001598:	c303      	stmia	r3!, {r0, r1}
 800159a:	701a      	strb	r2, [r3, #0]
	if (memcmp(header, from_sensor, 9)) {
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2209      	movs	r2, #9
 80015a0:	4914      	ldr	r1, [pc, #80]	; (80015f4 <check_respone+0x98>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f005 f920 	bl	80067e8 <memcmp>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <check_respone+0x5c>
		idx = 0;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <check_respone+0x8c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
		return 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e010      	b.n	80015da <check_respone+0x7e>
	}
	if (from_sensor[9] == 0x00) {
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <check_respone+0x98>)
 80015ba:	7a5b      	ldrb	r3, [r3, #9]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d104      	bne.n	80015ca <check_respone+0x6e>
		idx = 0;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <check_respone+0x8c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
		return 1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e007      	b.n	80015da <check_respone+0x7e>
	}
	if (idx >= ACK_LEN_12) {
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <check_respone+0x8c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b0b      	cmp	r3, #11
 80015d0:	d902      	bls.n	80015d8 <check_respone+0x7c>
		idx = 0;
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <check_respone+0x8c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000298 	.word	0x20000298
 80015ec:	20000269 	.word	0x20000269
 80015f0:	08007030 	.word	0x08007030
 80015f4:	20000284 	.word	0x20000284

080015f8 <build_ins>:
static void build_ins(uint8_t code, uint8_t data_len, uint8_t *data) {
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	603a      	str	r2, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	460b      	mov	r3, r1
 8001606:	71bb      	strb	r3, [r7, #6]
	ins_len = INS_LEN_NO_DATA + data_len;
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	330c      	adds	r3, #12
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <build_ins+0xcc>)
 8001610:	701a      	strb	r2, [r3, #0]
	uint16_t packet_len = data_len + 3;
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	b29b      	uxth	r3, r3
 8001616:	3303      	adds	r3, #3
 8001618:	827b      	strh	r3, [r7, #18]
	uint16_t sum = INS_PACKET_FLAG + code + packet_len;
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	b29a      	uxth	r2, r3
 800161e:	8a7b      	ldrh	r3, [r7, #18]
 8001620:	4413      	add	r3, r2
 8001622:	b29b      	uxth	r3, r3
 8001624:	3301      	adds	r3, #1
 8001626:	82fb      	strh	r3, [r7, #22]
	uint8_t header[IDX_INS_START] = { CMD_HEADER, INS_PACKET_FLAG,
 8001628:	23ef      	movs	r3, #239	; 0xef
 800162a:	723b      	strb	r3, [r7, #8]
 800162c:	2301      	movs	r3, #1
 800162e:	727b      	strb	r3, [r7, #9]
 8001630:	23ff      	movs	r3, #255	; 0xff
 8001632:	72bb      	strb	r3, [r7, #10]
 8001634:	23ff      	movs	r3, #255	; 0xff
 8001636:	72fb      	strb	r3, [r7, #11]
 8001638:	23ff      	movs	r3, #255	; 0xff
 800163a:	733b      	strb	r3, [r7, #12]
 800163c:	23ff      	movs	r3, #255	; 0xff
 800163e:	737b      	strb	r3, [r7, #13]
 8001640:	2301      	movs	r3, #1
 8001642:	73bb      	strb	r3, [r7, #14]
			(uint8_t) (packet_len >> 8), (uint8_t) (packet_len), code };
 8001644:	8a7b      	ldrh	r3, [r7, #18]
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	b29b      	uxth	r3, r3
 800164a:	b2db      	uxtb	r3, r3
	uint8_t header[IDX_INS_START] = { CMD_HEADER, INS_PACKET_FLAG,
 800164c:	73fb      	strb	r3, [r7, #15]
			(uint8_t) (packet_len >> 8), (uint8_t) (packet_len), code };
 800164e:	8a7b      	ldrh	r3, [r7, #18]
 8001650:	b2db      	uxtb	r3, r3
	uint8_t header[IDX_INS_START] = { CMD_HEADER, INS_PACKET_FLAG,
 8001652:	743b      	strb	r3, [r7, #16]
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	747b      	strb	r3, [r7, #17]
	memcpy(ins, header, IDX_INS_START);
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <build_ins+0xd0>)
 800165a:	f107 0208 	add.w	r2, r7, #8
 800165e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001660:	c303      	stmia	r3!, {r0, r1}
 8001662:	801a      	strh	r2, [r3, #0]
	uint8_t i = IDX_INS_START;
 8001664:	230a      	movs	r3, #10
 8001666:	757b      	strb	r3, [r7, #21]
	for (; i < IDX_INS_START + data_len; i++) {
 8001668:	e013      	b.n	8001692 <build_ins+0x9a>
		ins[i] = data[i - IDX_INS_START];
 800166a:	7d7b      	ldrb	r3, [r7, #21]
 800166c:	3b0a      	subs	r3, #10
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	441a      	add	r2, r3
 8001672:	7d7b      	ldrb	r3, [r7, #21]
 8001674:	7811      	ldrb	r1, [r2, #0]
 8001676:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <build_ins+0xd0>)
 8001678:	54d1      	strb	r1, [r2, r3]
		sum += data[i - IDX_INS_START];
 800167a:	7d7b      	ldrb	r3, [r7, #21]
 800167c:	3b0a      	subs	r3, #10
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	4413      	add	r3, r2
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b29a      	uxth	r2, r3
 8001686:	8afb      	ldrh	r3, [r7, #22]
 8001688:	4413      	add	r3, r2
 800168a:	82fb      	strh	r3, [r7, #22]
	for (; i < IDX_INS_START + data_len; i++) {
 800168c:	7d7b      	ldrb	r3, [r7, #21]
 800168e:	3301      	adds	r3, #1
 8001690:	757b      	strb	r3, [r7, #21]
 8001692:	79bb      	ldrb	r3, [r7, #6]
 8001694:	f103 0209 	add.w	r2, r3, #9
 8001698:	7d7b      	ldrb	r3, [r7, #21]
 800169a:	429a      	cmp	r2, r3
 800169c:	dae5      	bge.n	800166a <build_ins+0x72>
	}
	ins[IDX_INS_START + data_len] = (uint8_t) (sum >> 8);
 800169e:	8afb      	ldrh	r3, [r7, #22]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	330a      	adds	r3, #10
 80016a8:	b2d1      	uxtb	r1, r2
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <build_ins+0xd0>)
 80016ac:	54d1      	strb	r1, [r2, r3]
	ins[IDX_INS_START + data_len + 1] = (uint8_t) sum;
 80016ae:	79bb      	ldrb	r3, [r7, #6]
 80016b0:	330b      	adds	r3, #11
 80016b2:	8afa      	ldrh	r2, [r7, #22]
 80016b4:	b2d1      	uxtb	r1, r2
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <build_ins+0xd0>)
 80016b8:	54d1      	strb	r1, [r2, r3]
}
 80016ba:	bf00      	nop
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000280 	.word	0x20000280
 80016c8:	2000026c 	.word	0x2000026c

080016cc <send_ins>:

static void send_ins(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < ins_len; i++) {
 80016d2:	2300      	movs	r3, #0
 80016d4:	71fb      	strb	r3, [r7, #7]
 80016d6:	e00a      	b.n	80016ee <send_ins+0x22>
		HAL_UART_Transmit(&huart1, ins + i, 1, 100);
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <send_ins+0x38>)
 80016dc:	1899      	adds	r1, r3, r2
 80016de:	2364      	movs	r3, #100	; 0x64
 80016e0:	2201      	movs	r2, #1
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <send_ins+0x3c>)
 80016e4:	f004 f97c 	bl	80059e0 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < ins_len; i++) {
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	3301      	adds	r3, #1
 80016ec:	71fb      	strb	r3, [r7, #7]
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <send_ins+0x40>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	79fa      	ldrb	r2, [r7, #7]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d3ef      	bcc.n	80016d8 <send_ins+0xc>
	}
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000026c 	.word	0x2000026c
 8001708:	20000174 	.word	0x20000174
 800170c:	20000280 	.word	0x20000280

08001710 <fp_receive_data>:

void fp_receive_data(uint8_t data) {
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	from_sensor[idx++] = data;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <fp_receive_data+0x4c>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	b2d1      	uxtb	r1, r2
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <fp_receive_data+0x4c>)
 8001724:	7011      	strb	r1, [r2, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <fp_receive_data+0x50>)
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	5453      	strb	r3, [r2, r1]
	uint8_t ack_len;
	if (ins_search_flag) {
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <fp_receive_data+0x54>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <fp_receive_data+0x2c>
		ack_len = ACK_LEN_16;
 8001736:	2310      	movs	r3, #16
 8001738:	73fb      	strb	r3, [r7, #15]
 800173a:	e001      	b.n	8001740 <fp_receive_data+0x30>
	} else {
		ack_len = ACK_LEN_12;
 800173c:	230c      	movs	r3, #12
 800173e:	73fb      	strb	r3, [r7, #15]
	}
	if (idx >= ack_len) {
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <fp_receive_data+0x4c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	429a      	cmp	r2, r3
 8001748:	d802      	bhi.n	8001750 <fp_receive_data+0x40>
		receive_flag = 1;
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <fp_receive_data+0x58>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
	}
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000298 	.word	0x20000298
 8001760:	20000284 	.word	0x20000284
 8001764:	2000026a 	.word	0x2000026a
 8001768:	20000269 	.word	0x20000269

0800176c <cal>:
	CHANGE_PASS,
	GET_FINGER,
	ENROLL_NEW_FINGER
} st_lock;

uint8_t cal(uint8_t button_id) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
	return button_id / 4 + button_id % 4 + button_id / 4 * 2 + 1;
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	b2da      	uxtb	r2, r3
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	b2da      	uxtb	r2, r3
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	b2db      	uxtb	r3, r3
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4413      	add	r3, r2
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3301      	adds	r3, #1
 8001798:	b2db      	uxtb	r3, r3
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <fsm_lock>:
// flag for enroll new finger. 0: nothing, 1: refill password
bool enroll_finger_flag = 0;
// sleep count
uint32_t sleep_preiod = 0;

void fsm_lock(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	switch (st_lock) {
 80017a8:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <fsm_lock+0x138>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b07      	cmp	r3, #7
 80017ae:	f200 8092 	bhi.w	80018d6 <fsm_lock+0x132>
 80017b2:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <fsm_lock+0x14>)
 80017b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b8:	080017d9 	.word	0x080017d9
 80017bc:	080017dd 	.word	0x080017dd
 80017c0:	080017ef 	.word	0x080017ef
 80017c4:	08001817 	.word	0x08001817
 80017c8:	08001853 	.word	0x08001853
 80017cc:	08001803 	.word	0x08001803
 80017d0:	08001871 	.word	0x08001871
 80017d4:	080018ad 	.word	0x080018ad
	case INIT:
		switch_lock_to_sleep();
 80017d8:	f000 faae 	bl	8001d38 <switch_lock_to_sleep>
	case SLEEP:
		lock_close();
 80017dc:	f000 fe7c 	bl	80024d8 <lock_close>
		fsm_keypad();
 80017e0:	f000 f8dc 	bl	800199c <fsm_keypad>
		fsm_button();
 80017e4:	f000 f892 	bl	800190c <fsm_button>
		check_esp32();
 80017e8:	f000 fb22 	bl	8001e30 <check_esp32>
		break;
 80017ec:	e073      	b.n	80018d6 <fsm_lock+0x132>
	case PASSWORD:
		// if over 15s not do anything, return to sleep
		if (time_out()) {
 80017ee:	f000 fb37 	bl	8001e60 <time_out>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <fsm_lock+0x58>
			switch_lock_to_sleep();
 80017f8:	f000 fa9e 	bl	8001d38 <switch_lock_to_sleep>
		}
		fsm_keypad();
 80017fc:	f000 f8ce 	bl	800199c <fsm_keypad>
		break;
 8001800:	e069      	b.n	80018d6 <fsm_lock+0x132>
	case CHANGE_PASS:
		// if over 15s not do anything, return to sleep
		if (time_out()) {
 8001802:	f000 fb2d 	bl	8001e60 <time_out>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <fsm_lock+0x6c>
			switch_lock_to_sleep();
 800180c:	f000 fa94 	bl	8001d38 <switch_lock_to_sleep>
		}
		fsm_keypad();
 8001810:	f000 f8c4 	bl	800199c <fsm_keypad>
		break;
 8001814:	e05f      	b.n	80018d6 <fsm_lock+0x132>
	case WRONG:
		//
		if (wrong_input_cnt > 3) {
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <fsm_lock+0x13c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d90e      	bls.n	800183c <fsm_lock+0x98>
			sch_add_task(bz_alarm, 0, ONE_SECOND * 3);
 800181e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001822:	2100      	movs	r1, #0
 8001824:	482f      	ldr	r0, [pc, #188]	; (80018e4 <fsm_lock+0x140>)
 8001826:	f000 ff0f 	bl	8002648 <sch_add_task>
			wrong_input_flag = 1;
 800182a:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <fsm_lock+0x144>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
			timer_for_st = BLOCK_TIME;
 8001830:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <fsm_lock+0x148>)
 8001832:	220a      	movs	r2, #10
 8001834:	801a      	strh	r2, [r3, #0]
			wrong_input_cnt = 0;
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <fsm_lock+0x13c>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
		}
		if (time_out()) {
 800183c:	f000 fb10 	bl	8001e60 <time_out>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d046      	beq.n	80018d4 <fsm_lock+0x130>
			sch_remove_task(bz_alarm);
 8001846:	4827      	ldr	r0, [pc, #156]	; (80018e4 <fsm_lock+0x140>)
 8001848:	f000 ffc4 	bl	80027d4 <sch_remove_task>
			switch_lock_to_sleep();
 800184c:	f000 fa74 	bl	8001d38 <switch_lock_to_sleep>
		}
		break;
 8001850:	e040      	b.n	80018d4 <fsm_lock+0x130>
	case UNLOCK:
		lock_open();
 8001852:	f000 fe35 	bl	80024c0 <lock_open>
		if (time_out()) {
 8001856:	f000 fb03 	bl	8001e60 <time_out>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d004      	beq.n	800186a <fsm_lock+0xc6>
			esp32_send_lock(1);
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff fca5 	bl	80011b0 <esp32_send_lock>
			switch_lock_to_sleep();
 8001866:	f000 fa67 	bl	8001d38 <switch_lock_to_sleep>
		}
		fsm_button();
 800186a:	f000 f84f 	bl	800190c <fsm_button>
		break;
 800186e:	e032      	b.n	80018d6 <fsm_lock+0x132>
	case GET_FINGER:
		if (fp_search()) {
 8001870:	f7ff fd1e 	bl	80012b0 <fp_search>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00e      	beq.n	8001898 <fsm_lock+0xf4>
			esp32_send_fingerID(fg_get_id());
 800187a:	f7ff fd0f 	bl	800129c <fg_get_id>
 800187e:	4603      	mov	r3, r0
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fcc9 	bl	8001218 <esp32_send_fingerID>
			sch_add_task(run_timer, 0, ONE_SECOND);
 8001886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800188a:	2100      	movs	r1, #0
 800188c:	4818      	ldr	r0, [pc, #96]	; (80018f0 <fsm_lock+0x14c>)
 800188e:	f000 fedb 	bl	8002648 <sch_add_task>
			switch_lock_to_unlock();
 8001892:	f000 f9ff 	bl	8001c94 <switch_lock_to_unlock>
 8001896:	e005      	b.n	80018a4 <fsm_lock+0x100>
		} else {
			LCD_display("  INVALID FINGER", "");
 8001898:	4916      	ldr	r1, [pc, #88]	; (80018f4 <fsm_lock+0x150>)
 800189a:	4817      	ldr	r0, [pc, #92]	; (80018f8 <fsm_lock+0x154>)
 800189c:	f000 fd0e 	bl	80022bc <LCD_display>
			switch_lock_to_sleep();
 80018a0:	f000 fa4a 	bl	8001d38 <switch_lock_to_sleep>
		}
		sch_remove_task(fp_run_timer);
 80018a4:	4815      	ldr	r0, [pc, #84]	; (80018fc <fsm_lock+0x158>)
 80018a6:	f000 ff95 	bl	80027d4 <sch_remove_task>
		break;
 80018aa:	e014      	b.n	80018d6 <fsm_lock+0x132>
	case ENROLL_NEW_FINGER:
		if (fp_enroll()) {
 80018ac:	f7ff fd16 	bl	80012dc <fp_enroll>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <fsm_lock+0x11c>
			LCD_display("SUCCESFULLY", "");
 80018b6:	490f      	ldr	r1, [pc, #60]	; (80018f4 <fsm_lock+0x150>)
 80018b8:	4811      	ldr	r0, [pc, #68]	; (8001900 <fsm_lock+0x15c>)
 80018ba:	f000 fcff 	bl	80022bc <LCD_display>
 80018be:	e003      	b.n	80018c8 <fsm_lock+0x124>
		} else {
			LCD_display("  STH WENT", "   WRONG");
 80018c0:	4910      	ldr	r1, [pc, #64]	; (8001904 <fsm_lock+0x160>)
 80018c2:	4811      	ldr	r0, [pc, #68]	; (8001908 <fsm_lock+0x164>)
 80018c4:	f000 fcfa 	bl	80022bc <LCD_display>
		}
		sch_remove_task(fp_run_timer);
 80018c8:	480c      	ldr	r0, [pc, #48]	; (80018fc <fsm_lock+0x158>)
 80018ca:	f000 ff83 	bl	80027d4 <sch_remove_task>
		switch_lock_to_sleep();
 80018ce:	f000 fa33 	bl	8001d38 <switch_lock_to_sleep>
		break;
 80018d2:	e000      	b.n	80018d6 <fsm_lock+0x132>
		break;
 80018d4:	bf00      	nop
	}
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200002a1 	.word	0x200002a1
 80018e0:	200002a2 	.word	0x200002a2
 80018e4:	080010c9 	.word	0x080010c9
 80018e8:	200002a3 	.word	0x200002a3
 80018ec:	20000002 	.word	0x20000002
 80018f0:	08001d7d 	.word	0x08001d7d
 80018f4:	0800703c 	.word	0x0800703c
 80018f8:	08007040 	.word	0x08007040
 80018fc:	08001309 	.word	0x08001309
 8001900:	08007054 	.word	0x08007054
 8001904:	08007060 	.word	0x08007060
 8001908:	0800706c 	.word	0x0800706c

0800190c <fsm_button>:
static bool fsm_button(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	switch (st_button) {
 8001910:	4b1e      	ldr	r3, [pc, #120]	; (800198c <fsm_button+0x80>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <fsm_button+0x12>
 8001918:	2b01      	cmp	r3, #1
 800191a:	d025      	beq.n	8001968 <fsm_button+0x5c>
 800191c:	e030      	b.n	8001980 <fsm_button+0x74>
	case release:
		if (is_button_pressed(0) == 1) {
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff fbb8 	bl	8001094 <is_button_pressed>
 8001924:	4603      	mov	r3, r0
 8001926:	2b01      	cmp	r3, #1
 8001928:	d115      	bne.n	8001956 <fsm_button+0x4a>
			//todo
			switch (st_lock) {
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <fsm_button+0x84>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d002      	beq.n	8001938 <fsm_button+0x2c>
 8001932:	2b04      	cmp	r3, #4
 8001934:	d00b      	beq.n	800194e <fsm_button+0x42>
				break;
			case UNLOCK:
				timer_for_st = UNLOCK_TIME;
				break;
			default:
				break;
 8001936:	e016      	b.n	8001966 <fsm_button+0x5a>
				rm_timer_sleep();
 8001938:	f000 fa6a 	bl	8001e10 <rm_timer_sleep>
				sch_add_task(run_timer, 0, ONE_SECOND);
 800193c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001940:	2100      	movs	r1, #0
 8001942:	4814      	ldr	r0, [pc, #80]	; (8001994 <fsm_button+0x88>)
 8001944:	f000 fe80 	bl	8002648 <sch_add_task>
				switch_lock_to_unlock();
 8001948:	f000 f9a4 	bl	8001c94 <switch_lock_to_unlock>
				break;
 800194c:	e00b      	b.n	8001966 <fsm_button+0x5a>
				timer_for_st = UNLOCK_TIME;
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <fsm_button+0x8c>)
 8001950:	2205      	movs	r2, #5
 8001952:	801a      	strh	r2, [r3, #0]
				break;
 8001954:	e007      	b.n	8001966 <fsm_button+0x5a>
			}
		} else if (is_button_pressed(0) == ERROR)
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff fb9c 	bl	8001094 <is_button_pressed>
 800195c:	4603      	mov	r3, r0
 800195e:	2b01      	cmp	r3, #1
 8001960:	d110      	bne.n	8001984 <fsm_button+0x78>
			return 0;
 8001962:	2300      	movs	r3, #0
 8001964:	e010      	b.n	8001988 <fsm_button+0x7c>
		break;
 8001966:	e00d      	b.n	8001984 <fsm_button+0x78>
	case pressed:
		if (!is_button_pressed(0)) {
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff fb93 	bl	8001094 <is_button_pressed>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d103      	bne.n	800197c <fsm_button+0x70>
			st_button = release;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <fsm_button+0x80>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
		} else {
			return 0;
		}
		break;
 800197a:	e004      	b.n	8001986 <fsm_button+0x7a>
			return 0;
 800197c:	2300      	movs	r3, #0
 800197e:	e003      	b.n	8001988 <fsm_button+0x7c>
	default:
		return 0;
 8001980:	2300      	movs	r3, #0
 8001982:	e001      	b.n	8001988 <fsm_button+0x7c>
		break;
 8001984:	bf00      	nop
	}
	return 1;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200002a0 	.word	0x200002a0
 8001990:	200002a1 	.word	0x200002a1
 8001994:	08001d7d 	.word	0x08001d7d
 8001998:	20000002 	.word	0x20000002

0800199c <fsm_keypad>:
static void fsm_keypad(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
	uint8_t key_id = keypad_IsPressed();
 80019a2:	f000 fb41 	bl	8002028 <keypad_IsPressed>
 80019a6:	4603      	mov	r3, r0
 80019a8:	71bb      	strb	r3, [r7, #6]
	switch (key_id) {
 80019aa:	79bb      	ldrb	r3, [r7, #6]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	f200 813f 	bhi.w	8001c30 <fsm_keypad+0x294>
 80019b2:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <fsm_keypad+0x1c>)
 80019b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b8:	080019f9 	.word	0x080019f9
 80019bc:	080019f9 	.word	0x080019f9
 80019c0:	080019f9 	.word	0x080019f9
 80019c4:	08001ad7 	.word	0x08001ad7
 80019c8:	080019f9 	.word	0x080019f9
 80019cc:	080019f9 	.word	0x080019f9
 80019d0:	080019f9 	.word	0x080019f9
 80019d4:	08001c31 	.word	0x08001c31
 80019d8:	080019f9 	.word	0x080019f9
 80019dc:	080019f9 	.word	0x080019f9
 80019e0:	080019f9 	.word	0x080019f9
 80019e4:	08001b0d 	.word	0x08001b0d
 80019e8:	08001b43 	.word	0x08001b43
 80019ec:	080019f9 	.word	0x080019f9
 80019f0:	08001b6d 	.word	0x08001b6d
 80019f4:	08001c31 	.word	0x08001c31
	case 8:
	case 9:
	case 10:
	case 13:
		uint8_t number;
		switch (st_lock) {
 80019f8:	4b96      	ldr	r3, [pc, #600]	; (8001c54 <fsm_keypad+0x2b8>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d039      	beq.n	8001a74 <fsm_keypad+0xd8>
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	dc62      	bgt.n	8001aca <fsm_keypad+0x12e>
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d002      	beq.n	8001a0e <fsm_keypad+0x72>
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d018      	beq.n	8001a3e <fsm_keypad+0xa2>
					switch_lock_to_wrong();
				}
			}
			break;
		default:
			break;
 8001a0c:	e05d      	b.n	8001aca <fsm_keypad+0x12e>
			if (key_id == 13) {
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	2b0d      	cmp	r3, #13
 8001a12:	d102      	bne.n	8001a1a <fsm_keypad+0x7e>
				number = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	71fb      	strb	r3, [r7, #7]
 8001a18:	e005      	b.n	8001a26 <fsm_keypad+0x8a>
				number = cal(key_id);
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fea5 	bl	800176c <cal>
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
			if (pw_update(number)) {
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 fd83 	bl	8002534 <pw_update>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d04c      	beq.n	8001ace <fsm_keypad+0x132>
				rm_timer_sleep();
 8001a34:	f000 f9ec 	bl	8001e10 <rm_timer_sleep>
				switch_lock_to_password();
 8001a38:	f000 f968 	bl	8001d0c <switch_lock_to_password>
			break;
 8001a3c:	e047      	b.n	8001ace <fsm_keypad+0x132>
			if (key_id == 13) {
 8001a3e:	79bb      	ldrb	r3, [r7, #6]
 8001a40:	2b0d      	cmp	r3, #13
 8001a42:	d102      	bne.n	8001a4a <fsm_keypad+0xae>
				number = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	e005      	b.n	8001a56 <fsm_keypad+0xba>
				number = cal(key_id);
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fe8d 	bl	800176c <cal>
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
			if (pw_update(number)) {
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fd6b 	bl	8002534 <pw_update>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <fsm_keypad+0xd2>
				reset_timer();
 8001a64:	f000 f97e 	bl	8001d64 <reset_timer>
				lcd_displayPW();
 8001a68:	f000 fb0e 	bl	8002088 <lcd_displayPW>
			break;
 8001a6c:	e032      	b.n	8001ad4 <fsm_keypad+0x138>
				switch_lock_to_wrong();
 8001a6e:	f000 f92f 	bl	8001cd0 <switch_lock_to_wrong>
			break;
 8001a72:	e02f      	b.n	8001ad4 <fsm_keypad+0x138>
			if (key_id == 13) {
 8001a74:	79bb      	ldrb	r3, [r7, #6]
 8001a76:	2b0d      	cmp	r3, #13
 8001a78:	d102      	bne.n	8001a80 <fsm_keypad+0xe4>
				number = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e005      	b.n	8001a8c <fsm_keypad+0xf0>
				number = cal(key_id);
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fe72 	bl	800176c <cal>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	71fb      	strb	r3, [r7, #7]
			if (change_pass_flag) {
 8001a8c:	4b72      	ldr	r3, [pc, #456]	; (8001c58 <fsm_keypad+0x2bc>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00b      	beq.n	8001aac <fsm_keypad+0x110>
				if (pw_update_change(number)) {
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fd2a 	bl	80024f0 <pw_update_change>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d017      	beq.n	8001ad2 <fsm_keypad+0x136>
					reset_timer();
 8001aa2:	f000 f95f 	bl	8001d64 <reset_timer>
					lcd_displayPW_change();
 8001aa6:	f000 fb2f 	bl	8002108 <lcd_displayPW_change>
			break;
 8001aaa:	e012      	b.n	8001ad2 <fsm_keypad+0x136>
				if (pw_update(number)) {
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fd40 	bl	8002534 <pw_update>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <fsm_keypad+0x128>
					reset_timer();
 8001aba:	f000 f953 	bl	8001d64 <reset_timer>
					lcd_displayPW();
 8001abe:	f000 fae3 	bl	8002088 <lcd_displayPW>
			break;
 8001ac2:	e006      	b.n	8001ad2 <fsm_keypad+0x136>
					switch_lock_to_wrong();
 8001ac4:	f000 f904 	bl	8001cd0 <switch_lock_to_wrong>
			break;
 8001ac8:	e003      	b.n	8001ad2 <fsm_keypad+0x136>
			break;
 8001aca:	bf00      	nop
 8001acc:	e0b7      	b.n	8001c3e <fsm_keypad+0x2a2>
			break;
 8001ace:	bf00      	nop
 8001ad0:	e0b5      	b.n	8001c3e <fsm_keypad+0x2a2>
			break;
 8001ad2:	bf00      	nop
		}
		break;
 8001ad4:	e0b3      	b.n	8001c3e <fsm_keypad+0x2a2>
	case 3:
		switch (st_lock) {
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <fsm_keypad+0x2b8>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	f040 80aa 	bne.w	8001c34 <fsm_keypad+0x298>
		case SLEEP:
			rm_timer_sleep();
 8001ae0:	f000 f996 	bl	8001e10 <rm_timer_sleep>
			reset_timer();
 8001ae4:	f000 f93e 	bl	8001d64 <reset_timer>
			LCD_display("FILL PASS", "");
 8001ae8:	495c      	ldr	r1, [pc, #368]	; (8001c5c <fsm_keypad+0x2c0>)
 8001aea:	485d      	ldr	r0, [pc, #372]	; (8001c60 <fsm_keypad+0x2c4>)
 8001aec:	f000 fbe6 	bl	80022bc <LCD_display>
			sch_add_task(run_timer, 0, ONE_SECOND);
 8001af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001af4:	2100      	movs	r1, #0
 8001af6:	485b      	ldr	r0, [pc, #364]	; (8001c64 <fsm_keypad+0x2c8>)
 8001af8:	f000 fda6 	bl	8002648 <sch_add_task>
			enroll_finger_flag = 1;
 8001afc:	4b5a      	ldr	r3, [pc, #360]	; (8001c68 <fsm_keypad+0x2cc>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
			st_lock = PASSWORD;
 8001b02:	4b54      	ldr	r3, [pc, #336]	; (8001c54 <fsm_keypad+0x2b8>)
 8001b04:	2202      	movs	r2, #2
 8001b06:	701a      	strb	r2, [r3, #0]
			break;
 8001b08:	bf00      	nop
		default:
		}
		break;
 8001b0a:	e093      	b.n	8001c34 <fsm_keypad+0x298>
	case 7:
		break;

	case 11:
		switch (st_lock) {
 8001b0c:	4b51      	ldr	r3, [pc, #324]	; (8001c54 <fsm_keypad+0x2b8>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	f040 8091 	bne.w	8001c38 <fsm_keypad+0x29c>
		case SLEEP:
			rm_timer_sleep();
 8001b16:	f000 f97b 	bl	8001e10 <rm_timer_sleep>
			reset_timer();
 8001b1a:	f000 f923 	bl	8001d64 <reset_timer>
			LCD_display("FILL OLD PASS", "");
 8001b1e:	494f      	ldr	r1, [pc, #316]	; (8001c5c <fsm_keypad+0x2c0>)
 8001b20:	4852      	ldr	r0, [pc, #328]	; (8001c6c <fsm_keypad+0x2d0>)
 8001b22:	f000 fbcb 	bl	80022bc <LCD_display>
			sch_add_task(run_timer, 0, ONE_SECOND);
 8001b26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	484d      	ldr	r0, [pc, #308]	; (8001c64 <fsm_keypad+0x2c8>)
 8001b2e:	f000 fd8b 	bl	8002648 <sch_add_task>
			change_pass_flag = 1;
 8001b32:	4b49      	ldr	r3, [pc, #292]	; (8001c58 <fsm_keypad+0x2bc>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
			st_lock = PASSWORD;
 8001b38:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <fsm_keypad+0x2b8>)
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	701a      	strb	r2, [r3, #0]
			break;
 8001b3e:	bf00      	nop
		default:
		}
		break;
 8001b40:	e07a      	b.n	8001c38 <fsm_keypad+0x29c>

	case 12:
		switch (st_lock) {
 8001b42:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <fsm_keypad+0x2b8>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d178      	bne.n	8001c3c <fsm_keypad+0x2a0>
		case SLEEP:
			rm_timer_sleep();
 8001b4a:	f000 f961 	bl	8001e10 <rm_timer_sleep>
			reset_timer();
 8001b4e:	f000 f909 	bl	8001d64 <reset_timer>
			LCD_display("INSERT YOUR", "FINGER");
 8001b52:	4947      	ldr	r1, [pc, #284]	; (8001c70 <fsm_keypad+0x2d4>)
 8001b54:	4847      	ldr	r0, [pc, #284]	; (8001c74 <fsm_keypad+0x2d8>)
 8001b56:	f000 fbb1 	bl	80022bc <LCD_display>
			sch_add_task(fp_run_timer, 0, ONE_SECOND / 10);
 8001b5a:	2264      	movs	r2, #100	; 0x64
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4846      	ldr	r0, [pc, #280]	; (8001c78 <fsm_keypad+0x2dc>)
 8001b60:	f000 fd72 	bl	8002648 <sch_add_task>
			st_lock = GET_FINGER;
 8001b64:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <fsm_keypad+0x2b8>)
 8001b66:	2206      	movs	r2, #6
 8001b68:	701a      	strb	r2, [r3, #0]
		default:
		}

		break;
 8001b6a:	e067      	b.n	8001c3c <fsm_keypad+0x2a0>

	case 14:
		switch (st_lock) {
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <fsm_keypad+0x2b8>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d002      	beq.n	8001b7a <fsm_keypad+0x1de>
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d034      	beq.n	8001be2 <fsm_keypad+0x246>
				}
			}
			break;
		default:
		}
		break;
 8001b78:	e061      	b.n	8001c3e <fsm_keypad+0x2a2>
			if (!pw_checkInPW()) {
 8001b7a:	f000 fd1f 	bl	80025bc <pw_checkInPW>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <fsm_keypad+0x1ee>
				switch_lock_to_wrong();
 8001b84:	f000 f8a4 	bl	8001cd0 <switch_lock_to_wrong>
			break;
 8001b88:	e051      	b.n	8001c2e <fsm_keypad+0x292>
				if (change_pass_flag) {
 8001b8a:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <fsm_keypad+0x2bc>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00b      	beq.n	8001baa <fsm_keypad+0x20e>
					reset_timer();
 8001b92:	f000 f8e7 	bl	8001d64 <reset_timer>
					LCD_display("FILL NEW PASS", "");
 8001b96:	4931      	ldr	r1, [pc, #196]	; (8001c5c <fsm_keypad+0x2c0>)
 8001b98:	4838      	ldr	r0, [pc, #224]	; (8001c7c <fsm_keypad+0x2e0>)
 8001b9a:	f000 fb8f 	bl	80022bc <LCD_display>
					pw_ResetIdx();
 8001b9e:	f000 fd1f 	bl	80025e0 <pw_ResetIdx>
					st_lock = CHANGE_PASS;
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <fsm_keypad+0x2b8>)
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	701a      	strb	r2, [r3, #0]
			break;
 8001ba8:	e041      	b.n	8001c2e <fsm_keypad+0x292>
				} else if (enroll_finger_flag) {
 8001baa:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <fsm_keypad+0x2cc>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d014      	beq.n	8001bdc <fsm_keypad+0x240>
					sch_remove_task(run_timer);
 8001bb2:	482c      	ldr	r0, [pc, #176]	; (8001c64 <fsm_keypad+0x2c8>)
 8001bb4:	f000 fe0e 	bl	80027d4 <sch_remove_task>
					sch_add_task(fp_run_timer, 0, ONE_SECOND / 10);
 8001bb8:	2264      	movs	r2, #100	; 0x64
 8001bba:	2100      	movs	r1, #0
 8001bbc:	482e      	ldr	r0, [pc, #184]	; (8001c78 <fsm_keypad+0x2dc>)
 8001bbe:	f000 fd43 	bl	8002648 <sch_add_task>
					LCD_display("   INSERT NEW", "    FINGER");
 8001bc2:	492f      	ldr	r1, [pc, #188]	; (8001c80 <fsm_keypad+0x2e4>)
 8001bc4:	482f      	ldr	r0, [pc, #188]	; (8001c84 <fsm_keypad+0x2e8>)
 8001bc6:	f000 fb79 	bl	80022bc <LCD_display>
					pw_ResetIdx();
 8001bca:	f000 fd09 	bl	80025e0 <pw_ResetIdx>
					enroll_finger_flag = 0;
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <fsm_keypad+0x2cc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
					st_lock = ENROLL_NEW_FINGER;
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <fsm_keypad+0x2b8>)
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	701a      	strb	r2, [r3, #0]
			break;
 8001bda:	e028      	b.n	8001c2e <fsm_keypad+0x292>
					switch_lock_to_unlock();
 8001bdc:	f000 f85a 	bl	8001c94 <switch_lock_to_unlock>
			break;
 8001be0:	e025      	b.n	8001c2e <fsm_keypad+0x292>
			if (change_pass_flag) {
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <fsm_keypad+0x2bc>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <fsm_keypad+0x262>
				LCD_display("REFILL PASS", "");
 8001bea:	491c      	ldr	r1, [pc, #112]	; (8001c5c <fsm_keypad+0x2c0>)
 8001bec:	4826      	ldr	r0, [pc, #152]	; (8001c88 <fsm_keypad+0x2ec>)
 8001bee:	f000 fb65 	bl	80022bc <LCD_display>
				pw_ResetIdx();
 8001bf2:	f000 fcf5 	bl	80025e0 <pw_ResetIdx>
				change_pass_flag = 0;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <fsm_keypad+0x2bc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
			break;
 8001bfc:	e016      	b.n	8001c2c <fsm_keypad+0x290>
				if (pw_checkInPW_change()) {
 8001bfe:	f000 fccb 	bl	8002598 <pw_checkInPW_change>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00f      	beq.n	8001c28 <fsm_keypad+0x28c>
					pw_UpdatePass();
 8001c08:	f000 fcf6 	bl	80025f8 <pw_UpdatePass>
					switch_lock_to_sleep();
 8001c0c:	f000 f894 	bl	8001d38 <switch_lock_to_sleep>
					sch_add_task(lcd_displaySuccess, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	481d      	ldr	r0, [pc, #116]	; (8001c8c <fsm_keypad+0x2f0>)
 8001c16:	f000 fd17 	bl	8002648 <sch_add_task>
					sch_add_task(lcd_displayNormal, ONE_SECOND, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c20:	481b      	ldr	r0, [pc, #108]	; (8001c90 <fsm_keypad+0x2f4>)
 8001c22:	f000 fd11 	bl	8002648 <sch_add_task>
			break;
 8001c26:	e001      	b.n	8001c2c <fsm_keypad+0x290>
					switch_lock_to_wrong();
 8001c28:	f000 f852 	bl	8001cd0 <switch_lock_to_wrong>
			break;
 8001c2c:	bf00      	nop
		break;
 8001c2e:	e006      	b.n	8001c3e <fsm_keypad+0x2a2>

	case 15:
		break;
	default:
		break;
 8001c30:	bf00      	nop
 8001c32:	e004      	b.n	8001c3e <fsm_keypad+0x2a2>
		break;
 8001c34:	bf00      	nop
 8001c36:	e002      	b.n	8001c3e <fsm_keypad+0x2a2>
		break;
 8001c38:	bf00      	nop
 8001c3a:	e000      	b.n	8001c3e <fsm_keypad+0x2a2>
		break;
 8001c3c:	bf00      	nop
	}
	if (key_id != UNPRESSED) {
 8001c3e:	79bb      	ldrb	r3, [r7, #6]
 8001c40:	2bff      	cmp	r3, #255	; 0xff
 8001c42:	d003      	beq.n	8001c4c <fsm_keypad+0x2b0>
		keypad_ResetFlag(key_id);
 8001c44:	79bb      	ldrb	r3, [r7, #6]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 fa0a 	bl	8002060 <keypad_ResetFlag>
	}
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200002a1 	.word	0x200002a1
 8001c58:	200002a4 	.word	0x200002a4
 8001c5c:	0800703c 	.word	0x0800703c
 8001c60:	08007078 	.word	0x08007078
 8001c64:	08001d7d 	.word	0x08001d7d
 8001c68:	200002a5 	.word	0x200002a5
 8001c6c:	08007084 	.word	0x08007084
 8001c70:	08007094 	.word	0x08007094
 8001c74:	0800709c 	.word	0x0800709c
 8001c78:	08001309 	.word	0x08001309
 8001c7c:	080070a8 	.word	0x080070a8
 8001c80:	080070b8 	.word	0x080070b8
 8001c84:	080070c4 	.word	0x080070c4
 8001c88:	080070d4 	.word	0x080070d4
 8001c8c:	080020d9 	.word	0x080020d9
 8001c90:	080020f1 	.word	0x080020f1

08001c94 <switch_lock_to_unlock>:
static void switch_lock_to_unlock(void) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	LCD_display("    UNLOCK DOOR", "");
 8001c98:	4908      	ldr	r1, [pc, #32]	; (8001cbc <switch_lock_to_unlock+0x28>)
 8001c9a:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <switch_lock_to_unlock+0x2c>)
 8001c9c:	f000 fb0e 	bl	80022bc <LCD_display>
	timer_for_st = UNLOCK_TIME;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <switch_lock_to_unlock+0x30>)
 8001ca2:	2205      	movs	r2, #5
 8001ca4:	801a      	strh	r2, [r3, #0]
	wrong_input_cnt = 0;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <switch_lock_to_unlock+0x34>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
	esp32_send_lock(0);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff fa7f 	bl	80011b0 <esp32_send_lock>
	st_lock = UNLOCK;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <switch_lock_to_unlock+0x38>)
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	701a      	strb	r2, [r3, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	0800703c 	.word	0x0800703c
 8001cc0:	080070e0 	.word	0x080070e0
 8001cc4:	20000002 	.word	0x20000002
 8001cc8:	200002a2 	.word	0x200002a2
 8001ccc:	200002a1 	.word	0x200002a1

08001cd0 <switch_lock_to_wrong>:
static void switch_lock_to_wrong(void) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	timer_for_st = 1;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <switch_lock_to_wrong+0x28>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	801a      	strh	r2, [r3, #0]
	wrong_input_cnt++;
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <switch_lock_to_wrong+0x2c>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <switch_lock_to_wrong+0x2c>)
 8001ce4:	701a      	strb	r2, [r3, #0]
	LCD_display("INVALID INPUT", "PLEASE REFILL");
 8001ce6:	4906      	ldr	r1, [pc, #24]	; (8001d00 <switch_lock_to_wrong+0x30>)
 8001ce8:	4806      	ldr	r0, [pc, #24]	; (8001d04 <switch_lock_to_wrong+0x34>)
 8001cea:	f000 fae7 	bl	80022bc <LCD_display>
	st_lock = WRONG;
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <switch_lock_to_wrong+0x38>)
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	701a      	strb	r2, [r3, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000002 	.word	0x20000002
 8001cfc:	200002a2 	.word	0x200002a2
 8001d00:	080070f0 	.word	0x080070f0
 8001d04:	08007100 	.word	0x08007100
 8001d08:	200002a1 	.word	0x200002a1

08001d0c <switch_lock_to_password>:
static void switch_lock_to_password(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	reset_timer();
 8001d10:	f000 f828 	bl	8001d64 <reset_timer>
	lcd_displayPW();
 8001d14:	f000 f9b8 	bl	8002088 <lcd_displayPW>
	sch_add_task(run_timer, 0, ONE_SECOND);
 8001d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4804      	ldr	r0, [pc, #16]	; (8001d30 <switch_lock_to_password+0x24>)
 8001d20:	f000 fc92 	bl	8002648 <sch_add_task>
	st_lock = PASSWORD;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <switch_lock_to_password+0x28>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	701a      	strb	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08001d7d 	.word	0x08001d7d
 8001d34:	200002a1 	.word	0x200002a1

08001d38 <switch_lock_to_sleep>:
static void switch_lock_to_sleep(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	run_timer_sleep();
 8001d3c:	f000 f856 	bl	8001dec <run_timer_sleep>
	pw_ResetIdx();
 8001d40:	f000 fc4e 	bl	80025e0 <pw_ResetIdx>
	LCD_display("    WELCOME TO", "     MY ROOM");
 8001d44:	4904      	ldr	r1, [pc, #16]	; (8001d58 <switch_lock_to_sleep+0x20>)
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <switch_lock_to_sleep+0x24>)
 8001d48:	f000 fab8 	bl	80022bc <LCD_display>
	st_lock = SLEEP;
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <switch_lock_to_sleep+0x28>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	08007110 	.word	0x08007110
 8001d5c:	08007120 	.word	0x08007120
 8001d60:	200002a1 	.word	0x200002a1

08001d64 <reset_timer>:
static void reset_timer(void) {
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
	timer_for_st = TIMER;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <reset_timer+0x14>)
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	801a      	strh	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000002 	.word	0x20000002

08001d7c <run_timer>:
static void run_timer(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
	if (timer_for_st > 0) {
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <run_timer+0x44>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <run_timer+0x1a>
		timer_for_st--;
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <run_timer+0x44>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <run_timer+0x44>)
 8001d94:	801a      	strh	r2, [r3, #0]
	}
	if (wrong_input_flag == 1) {
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <run_timer+0x48>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10c      	bne.n	8001db8 <run_timer+0x3c>
		char str[17];
		sprintf(str, "REMAIN %ds", timer_for_st);
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <run_timer+0x44>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <run_timer+0x4c>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f004 fcfd 	bl	80067a8 <siprintf>
		LCD_display("BLOCK INPUT", str);
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4806      	ldr	r0, [pc, #24]	; (8001dcc <run_timer+0x50>)
 8001db4:	f000 fa82 	bl	80022bc <LCD_display>
	}
}
 8001db8:	bf00      	nop
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000002 	.word	0x20000002
 8001dc4:	200002a3 	.word	0x200002a3
 8001dc8:	08007130 	.word	0x08007130
 8001dcc:	0800713c 	.word	0x0800713c

08001dd0 <subfun_run_timer_sleep>:
static void subfun_run_timer_sleep(void){
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
	sleep_preiod++;
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <subfun_run_timer_sleep+0x18>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <subfun_run_timer_sleep+0x18>)
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	200002a8 	.word	0x200002a8

08001dec <run_timer_sleep>:
static void run_timer_sleep(void){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	sleep_preiod = 0;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <run_timer_sleep+0x1c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
	sch_add_task(subfun_run_timer_sleep, 0, ONE_SECOND);
 8001df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4803      	ldr	r0, [pc, #12]	; (8001e0c <run_timer_sleep+0x20>)
 8001dfe:	f000 fc23 	bl	8002648 <sch_add_task>
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200002a8 	.word	0x200002a8
 8001e0c:	08001dd1 	.word	0x08001dd1

08001e10 <rm_timer_sleep>:
static void rm_timer_sleep(void){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	sch_remove_task(subfun_run_timer_sleep);
 8001e14:	4804      	ldr	r0, [pc, #16]	; (8001e28 <rm_timer_sleep+0x18>)
 8001e16:	f000 fcdd 	bl	80027d4 <sch_remove_task>
	esp32_send_sleep(sleep_preiod);
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <rm_timer_sleep+0x1c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fa18 	bl	8001254 <esp32_send_sleep>
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	08001dd1 	.word	0x08001dd1
 8001e2c:	200002a8 	.word	0x200002a8

08001e30 <check_esp32>:
static void check_esp32(void){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	if(esp32_get_flag()){
 8001e34:	f7ff f9a6 	bl	8001184 <esp32_get_flag>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <check_esp32+0x26>
		rm_timer_sleep();
 8001e3e:	f7ff ffe7 	bl	8001e10 <rm_timer_sleep>
		sch_add_task(run_timer, 0, ONE_SECOND);
 8001e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e46:	2100      	movs	r1, #0
 8001e48:	4804      	ldr	r0, [pc, #16]	; (8001e5c <check_esp32+0x2c>)
 8001e4a:	f000 fbfd 	bl	8002648 <sch_add_task>
		switch_lock_to_unlock();
 8001e4e:	f7ff ff21 	bl	8001c94 <switch_lock_to_unlock>
		esp32_reset_flag();
 8001e52:	f7ff f9a1 	bl	8001198 <esp32_reset_flag>
	}
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	08001d7d 	.word	0x08001d7d

08001e60 <time_out>:
static bool time_out(void) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	if (timer_for_st == 0) {
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <time_out+0x34>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10f      	bne.n	8001e8c <time_out+0x2c>
		if (wrong_input_flag == 1 && st_lock == WRONG) {
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <time_out+0x38>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d106      	bne.n	8001e82 <time_out+0x22>
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <time_out+0x3c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d102      	bne.n	8001e82 <time_out+0x22>
			wrong_input_flag = 0;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <time_out+0x38>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
		}
		sch_remove_task(run_timer);
 8001e82:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <time_out+0x40>)
 8001e84:	f000 fca6 	bl	80027d4 <sch_remove_task>
		return 1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <time_out+0x2e>
	}
	return 0;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000002 	.word	0x20000002
 8001e98:	200002a3 	.word	0x200002a3
 8001e9c:	200002a1 	.word	0x200002a1
 8001ea0:	08001d7d 	.word	0x08001d7d

08001ea4 <time_out>:
#define KEYPAD_TIMEOUT	50 // 50ms

uint8_t key_buf[16];
uint16_t timer = KEYPAD_TIMEOUT * 100;

static bool time_out(void) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	DelayUS(10);
 8001ea8:	200a      	movs	r0, #10
 8001eaa:	f000 fae3 	bl	8002474 <DelayUS>
	if (timer > 0) {
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <time_out+0x30>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <time_out+0x1e>
		timer--;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <time_out+0x30>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <time_out+0x30>)
 8001ec0:	801a      	strh	r2, [r3, #0]
	}
	if (timer == 0)
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <time_out+0x30>)
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <time_out+0x2a>
		return 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <time_out+0x2c>
	return 0;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <keypad_IsTouch>:
static bool keypad_IsTouch(void) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	timer = KEYPAD_TIMEOUT * 100;
 8001edc:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <keypad_IsTouch+0x54>)
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	801a      	strh	r2, [r3, #0]
	//------------DV start-----------------
	//read each 10us, end loop when over KEYPAD_TIMEOUT or read 0 signal
	while (HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN)) {
 8001ee4:	e006      	b.n	8001ef4 <keypad_IsTouch+0x1c>
		if (time_out())
 8001ee6:	f7ff ffdd 	bl	8001ea4 <time_out>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <keypad_IsTouch+0x1c>
			return 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e019      	b.n	8001f28 <keypad_IsTouch+0x50>
	while (HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN)) {
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	480e      	ldr	r0, [pc, #56]	; (8001f30 <keypad_IsTouch+0x58>)
 8001ef8:	f001 fcca 	bl	8003890 <HAL_GPIO_ReadPin>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f1      	bne.n	8001ee6 <keypad_IsTouch+0xe>
	}
	//read each 10us, end loop when over KEYPAD_TIMEOUT or read 1 signal
	while (!HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN)) {
 8001f02:	e006      	b.n	8001f12 <keypad_IsTouch+0x3a>
		if (time_out())
 8001f04:	f7ff ffce 	bl	8001ea4 <time_out>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <keypad_IsTouch+0x3a>
			return 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e00a      	b.n	8001f28 <keypad_IsTouch+0x50>
	while (!HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN)) {
 8001f12:	2101      	movs	r1, #1
 8001f14:	4806      	ldr	r0, [pc, #24]	; (8001f30 <keypad_IsTouch+0x58>)
 8001f16:	f001 fcbb 	bl	8003890 <HAL_GPIO_ReadPin>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f1      	beq.n	8001f04 <keypad_IsTouch+0x2c>
	}
	//------------DV end-----------------
	DelayUS(10); // for TW
 8001f20:	200a      	movs	r0, #10
 8001f22:	f000 faa7 	bl	8002474 <DelayUS>
	return 1;
 8001f26:	2301      	movs	r3, #1
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000004 	.word	0x20000004
 8001f30:	40010c00 	.word	0x40010c00

08001f34 <keypad_bit>:
static void keypad_bit(uint8_t i) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_SCL_PIN, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2102      	movs	r1, #2
 8001f42:	4816      	ldr	r0, [pc, #88]	; (8001f9c <keypad_bit+0x68>)
 8001f44:	f001 fcbb 	bl	80038be <HAL_GPIO_WritePin>
	DelayUS(2);
 8001f48:	2002      	movs	r0, #2
 8001f4a:	f000 fa93 	bl	8002474 <DelayUS>
	uint8_t bit = !HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN);
 8001f4e:	2101      	movs	r1, #1
 8001f50:	4812      	ldr	r0, [pc, #72]	; (8001f9c <keypad_bit+0x68>)
 8001f52:	f001 fc9d 	bl	8003890 <HAL_GPIO_ReadPin>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	73fb      	strb	r3, [r7, #15]
	if (bit == 0) {
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d104      	bne.n	8001f74 <keypad_bit+0x40>
		key_buf[i] = 0;
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4a0c      	ldr	r2, [pc, #48]	; (8001fa0 <keypad_bit+0x6c>)
 8001f6e:	2100      	movs	r1, #0
 8001f70:	54d1      	strb	r1, [r2, r3]
 8001f72:	e006      	b.n	8001f82 <keypad_bit+0x4e>
	} else {
		key_buf[i]++;
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <keypad_bit+0x6c>)
 8001f78:	5cd2      	ldrb	r2, [r2, r3]
 8001f7a:	3201      	adds	r2, #1
 8001f7c:	b2d1      	uxtb	r1, r2
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <keypad_bit+0x6c>)
 8001f80:	54d1      	strb	r1, [r2, r3]
	}
	HAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_SCL_PIN, 1);
 8001f82:	2201      	movs	r2, #1
 8001f84:	2102      	movs	r1, #2
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <keypad_bit+0x68>)
 8001f88:	f001 fc99 	bl	80038be <HAL_GPIO_WritePin>
	DelayUS(2);
 8001f8c:	2002      	movs	r0, #2
 8001f8e:	f000 fa71 	bl	8002474 <DelayUS>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40010c00 	.word	0x40010c00
 8001fa0:	200002ac 	.word	0x200002ac

08001fa4 <keypad_scan>:
static void keypad_scan() {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 16; i++) {
 8001faa:	2300      	movs	r3, #0
 8001fac:	71fb      	strb	r3, [r7, #7]
 8001fae:	e006      	b.n	8001fbe <keypad_scan+0x1a>
		keypad_bit(i);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ffbe 	bl	8001f34 <keypad_bit>
	for (uint8_t i = 0; i < 16; i++) {
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	71fb      	strb	r3, [r7, #7]
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d9f5      	bls.n	8001fb0 <keypad_scan+0xc>
	}
	HAL_Delay(2); //for Tout
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f001 f8fb 	bl	80031c0 <HAL_Delay>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <keypad_init>:
void keypad_init(void) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 16; i++) {
 8001fda:	2300      	movs	r3, #0
 8001fdc:	71fb      	strb	r3, [r7, #7]
 8001fde:	e006      	b.n	8001fee <keypad_init+0x1a>
		key_buf[i] = 0;
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	4a09      	ldr	r2, [pc, #36]	; (8002008 <keypad_init+0x34>)
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 16; i++) {
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	3301      	adds	r3, #1
 8001fec:	71fb      	strb	r3, [r7, #7]
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d9f5      	bls.n	8001fe0 <keypad_init+0xc>
	}
	HAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_SCL_PIN, 1);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	4804      	ldr	r0, [pc, #16]	; (800200c <keypad_init+0x38>)
 8001ffa:	f001 fc60 	bl	80038be <HAL_GPIO_WritePin>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200002ac 	.word	0x200002ac
 800200c:	40010c00 	.word	0x40010c00

08002010 <keypad_read>:

void keypad_read(void) {
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	if (keypad_IsTouch()) {
 8002014:	f7ff ff60 	bl	8001ed8 <keypad_IsTouch>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <keypad_read+0x12>
		keypad_scan();
 800201e:	f7ff ffc1 	bl	8001fa4 <keypad_scan>
	}
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <keypad_IsPressed>:
uint8_t keypad_IsPressed(void) {
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 15; i++) {
 800202e:	2300      	movs	r3, #0
 8002030:	71fb      	strb	r3, [r7, #7]
 8002032:	e009      	b.n	8002048 <keypad_IsPressed+0x20>
		if (key_buf[i] > 0)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <keypad_IsPressed+0x34>)
 8002038:	5cd3      	ldrb	r3, [r2, r3]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <keypad_IsPressed+0x1a>
			return i;
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	e006      	b.n	8002050 <keypad_IsPressed+0x28>
	for (uint8_t i = 0; i < 15; i++) {
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	3301      	adds	r3, #1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	2b0e      	cmp	r3, #14
 800204c:	d9f2      	bls.n	8002034 <keypad_IsPressed+0xc>
	}
	return UNPRESSED;
 800204e:	23ff      	movs	r3, #255	; 0xff
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	200002ac 	.word	0x200002ac

08002060 <keypad_ResetFlag>:
void keypad_ResetFlag(uint8_t id) {
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
	if (id > 15)
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d804      	bhi.n	800207a <keypad_ResetFlag+0x1a>
		return;
	key_buf[id] = 0;
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	4a04      	ldr	r2, [pc, #16]	; (8002084 <keypad_ResetFlag+0x24>)
 8002074:	2100      	movs	r1, #0
 8002076:	54d1      	strb	r1, [r2, r3]
 8002078:	e000      	b.n	800207c <keypad_ResetFlag+0x1c>
		return;
 800207a:	bf00      	nop
}
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	200002ac 	.word	0x200002ac

08002088 <lcd_displayPW>:
void DelayInit(void);
void DelayUS(uint32_t);
void LCD_Home();


void lcd_displayPW(void){
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
	char str[20];
	uint8_t i = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
	for(; i < pw_idxGet();i++){
 8002092:	e008      	b.n	80020a6 <lcd_displayPW+0x1e>
		str[i] = '*';
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	3318      	adds	r3, #24
 8002098:	443b      	add	r3, r7
 800209a:	222a      	movs	r2, #42	; 0x2a
 800209c:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(; i < pw_idxGet();i++){
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	3301      	adds	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
 80020a6:	f000 fa6d 	bl	8002584 <pw_idxGet>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d3ef      	bcc.n	8002094 <lcd_displayPW+0xc>
	}
	str[i] = '\0';
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	3318      	adds	r3, #24
 80020b8:	443b      	add	r3, r7
 80020ba:	2200      	movs	r2, #0
 80020bc:	f803 2c18 	strb.w	r2, [r3, #-24]
	LCD_display("PIN", str);
 80020c0:	463b      	mov	r3, r7
 80020c2:	4619      	mov	r1, r3
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <lcd_displayPW+0x4c>)
 80020c6:	f000 f8f9 	bl	80022bc <LCD_display>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	08007148 	.word	0x08007148

080020d8 <lcd_displaySuccess>:
void lcd_displaySuccess(void){
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
	LCD_display("     CHANGE", "  SUCCESSFULLY");
 80020dc:	4902      	ldr	r1, [pc, #8]	; (80020e8 <lcd_displaySuccess+0x10>)
 80020de:	4803      	ldr	r0, [pc, #12]	; (80020ec <lcd_displaySuccess+0x14>)
 80020e0:	f000 f8ec 	bl	80022bc <LCD_display>
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	0800714c 	.word	0x0800714c
 80020ec:	0800715c 	.word	0x0800715c

080020f0 <lcd_displayNormal>:
void lcd_displayNormal(void){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	LCD_display("    WELCOME TO", "     MY ROOM");
 80020f4:	4902      	ldr	r1, [pc, #8]	; (8002100 <lcd_displayNormal+0x10>)
 80020f6:	4803      	ldr	r0, [pc, #12]	; (8002104 <lcd_displayNormal+0x14>)
 80020f8:	f000 f8e0 	bl	80022bc <LCD_display>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	08007168 	.word	0x08007168
 8002104:	08007178 	.word	0x08007178

08002108 <lcd_displayPW_change>:
void lcd_displayPW_change(void){
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
	char str[20];
	uint8_t i = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	75fb      	strb	r3, [r7, #23]
	for(; i < pw_idxGet();i++){
 8002112:	e008      	b.n	8002126 <lcd_displayPW_change+0x1e>
		str[i] = '*';
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	3318      	adds	r3, #24
 8002118:	443b      	add	r3, r7
 800211a:	222a      	movs	r2, #42	; 0x2a
 800211c:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(; i < pw_idxGet();i++){
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	3301      	adds	r3, #1
 8002124:	75fb      	strb	r3, [r7, #23]
 8002126:	f000 fa2d 	bl	8002584 <pw_idxGet>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	7dfb      	ldrb	r3, [r7, #23]
 8002130:	4293      	cmp	r3, r2
 8002132:	d3ef      	bcc.n	8002114 <lcd_displayPW_change+0xc>
	}
	str[i] = '\0';
 8002134:	7dfb      	ldrb	r3, [r7, #23]
 8002136:	3318      	adds	r3, #24
 8002138:	443b      	add	r3, r7
 800213a:	2200      	movs	r2, #0
 800213c:	f803 2c18 	strb.w	r2, [r3, #-24]
	LCD_display("PIN 5 DIGITS", str);
 8002140:	463b      	mov	r3, r7
 8002142:	4619      	mov	r1, r3
 8002144:	4803      	ldr	r0, [pc, #12]	; (8002154 <lcd_displayPW_change+0x4c>)
 8002146:	f000 f8b9 	bl	80022bc <LCD_display>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	08007188 	.word	0x08007188

08002158 <LCD_Init>:

void LCD_Init() {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	dpRows = 2;
 800215c:	4b30      	ldr	r3, [pc, #192]	; (8002220 <LCD_Init+0xc8>)
 800215e:	2202      	movs	r2, #2
 8002160:	701a      	strb	r2, [r3, #0]

	dpBacklight = LCD_BACKLIGHT;
 8002162:	4b30      	ldr	r3, [pc, #192]	; (8002224 <LCD_Init+0xcc>)
 8002164:	2208      	movs	r2, #8
 8002166:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_5x8DOTS | LCD_2LINE;
 8002168:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <LCD_Init+0xd0>)
 800216a:	2208      	movs	r2, #8
 800216c:	701a      	strb	r2, [r3, #0]

	/* Wait for initialization */
	DelayInit();
 800216e:	f000 f959 	bl	8002424 <DelayInit>
	HAL_Delay(50);
 8002172:	2032      	movs	r0, #50	; 0x32
 8002174:	f001 f824 	bl	80031c0 <HAL_Delay>

	ExpanderWrite(dpBacklight);
 8002178:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <LCD_Init+0xcc>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 f917 	bl	80023b0 <ExpanderWrite>
	HAL_Delay(1000);
 8002182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002186:	f001 f81b 	bl	80031c0 <HAL_Delay>

	/* 4bit Mode */
	Write4Bits(0x03 << 4);
 800218a:	2030      	movs	r0, #48	; 0x30
 800218c:	f000 f8ff 	bl	800238e <Write4Bits>
	DelayUS(4500);
 8002190:	f241 1094 	movw	r0, #4500	; 0x1194
 8002194:	f000 f96e 	bl	8002474 <DelayUS>

	Write4Bits(0x03 << 4);
 8002198:	2030      	movs	r0, #48	; 0x30
 800219a:	f000 f8f8 	bl	800238e <Write4Bits>
	DelayUS(4500);
 800219e:	f241 1094 	movw	r0, #4500	; 0x1194
 80021a2:	f000 f967 	bl	8002474 <DelayUS>

	Write4Bits(0x03 << 4);
 80021a6:	2030      	movs	r0, #48	; 0x30
 80021a8:	f000 f8f1 	bl	800238e <Write4Bits>
	DelayUS(4500);
 80021ac:	f241 1094 	movw	r0, #4500	; 0x1194
 80021b0:	f000 f960 	bl	8002474 <DelayUS>

	Write4Bits(0x02 << 4);
 80021b4:	2020      	movs	r0, #32
 80021b6:	f000 f8ea 	bl	800238e <Write4Bits>
	DelayUS(100);
 80021ba:	2064      	movs	r0, #100	; 0x64
 80021bc:	f000 f95a 	bl	8002474 <DelayUS>

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <LCD_Init+0xd0>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	f043 0320 	orr.w	r3, r3, #32
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f8a2 	bl	8002314 <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF;
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <LCD_Init+0xd4>)
 80021d2:	2204      	movs	r2, #4
 80021d4:	701a      	strb	r2, [r3, #0]
	//LCD_Display();
	dpControl |= LCD_DISPLAYON;
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <LCD_Init+0xd4>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <LCD_Init+0xd4>)
 80021e2:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <LCD_Init+0xd4>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f890 	bl	8002314 <SendCommand>
	LCD_Clear();
 80021f4:	f000 f81e 	bl	8002234 <LCD_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80021f8:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <LCD_Init+0xd8>)
 80021fa:	2202      	movs	r2, #2
 80021fc:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <LCD_Init+0xd8>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	b2db      	uxtb	r3, r3
 8002208:	4618      	mov	r0, r3
 800220a:	f000 f883 	bl	8002314 <SendCommand>
	DelayUS(4500);
 800220e:	f241 1094 	movw	r0, #4500	; 0x1194
 8002212:	f000 f92f 	bl	8002474 <DelayUS>

	LCD_Home();
 8002216:	f000 f814 	bl	8002242 <LCD_Home>

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200002bf 	.word	0x200002bf
 8002224:	200002c0 	.word	0x200002c0
 8002228:	200002bc 	.word	0x200002bc
 800222c:	200002bd 	.word	0x200002bd
 8002230:	200002be 	.word	0x200002be

08002234 <LCD_Clear>:

void LCD_Clear() {
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 8002238:	2001      	movs	r0, #1
 800223a:	f000 f86b 	bl	8002314 <SendCommand>
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}

08002242 <LCD_Home>:

void LCD_Home() {
 8002242:	b580      	push	{r7, lr}
 8002244:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 8002246:	2002      	movs	r0, #2
 8002248:	f000 f864 	bl	8002314 <SendCommand>
	DelayUS(2000);
 800224c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002250:	f000 f910 	bl	8002474 <DelayUS>
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row) {
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	460a      	mov	r2, r1
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	4613      	mov	r3, r2
 8002266:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <LCD_SetCursor+0x5c>)
 800226a:	f107 0408 	add.w	r4, r7, #8
 800226e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= dpRows) {
 8002274:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <LCD_SetCursor+0x60>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	79ba      	ldrb	r2, [r7, #6]
 800227a:	429a      	cmp	r2, r3
 800227c:	d303      	bcc.n	8002286 <LCD_SetCursor+0x2e>
		row = dpRows - 1;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <LCD_SetCursor+0x60>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3b01      	subs	r3, #1
 8002284:	71bb      	strb	r3, [r7, #6]
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8002286:	79bb      	ldrb	r3, [r7, #6]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3318      	adds	r3, #24
 800228c:	443b      	add	r3, r7
 800228e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002292:	b2da      	uxtb	r2, r3
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	4413      	add	r3, r2
 8002298:	b2db      	uxtb	r3, r3
 800229a:	b25b      	sxtb	r3, r3
 800229c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 f835 	bl	8002314 <SendCommand>
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd90      	pop	{r4, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	08007198 	.word	0x08007198
 80022b8:	200002bf 	.word	0x200002bf

080022bc <LCD_display>:
void LCD_Display() {
	dpControl |= LCD_DISPLAYON;
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void LCD_display(const char c1[], const char c2[]) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	LCD_Clear();
 80022c6:	f7ff ffb5 	bl	8002234 <LCD_Clear>
	LCD_SetCursor(0, 0);
 80022ca:	2100      	movs	r1, #0
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7ff ffc3 	bl	8002258 <LCD_SetCursor>
	while (*c1)
 80022d2:	e006      	b.n	80022e2 <LCD_display+0x26>
		SendChar(*c1++);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 f827 	bl	8002330 <SendChar>
	while (*c1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f4      	bne.n	80022d4 <LCD_display+0x18>
	LCD_SetCursor(0, 1);
 80022ea:	2101      	movs	r1, #1
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7ff ffb3 	bl	8002258 <LCD_SetCursor>
	while (*c2)
 80022f2:	e006      	b.n	8002302 <LCD_display+0x46>
		SendChar(*c2++);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	603a      	str	r2, [r7, #0]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 f817 	bl	8002330 <SendChar>
	while (*c2)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f4      	bne.n	80022f4 <LCD_display+0x38>
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <SendCommand>:

void SendCommand(uint8_t cmd) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
	Send(cmd, 0);
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f812 	bl	800234c <Send>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <SendChar>:

void SendChar(uint8_t ch) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
	Send(ch, RS);
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	2101      	movs	r1, #1
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f804 	bl	800234c <Send>
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <Send>:

void Send(uint8_t value, uint8_t mode) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	460a      	mov	r2, r1
 8002356:	71fb      	strb	r3, [r7, #7]
 8002358:	4613      	mov	r3, r2
 800235a:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xF0;
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f023 030f 	bic.w	r3, r3, #15
 8002362:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xF0;
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	73bb      	strb	r3, [r7, #14]
	Write4Bits((highnib) | mode);
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	79bb      	ldrb	r3, [r7, #6]
 800236e:	4313      	orrs	r3, r2
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f80b 	bl	800238e <Write4Bits>
	Write4Bits((lownib) | mode);
 8002378:	7bba      	ldrb	r2, [r7, #14]
 800237a:	79bb      	ldrb	r3, [r7, #6]
 800237c:	4313      	orrs	r3, r2
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f804 	bl	800238e <Write4Bits>
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <Write4Bits>:

void Write4Bits(uint8_t value) {
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(value);
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f808 	bl	80023b0 <ExpanderWrite>
	PulseEnable(value);
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f820 	bl	80023e8 <PulseEnable>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <ExpanderWrite>:

void ExpanderWrite(uint8_t _data) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = _data | dpBacklight;
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <ExpanderWrite+0x30>)
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 80023c6:	f107 020f 	add.w	r2, r7, #15
 80023ca:	230a      	movs	r3, #10
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2301      	movs	r3, #1
 80023d0:	217e      	movs	r1, #126	; 0x7e
 80023d2:	4804      	ldr	r0, [pc, #16]	; (80023e4 <ExpanderWrite+0x34>)
 80023d4:	f001 fbe8 	bl	8003ba8 <HAL_I2C_Master_Transmit>
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200002c0 	.word	0x200002c0
 80023e4:	20000090 	.word	0x20000090

080023e8 <PulseEnable>:

void PulseEnable(uint8_t _data) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(_data | ENABLE);
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ffd8 	bl	80023b0 <ExpanderWrite>
	DelayUS(20);
 8002400:	2014      	movs	r0, #20
 8002402:	f000 f837 	bl	8002474 <DelayUS>

	ExpanderWrite(_data & ~ENABLE);
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	b2db      	uxtb	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ffce 	bl	80023b0 <ExpanderWrite>
	DelayUS(20);
 8002414:	2014      	movs	r0, #20
 8002416:	f000 f82d 	bl	8002474 <DelayUS>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <DelayInit>:

void DelayInit(void) {
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <DelayInit+0x48>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a0f      	ldr	r2, [pc, #60]	; (800246c <DelayInit+0x48>)
 800242e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002432:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <DelayInit+0x48>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a0c      	ldr	r2, [pc, #48]	; (800246c <DelayInit+0x48>)
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243e:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <DelayInit+0x4c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <DelayInit+0x4c>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <DelayInit+0x4c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a07      	ldr	r2, [pc, #28]	; (8002470 <DelayInit+0x4c>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <DelayInit+0x4c>)
 800245a:	2200      	movs	r2, #0
 800245c:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 800245e:	bf00      	nop
	__ASM volatile ("NOP");
 8002460:	bf00      	nop
	__ASM volatile ("NOP");
 8002462:	bf00      	nop
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	e000edf0 	.word	0xe000edf0
 8002470:	e0001000 	.word	0xe0001000

08002474 <DelayUS>:

void DelayUS(uint32_t us) {
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <DelayUS+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <DelayUS+0x44>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0c9a      	lsrs	r2, r3, #18
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <DelayUS+0x48>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <DelayUS+0x48>)
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d8f6      	bhi.n	8002496 <DelayUS+0x22>
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	371c      	adds	r7, #28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	20000018 	.word	0x20000018
 80024b8:	431bde83 	.word	0x431bde83
 80024bc:	e0001000 	.word	0xe0001000

080024c0 <lock_open>:
 */

#include "my_lock.h"


void lock_open(void){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LOCK_PORT, LOCK_PIN, 1);
 80024c4:	2201      	movs	r2, #1
 80024c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ca:	4802      	ldr	r0, [pc, #8]	; (80024d4 <lock_open+0x14>)
 80024cc:	f001 f9f7 	bl	80038be <HAL_GPIO_WritePin>
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40010c00 	.word	0x40010c00

080024d8 <lock_close>:

void lock_close(void){
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LOCK_PORT, LOCK_PIN, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024e2:	4802      	ldr	r0, [pc, #8]	; (80024ec <lock_close+0x14>)
 80024e4:	f001 f9eb 	bl	80038be <HAL_GPIO_WritePin>
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40010c00 	.word	0x40010c00

080024f0 <pw_update_change>:
char password[LENGTH_OF_PASS + 1] = "11111";
char change_pass[LENGTH_OF_PASS + 1] = "11111";
char password_buf[17] = "";

uint8_t pw_idx = 0;
bool pw_update_change(uint8_t number) {
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
	if (pw_idx >= LENGTH_OF_PASS) {
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <pw_update_change+0x3c>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d901      	bls.n	8002506 <pw_update_change+0x16>
		return 0;
 8002502:	2300      	movs	r3, #0
 8002504:	e00c      	b.n	8002520 <pw_update_change+0x30>
	}
	change_pass[pw_idx++] = number + '0';
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <pw_update_change+0x3c>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	b2d1      	uxtb	r1, r2
 800250e:	4a07      	ldr	r2, [pc, #28]	; (800252c <pw_update_change+0x3c>)
 8002510:	7011      	strb	r1, [r2, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	3330      	adds	r3, #48	; 0x30
 8002518:	b2d9      	uxtb	r1, r3
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <pw_update_change+0x40>)
 800251c:	5499      	strb	r1, [r3, r2]
	return 1;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	200002d5 	.word	0x200002d5
 8002530:	20000010 	.word	0x20000010

08002534 <pw_update>:

bool pw_update(uint8_t number) {
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
	if (pw_idx >= 16) {
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <pw_update+0x48>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b0f      	cmp	r3, #15
 8002544:	d901      	bls.n	800254a <pw_update+0x16>
		return 0;
 8002546:	2300      	movs	r3, #0
 8002548:	e012      	b.n	8002570 <pw_update+0x3c>
	}
	password_buf[pw_idx++] = number + '0';
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <pw_update+0x48>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	b2d1      	uxtb	r1, r2
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <pw_update+0x48>)
 8002554:	7011      	strb	r1, [r2, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	3330      	adds	r3, #48	; 0x30
 800255c:	b2d9      	uxtb	r1, r3
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <pw_update+0x4c>)
 8002560:	5499      	strb	r1, [r3, r2]
	password_buf[pw_idx] = '\0';
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <pw_update+0x48>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <pw_update+0x4c>)
 800256a:	2100      	movs	r1, #0
 800256c:	5499      	strb	r1, [r3, r2]
	return 1;
 800256e:	2301      	movs	r3, #1
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	200002d5 	.word	0x200002d5
 8002580:	200002c4 	.word	0x200002c4

08002584 <pw_idxGet>:
uint8_t pw_idxGet(void) {
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
	return pw_idx;
 8002588:	4b02      	ldr	r3, [pc, #8]	; (8002594 <pw_idxGet+0x10>)
 800258a:	781b      	ldrb	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	200002d5 	.word	0x200002d5

08002598 <pw_checkInPW_change>:
char* pw_ReturnInput(void) {
	return password_buf;
}
bool pw_checkInPW_change(void) {
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
	return strcmp(change_pass, password_buf) == 0;
 800259c:	4905      	ldr	r1, [pc, #20]	; (80025b4 <pw_checkInPW_change+0x1c>)
 800259e:	4806      	ldr	r0, [pc, #24]	; (80025b8 <pw_checkInPW_change+0x20>)
 80025a0:	f7fd fdd6 	bl	8000150 <strcmp>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf0c      	ite	eq
 80025aa:	2301      	moveq	r3, #1
 80025ac:	2300      	movne	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200002c4 	.word	0x200002c4
 80025b8:	20000010 	.word	0x20000010

080025bc <pw_checkInPW>:
bool pw_checkInPW(void) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
	return strcmp(password, password_buf) == 0;
 80025c0:	4905      	ldr	r1, [pc, #20]	; (80025d8 <pw_checkInPW+0x1c>)
 80025c2:	4806      	ldr	r0, [pc, #24]	; (80025dc <pw_checkInPW+0x20>)
 80025c4:	f7fd fdc4 	bl	8000150 <strcmp>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	200002c4 	.word	0x200002c4
 80025dc:	20000008 	.word	0x20000008

080025e0 <pw_ResetIdx>:
void pw_ResetIdx(void) {
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
	pw_idx = 0;
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <pw_ResetIdx+0x14>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	200002d5 	.word	0x200002d5

080025f8 <pw_UpdatePass>:
void pw_UpdatePass(void) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
	strcpy(password, change_pass);
 80025fc:	4902      	ldr	r1, [pc, #8]	; (8002608 <pw_UpdatePass+0x10>)
 80025fe:	4803      	ldr	r0, [pc, #12]	; (800260c <pw_UpdatePass+0x14>)
 8002600:	f004 f946 	bl	8006890 <strcpy>
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000010 	.word	0x20000010
 800260c:	20000008 	.word	0x20000008

08002610 <sch_init>:
struct {
	struct task *top;
} stack_task;
//******************START TIMER*********************
extern TIM_HandleTypeDef htim2;
void sch_init(void) {
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <sch_init+0x10>)
 8002616:	f002 fa7f 	bl	8004b18 <HAL_TIM_Base_Start_IT>
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	2000012c 	.word	0x2000012c

08002624 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d101      	bne.n	800263c <HAL_TIM_PeriodElapsedCallback+0x18>
		sch_update();
 8002638:	f000 f86e 	bl	8002718 <sch_update>
	}
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	2000012c 	.word	0x2000012c

08002648 <sch_add_task>:
 delay - the amount of time after which the task will run
 period - the amount of cycle time to run task
 * @retval:	1 - add successfully
 * 			0 - add badly
 * */
bool sch_add_task(void (*pTask)(), uint32_t delay, uint32_t period) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
	struct task *my_task = (struct task*) malloc(sizeof(struct task));
 8002654:	2010      	movs	r0, #16
 8002656:	f003 ffeb 	bl	8006630 <malloc>
 800265a:	4603      	mov	r3, r0
 800265c:	617b      	str	r3, [r7, #20]
	my_task->pTask = pTask;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	601a      	str	r2, [r3, #0]
	my_task->counter = delay * FREQ_OF_TIM / 1000;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f242 7210 	movw	r2, #10000	; 0x2710
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	4a28      	ldr	r2, [pc, #160]	; (8002710 <sch_add_task+0xc8>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	099a      	lsrs	r2, r3, #6
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	605a      	str	r2, [r3, #4]
	my_task->period = period;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
	my_task->next_task = 0;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]
	if (stack_task.top == 0) {
 8002686:	4b23      	ldr	r3, [pc, #140]	; (8002714 <sch_add_task+0xcc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d104      	bne.n	8002698 <sch_add_task+0x50>
		stack_task.top = my_task;
 800268e:	4a21      	ldr	r2, [pc, #132]	; (8002714 <sch_add_task+0xcc>)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	6013      	str	r3, [r2, #0]
		// stack_task.bottom = stack_task.top;
		// stack_task.time_length = stack_task.top->counter;
		return 1;
 8002694:	2301      	movs	r3, #1
 8002696:	e037      	b.n	8002708 <sch_add_task+0xc0>
	//     stack_task.bottom->next_task = my_task;
	//     stack_task.bottom = stack_task.bottom->next_task;
	//     stack_task.time_length += my_task->counter;
	//     return 1;
	// }
	struct task *pre = stack_task.top;
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <sch_add_task+0xcc>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61fb      	str	r3, [r7, #28]
	struct task *cur = stack_task.top;
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <sch_add_task+0xcc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	61bb      	str	r3, [r7, #24]
	while (cur && my_task->counter >= cur->counter) {
 80026a4:	e00b      	b.n	80026be <sch_add_task+0x76>
		my_task->counter = my_task->counter - cur->counter;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	1ad2      	subs	r2, r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	605a      	str	r2, [r3, #4]
		pre = cur;
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	61fb      	str	r3, [r7, #28]
		cur = cur->next_task;
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
	while (cur && my_task->counter >= cur->counter) {
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <sch_add_task+0x88>
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d2ea      	bcs.n	80026a6 <sch_add_task+0x5e>
	}
	if (pre != cur) {
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d006      	beq.n	80026e6 <sch_add_task+0x9e>
		pre->next_task = my_task;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	60da      	str	r2, [r3, #12]
		my_task->next_task = cur;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	e005      	b.n	80026f2 <sch_add_task+0xaa>
	} else {
		my_task->next_task = cur;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	60da      	str	r2, [r3, #12]
		stack_task.top = my_task;
 80026ec:	4a09      	ldr	r2, [pc, #36]	; (8002714 <sch_add_task+0xcc>)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	6013      	str	r3, [r2, #0]
	}
	if (cur)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <sch_add_task+0xbe>
		cur->counter -= my_task->counter;
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	1ad2      	subs	r2, r2, r3
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	605a      	str	r2, [r3, #4]
	return 1;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	10624dd3 	.word	0x10624dd3
 8002714:	200002d8 	.word	0x200002d8

08002718 <sch_update>:
/*
 * @brief:	decrease the remaining time of the top task
 * @para:	none
 * @retval:	none
 * */
void sch_update(void) {
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0

	if (stack_task.top == 0){
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <sch_update+0x2c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <sch_update+0x22>
		return;
	}
	if (stack_task.top->counter > 0) {
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <sch_update+0x2c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <sch_update+0x24>
		stack_task.top->counter--;
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <sch_update+0x2c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	3a01      	subs	r2, #1
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	e000      	b.n	800273c <sch_update+0x24>
		return;
 800273a:	bf00      	nop
	}
}
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	200002d8 	.word	0x200002d8

08002748 <sch_delete_task>:
/*
 * @brief:	delete a task in the stack and release the memory
 * @para:	del_task - the task need to be deleted
 * @retval:	none
 * */
static void sch_delete_task(struct task *del_task) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	if (del_task == 0) {
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <sch_delete_task+0x16>
		return;
	}
	free(del_task);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f003 ff72 	bl	8006640 <free>
 800275c:	e000      	b.n	8002760 <sch_delete_task+0x18>
		return;
 800275e:	bf00      	nop
}
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <sch_dispatch>:
 * @brief:	run the top task and update if over remainning time
 * @para:	none
 * @retval:	1 - run successfully
 *			0 - run badly
 * */
bool sch_dispatch(void) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
	if (stack_task.top == 0)
 800276e:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <sch_dispatch+0x68>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <sch_dispatch+0x12>
		return 0;
 8002776:	2300      	movs	r3, #0
 8002778:	e026      	b.n	80027c8 <sch_dispatch+0x60>
	if (stack_task.top->counter == 0) {
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <sch_dispatch+0x68>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d120      	bne.n	80027c6 <sch_dispatch+0x5e>
		(*stack_task.top->pTask)();
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <sch_dispatch+0x68>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4798      	blx	r3
		struct task *temp = stack_task.top;
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <sch_dispatch+0x68>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	607b      	str	r3, [r7, #4]
		stack_task.top = stack_task.top->next_task;
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <sch_dispatch+0x68>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <sch_dispatch+0x68>)
 800279a:	6013      	str	r3, [r2, #0]
		temp->next_task = 0;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
		if (temp->period != 0) {
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <sch_dispatch+0x54>
			sch_add_task(temp->pTask, temp->period, temp->period);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6899      	ldr	r1, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f7ff ff46 	bl	8002648 <sch_add_task>
		}
		sch_delete_task(temp);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ffc3 	bl	8002748 <sch_delete_task>
		return 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <sch_dispatch+0x60>
	}
	return 0;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	200002d8 	.word	0x200002d8

080027d4 <sch_remove_task>:
void sch_remove_task(void (*pTask)()) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	struct task *cur = stack_task.top;
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <sch_remove_task+0x5c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60fb      	str	r3, [r7, #12]
	struct task *pre = cur;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	60bb      	str	r3, [r7, #8]
	while (cur) {
 80027e6:	e01b      	b.n	8002820 <sch_remove_task+0x4c>
		if (pTask == cur->pTask) {
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d111      	bne.n	8002816 <sch_remove_task+0x42>
			if (pre == cur) {
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d105      	bne.n	8002806 <sch_remove_task+0x32>
				stack_task.top = stack_task.top->next_task;
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <sch_remove_task+0x5c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <sch_remove_task+0x5c>)
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	e003      	b.n	800280e <sch_remove_task+0x3a>
			} else {
				pre->next_task = cur->next_task;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	60da      	str	r2, [r3, #12]
			}
			sch_delete_task(cur);
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7ff ff9a 	bl	8002748 <sch_delete_task>
			return;
 8002814:	e008      	b.n	8002828 <sch_remove_task+0x54>
		}
		pre = cur;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	60bb      	str	r3, [r7, #8]
		cur = cur->next_task;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	60fb      	str	r3, [r7, #12]
	while (cur) {
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e0      	bne.n	80027e8 <sch_remove_task+0x14>
	}
	return;
 8002826:	bf00      	nop
}
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200002d8 	.word	0x200002d8

08002834 <hcsr04_init>:
uint32_t Difference2 = 0;
uint8_t Is_First_Captured2 = 0;  // is the first value captured ?
uint32_t Distance2 = 0;
extern TIM_HandleTypeDef htim1;

void hcsr04_init(void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002838:	2100      	movs	r1, #0
 800283a:	4804      	ldr	r0, [pc, #16]	; (800284c <hcsr04_init+0x18>)
 800283c:	f002 fa0e 	bl	8004c5c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8002840:	210c      	movs	r1, #12
 8002842:	4802      	ldr	r0, [pc, #8]	; (800284c <hcsr04_init+0x18>)
 8002844:	f002 fa0a 	bl	8004c5c <HAL_TIM_IC_Start_IT>
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200000e4 	.word	0x200000e4

08002850 <hcsr04_read>:

void hcsr04_read(void) {
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SOUND_SS_PORT, SOUND_SS_TRI1_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8002854:	2201      	movs	r2, #1
 8002856:	2120      	movs	r1, #32
 8002858:	4813      	ldr	r0, [pc, #76]	; (80028a8 <hcsr04_read+0x58>)
 800285a:	f001 f830 	bl	80038be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SOUND_SS_PORT, SOUND_SS_TRI2_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 800285e:	2201      	movs	r2, #1
 8002860:	2140      	movs	r1, #64	; 0x40
 8002862:	4811      	ldr	r0, [pc, #68]	; (80028a8 <hcsr04_read+0x58>)
 8002864:	f001 f82b 	bl	80038be <HAL_GPIO_WritePin>
	DelayUS(10);  // wait for 10 us
 8002868:	200a      	movs	r0, #10
 800286a:	f7ff fe03 	bl	8002474 <DelayUS>
	HAL_GPIO_WritePin(SOUND_SS_PORT, SOUND_SS_TRI1_PIN, 0); // pull the TRIG pin low
 800286e:	2200      	movs	r2, #0
 8002870:	2120      	movs	r1, #32
 8002872:	480d      	ldr	r0, [pc, #52]	; (80028a8 <hcsr04_read+0x58>)
 8002874:	f001 f823 	bl	80038be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SOUND_SS_PORT, SOUND_SS_TRI2_PIN, 0); // pull the TRIG pin HIGH
 8002878:	2200      	movs	r2, #0
 800287a:	2140      	movs	r1, #64	; 0x40
 800287c:	480a      	ldr	r0, [pc, #40]	; (80028a8 <hcsr04_read+0x58>)
 800287e:	f001 f81e 	bl	80038be <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <hcsr04_read+0x5c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <hcsr04_read+0x5c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0202 	orr.w	r2, r2, #2
 8002890:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <hcsr04_read+0x5c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <hcsr04_read+0x5c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0210 	orr.w	r2, r2, #16
 80028a0:	60da      	str	r2, [r3, #12]
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40010800 	.word	0x40010800
 80028ac:	200000e4 	.word	0x200000e4

080028b0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7f1b      	ldrb	r3, [r3, #28]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	f040 8084 	bne.w	80029ca <HAL_TIM_IC_CaptureCallback+0x11a>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 80028c2:	4b89      	ldr	r3, [pc, #548]	; (8002ae8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d11a      	bne.n	8002900 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80028ca:	2100      	movs	r1, #0
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f002 fd3d 	bl	800534c <HAL_TIM_ReadCapturedValue>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4a85      	ldr	r2, [pc, #532]	; (8002aec <HAL_TIM_IC_CaptureCallback+0x23c>)
 80028d6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80028d8:	4b83      	ldr	r3, [pc, #524]	; (8002ae8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a1a      	ldr	r2, [r3, #32]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 020a 	bic.w	r2, r2, #10
 80028ec:	621a      	str	r2, [r3, #32]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6a1a      	ldr	r2, [r3, #32]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0202 	orr.w	r2, r2, #2
 80028fc:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
		}

	}
}
 80028fe:	e0eb      	b.n	8002ad8 <HAL_TIM_IC_CaptureCallback+0x228>
		else if (Is_First_Captured == 1)   // if the first is already captured
 8002900:	4b79      	ldr	r3, [pc, #484]	; (8002ae8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	f040 80e7 	bne.w	8002ad8 <HAL_TIM_IC_CaptureCallback+0x228>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 800290a:	2100      	movs	r1, #0
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f002 fd1d 	bl	800534c <HAL_TIM_ReadCapturedValue>
 8002912:	4603      	mov	r3, r0
 8002914:	4a76      	ldr	r2, [pc, #472]	; (8002af0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8002916:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2200      	movs	r2, #0
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8002920:	4b73      	ldr	r3, [pc, #460]	; (8002af0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b71      	ldr	r3, [pc, #452]	; (8002aec <HAL_TIM_IC_CaptureCallback+0x23c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d907      	bls.n	800293c <HAL_TIM_IC_CaptureCallback+0x8c>
				Difference = IC_Val2 - IC_Val1;
 800292c:	4b70      	ldr	r3, [pc, #448]	; (8002af0 <HAL_TIM_IC_CaptureCallback+0x240>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b6e      	ldr	r3, [pc, #440]	; (8002aec <HAL_TIM_IC_CaptureCallback+0x23c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	4a6f      	ldr	r2, [pc, #444]	; (8002af4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e00f      	b.n	800295c <HAL_TIM_IC_CaptureCallback+0xac>
			else if (IC_Val1 > IC_Val2) {
 800293c:	4b6b      	ldr	r3, [pc, #428]	; (8002aec <HAL_TIM_IC_CaptureCallback+0x23c>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b6b      	ldr	r3, [pc, #428]	; (8002af0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d909      	bls.n	800295c <HAL_TIM_IC_CaptureCallback+0xac>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8002948:	4b69      	ldr	r3, [pc, #420]	; (8002af0 <HAL_TIM_IC_CaptureCallback+0x240>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b67      	ldr	r3, [pc, #412]	; (8002aec <HAL_TIM_IC_CaptureCallback+0x23c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002956:	33ff      	adds	r3, #255	; 0xff
 8002958:	4a66      	ldr	r2, [pc, #408]	; (8002af4 <HAL_TIM_IC_CaptureCallback+0x244>)
 800295a:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034 / 2;
 800295c:	4b65      	ldr	r3, [pc, #404]	; (8002af4 <HAL_TIM_IC_CaptureCallback+0x244>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fd41 	bl	80003e8 <__aeabi_ui2d>
 8002966:	a35e      	add	r3, pc, #376	; (adr r3, 8002ae0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd fdb6 	bl	80004dc <__aeabi_dmul>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002980:	f7fd fed6 	bl	8000730 <__aeabi_ddiv>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fd ffb8 	bl	8000900 <__aeabi_d2uiz>
 8002990:	4603      	mov	r3, r0
 8002992:	4a59      	ldr	r2, [pc, #356]	; (8002af8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8002994:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8002996:	4b54      	ldr	r3, [pc, #336]	; (8002ae8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6a1a      	ldr	r2, [r3, #32]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 020a 	bic.w	r2, r2, #10
 80029aa:	621a      	str	r2, [r3, #32]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a12      	ldr	r2, [r2, #32]
 80029b6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80029b8:	4b50      	ldr	r3, [pc, #320]	; (8002afc <HAL_TIM_IC_CaptureCallback+0x24c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	4b4f      	ldr	r3, [pc, #316]	; (8002afc <HAL_TIM_IC_CaptureCallback+0x24c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0202 	bic.w	r2, r2, #2
 80029c6:	60da      	str	r2, [r3, #12]
}
 80029c8:	e086      	b.n	8002ad8 <HAL_TIM_IC_CaptureCallback+0x228>
	} else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7f1b      	ldrb	r3, [r3, #28]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	f040 8082 	bne.w	8002ad8 <HAL_TIM_IC_CaptureCallback+0x228>
		if (Is_First_Captured2 == 0) // if the first value is not captured
 80029d4:	4b4a      	ldr	r3, [pc, #296]	; (8002b00 <HAL_TIM_IC_CaptureCallback+0x250>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d11a      	bne.n	8002a12 <HAL_TIM_IC_CaptureCallback+0x162>
			IC_Val21 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 80029dc:	210c      	movs	r1, #12
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f002 fcb4 	bl	800534c <HAL_TIM_ReadCapturedValue>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4a47      	ldr	r2, [pc, #284]	; (8002b04 <HAL_TIM_IC_CaptureCallback+0x254>)
 80029e8:	6013      	str	r3, [r2, #0]
			Is_First_Captured2 = 1;  // set the first captured as true
 80029ea:	4b45      	ldr	r3, [pc, #276]	; (8002b00 <HAL_TIM_IC_CaptureCallback+0x250>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6a1a      	ldr	r2, [r3, #32]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029fe:	621a      	str	r2, [r3, #32]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6a1a      	ldr	r2, [r3, #32]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a0e:	621a      	str	r2, [r3, #32]
}
 8002a10:	e062      	b.n	8002ad8 <HAL_TIM_IC_CaptureCallback+0x228>
		else if (Is_First_Captured2 == 1)   // if the first is already captured
 8002a12:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_TIM_IC_CaptureCallback+0x250>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d15e      	bne.n	8002ad8 <HAL_TIM_IC_CaptureCallback+0x228>
			IC_Val22 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read second value
 8002a1a:	210c      	movs	r1, #12
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f002 fc95 	bl	800534c <HAL_TIM_ReadCapturedValue>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a38      	ldr	r2, [pc, #224]	; (8002b08 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002a26:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val22 > IC_Val21) {
 8002a30:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b33      	ldr	r3, [pc, #204]	; (8002b04 <HAL_TIM_IC_CaptureCallback+0x254>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d907      	bls.n	8002a4c <HAL_TIM_IC_CaptureCallback+0x19c>
				Difference2 = IC_Val22 - IC_Val21;
 8002a3c:	4b32      	ldr	r3, [pc, #200]	; (8002b08 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b30      	ldr	r3, [pc, #192]	; (8002b04 <HAL_TIM_IC_CaptureCallback+0x254>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	4a31      	ldr	r2, [pc, #196]	; (8002b0c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e00f      	b.n	8002a6c <HAL_TIM_IC_CaptureCallback+0x1bc>
			else if (IC_Val21 > IC_Val22) {
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_TIM_IC_CaptureCallback+0x254>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d909      	bls.n	8002a6c <HAL_TIM_IC_CaptureCallback+0x1bc>
				Difference2 = (0xffff - IC_Val21) + IC_Val22;
 8002a58:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <HAL_TIM_IC_CaptureCallback+0x254>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002a66:	33ff      	adds	r3, #255	; 0xff
 8002a68:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002a6a:	6013      	str	r3, [r2, #0]
			Distance2 = Difference2 * .034 / 2;
 8002a6c:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fcb9 	bl	80003e8 <__aeabi_ui2d>
 8002a76:	a31a      	add	r3, pc, #104	; (adr r3, 8002ae0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fd fd2e 	bl	80004dc <__aeabi_dmul>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a90:	f7fd fe4e 	bl	8000730 <__aeabi_ddiv>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f7fd ff30 	bl	8000900 <__aeabi_d2uiz>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002aa4:	6013      	str	r3, [r2, #0]
			Is_First_Captured2 = 0; // set it back to false
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_TIM_IC_CaptureCallback+0x250>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a1a      	ldr	r2, [r3, #32]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aba:	621a      	str	r2, [r3, #32]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a12      	ldr	r2, [r2, #32]
 8002ac6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0210 	bic.w	r2, r2, #16
 8002ad6:	60da      	str	r2, [r3, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	b020c49c 	.word	0xb020c49c
 8002ae4:	3fa16872 	.word	0x3fa16872
 8002ae8:	200002e8 	.word	0x200002e8
 8002aec:	200002dc 	.word	0x200002dc
 8002af0:	200002e0 	.word	0x200002e0
 8002af4:	200002e4 	.word	0x200002e4
 8002af8:	200002ec 	.word	0x200002ec
 8002afc:	200000e4 	.word	0x200000e4
 8002b00:	200002fc 	.word	0x200002fc
 8002b04:	200002f0 	.word	0x200002f0
 8002b08:	200002f4 	.word	0x200002f4
 8002b0c:	200002f8 	.word	0x200002f8
 8002b10:	20000300 	.word	0x20000300

08002b14 <toggle_led>:
 *      Author: HP
 */

#include"my_system.h"

static void toggle_led(void) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(DEBUG_LED_PORT, DEBUG_LED_PIN);
 8002b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b1c:	4802      	ldr	r0, [pc, #8]	; (8002b28 <toggle_led+0x14>)
 8002b1e:	f000 fee6 	bl	80038ee <HAL_GPIO_TogglePin>
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40011000 	.word	0x40011000

08002b2c <init>:
	sch_add_task(lock_close, 5000, 0);
}
#endif


void init(void) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	sch_init();
 8002b30:	f7ff fd6e 	bl	8002610 <sch_init>
	LCD_Init();
 8002b34:	f7ff fb10 	bl	8002158 <LCD_Init>
	LCD_Clear();
 8002b38:	f7ff fb7c 	bl	8002234 <LCD_Clear>
	keypad_init();
 8002b3c:	f7ff fa4a 	bl	8001fd4 <keypad_init>
	button_init();
 8002b40:	f7fe f958 	bl	8000df4 <button_init>
	fp_init();
 8002b44:	f7fe fba4 	bl	8001290 <fp_init>
	hcsr04_init();
 8002b48:	f7ff fe74 	bl	8002834 <hcsr04_init>
	esp32_init();
 8002b4c:	f7fe fae8 	bl	8001120 <esp32_init>
	sch_add_task(hcsr04_read, 0, 130);
 8002b50:	2282      	movs	r2, #130	; 0x82
 8002b52:	2100      	movs	r1, #0
 8002b54:	480c      	ldr	r0, [pc, #48]	; (8002b88 <init+0x5c>)
 8002b56:	f7ff fd77 	bl	8002648 <sch_add_task>
	sch_add_task(button_read, 0, 50);
 8002b5a:	2232      	movs	r2, #50	; 0x32
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	480b      	ldr	r0, [pc, #44]	; (8002b8c <init+0x60>)
 8002b60:	f7ff fd72 	bl	8002648 <sch_add_task>
	sch_add_task(keypad_read, 0, 75);
 8002b64:	224b      	movs	r2, #75	; 0x4b
 8002b66:	2100      	movs	r1, #0
 8002b68:	4809      	ldr	r0, [pc, #36]	; (8002b90 <init+0x64>)
 8002b6a:	f7ff fd6d 	bl	8002648 <sch_add_task>
	sch_add_task(fsm_lock, 0, 10);
 8002b6e:	220a      	movs	r2, #10
 8002b70:	2100      	movs	r1, #0
 8002b72:	4808      	ldr	r0, [pc, #32]	; (8002b94 <init+0x68>)
 8002b74:	f7ff fd68 	bl	8002648 <sch_add_task>
	sch_add_task(toggle_led, 0, ONE_SECOND);
 8002b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4806      	ldr	r0, [pc, #24]	; (8002b98 <init+0x6c>)
 8002b80:	f7ff fd62 	bl	8002648 <sch_add_task>
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	08002851 	.word	0x08002851
 8002b8c:	08000ec5 	.word	0x08000ec5
 8002b90:	08002011 	.word	0x08002011
 8002b94:	080017a5 	.word	0x080017a5
 8002b98:	08002b15 	.word	0x08002b15

08002b9c <loop>:


void loop(void) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	sch_dispatch();
 8002ba0:	f7ff fde2 	bl	8002768 <sch_dispatch>
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <uart_fp_init>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;
static uint8_t uart_data1;
static uint8_t uart_data3;
void uart_fp_init(void) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &uart_data1, 1);
 8002bac:	2201      	movs	r2, #1
 8002bae:	4903      	ldr	r1, [pc, #12]	; (8002bbc <uart_fp_init+0x14>)
 8002bb0:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <uart_fp_init+0x18>)
 8002bb2:	f002 ff98 	bl	8005ae6 <HAL_UART_Receive_IT>
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000304 	.word	0x20000304
 8002bc0:	20000174 	.word	0x20000174

08002bc4 <uart_esp32_init>:

void uart_esp32_init(void) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &uart_data3, 1);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4903      	ldr	r1, [pc, #12]	; (8002bd8 <uart_esp32_init+0x14>)
 8002bcc:	4803      	ldr	r0, [pc, #12]	; (8002bdc <uart_esp32_init+0x18>)
 8002bce:	f002 ff8a 	bl	8005ae6 <HAL_UART_Receive_IT>
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000305 	.word	0x20000305
 8002bdc:	20000204 	.word	0x20000204

08002be0 <HAL_UART_RxCpltCallback>:
void uart_SendPressedKey(uint8_t key) {
	char str[30];
	uint8_t len = sprintf(str, "#Key:%u!\n", key);
	HAL_UART_Transmit(&huart2, (void*) str, len, 10);
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_UART_RxCpltCallback+0x50>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d10a      	bne.n	8002c0a <HAL_UART_RxCpltCallback+0x2a>
		fp_receive_data(uart_data1);
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_UART_RxCpltCallback+0x54>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe fd89 	bl	8001710 <fp_receive_data>
		HAL_UART_Receive_IT(&huart1, &uart_data1, 1);
 8002bfe:	2201      	movs	r2, #1
 8002c00:	490c      	ldr	r1, [pc, #48]	; (8002c34 <HAL_UART_RxCpltCallback+0x54>)
 8002c02:	480b      	ldr	r0, [pc, #44]	; (8002c30 <HAL_UART_RxCpltCallback+0x50>)
 8002c04:	f002 ff6f 	bl	8005ae6 <HAL_UART_Receive_IT>
	} else if (huart3.Instance) {
		esp32_receive_data(uart_data3);
		HAL_UART_Receive_IT(&huart3, &uart_data3, 1);
	}

}
 8002c08:	e00d      	b.n	8002c26 <HAL_UART_RxCpltCallback+0x46>
	} else if (huart3.Instance) {
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_UART_RxCpltCallback+0x58>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_UART_RxCpltCallback+0x46>
		esp32_receive_data(uart_data3);
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_UART_RxCpltCallback+0x5c>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fa88 	bl	800112c <esp32_receive_data>
		HAL_UART_Receive_IT(&huart3, &uart_data3, 1);
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4907      	ldr	r1, [pc, #28]	; (8002c3c <HAL_UART_RxCpltCallback+0x5c>)
 8002c20:	4805      	ldr	r0, [pc, #20]	; (8002c38 <HAL_UART_RxCpltCallback+0x58>)
 8002c22:	f002 ff60 	bl	8005ae6 <HAL_UART_Receive_IT>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000174 	.word	0x20000174
 8002c34:	20000304 	.word	0x20000304
 8002c38:	20000204 	.word	0x20000204
 8002c3c:	20000305 	.word	0x20000305

08002c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <HAL_MspInit+0x5c>)
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <HAL_MspInit+0x5c>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6193      	str	r3, [r2, #24]
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_MspInit+0x5c>)
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_MspInit+0x5c>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <HAL_MspInit+0x5c>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c68:	61d3      	str	r3, [r2, #28]
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_MspInit+0x5c>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_MspInit+0x60>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_MspInit+0x60>)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40010000 	.word	0x40010000

08002ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 0310 	add.w	r3, r7, #16
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <HAL_I2C_MspInit+0x70>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d123      	bne.n	8002d0c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc4:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_I2C_MspInit+0x74>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <HAL_I2C_MspInit+0x74>)
 8002cca:	f043 0308 	orr.w	r3, r3, #8
 8002cce:	6193      	str	r3, [r2, #24]
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_I2C_MspInit+0x74>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cdc:	23c0      	movs	r3, #192	; 0xc0
 8002cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ce0:	2312      	movs	r3, #18
 8002ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce8:	f107 0310 	add.w	r3, r7, #16
 8002cec:	4619      	mov	r1, r3
 8002cee:	480b      	ldr	r0, [pc, #44]	; (8002d1c <HAL_I2C_MspInit+0x78>)
 8002cf0:	f000 fc4a 	bl	8003588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_I2C_MspInit+0x74>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_I2C_MspInit+0x74>)
 8002cfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cfe:	61d3      	str	r3, [r2, #28]
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_I2C_MspInit+0x74>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d0c:	bf00      	nop
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40005400 	.word	0x40005400
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40010c00 	.word	0x40010c00

08002d20 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 0310 	add.w	r3, r7, #16
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <HAL_TIM_IC_MspInit+0x84>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d12c      	bne.n	8002d9a <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_TIM_IC_MspInit+0x88>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <HAL_TIM_IC_MspInit+0x88>)
 8002d46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d4a:	6193      	str	r3, [r2, #24]
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_TIM_IC_MspInit+0x88>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <HAL_TIM_IC_MspInit+0x88>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	4a12      	ldr	r2, [pc, #72]	; (8002da8 <HAL_TIM_IC_MspInit+0x88>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	6193      	str	r3, [r2, #24]
 8002d64:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_TIM_IC_MspInit+0x88>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002d70:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002d74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7e:	f107 0310 	add.w	r3, r7, #16
 8002d82:	4619      	mov	r1, r3
 8002d84:	4809      	ldr	r0, [pc, #36]	; (8002dac <HAL_TIM_IC_MspInit+0x8c>)
 8002d86:	f000 fbff 	bl	8003588 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	201b      	movs	r0, #27
 8002d90:	f000 fb11 	bl	80033b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002d94:	201b      	movs	r0, #27
 8002d96:	f000 fb2a 	bl	80033ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d9a:	bf00      	nop
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40012c00 	.word	0x40012c00
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40010800 	.word	0x40010800

08002db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc0:	d113      	bne.n	8002dea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <HAL_TIM_Base_MspInit+0x44>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <HAL_TIM_Base_MspInit+0x44>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	61d3      	str	r3, [r2, #28]
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_TIM_Base_MspInit+0x44>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2100      	movs	r1, #0
 8002dde:	201c      	movs	r0, #28
 8002de0:	f000 fae9 	bl	80033b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002de4:	201c      	movs	r0, #28
 8002de6:	f000 fb02 	bl	80033ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000

08002df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08c      	sub	sp, #48	; 0x30
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 0320 	add.w	r3, r7, #32
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5b      	ldr	r2, [pc, #364]	; (8002f80 <HAL_UART_MspInit+0x188>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d13a      	bne.n	8002e8e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e18:	4b5a      	ldr	r3, [pc, #360]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	4a59      	ldr	r2, [pc, #356]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e22:	6193      	str	r3, [r2, #24]
 8002e24:	4b57      	ldr	r3, [pc, #348]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e30:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	4a53      	ldr	r2, [pc, #332]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002e36:	f043 0304 	orr.w	r3, r3, #4
 8002e3a:	6193      	str	r3, [r2, #24]
 8002e3c:	4b51      	ldr	r3, [pc, #324]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e52:	2303      	movs	r3, #3
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e56:	f107 0320 	add.w	r3, r7, #32
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	484a      	ldr	r0, [pc, #296]	; (8002f88 <HAL_UART_MspInit+0x190>)
 8002e5e:	f000 fb93 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e70:	f107 0320 	add.w	r3, r7, #32
 8002e74:	4619      	mov	r1, r3
 8002e76:	4844      	ldr	r0, [pc, #272]	; (8002f88 <HAL_UART_MspInit+0x190>)
 8002e78:	f000 fb86 	bl	8003588 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2100      	movs	r1, #0
 8002e80:	2025      	movs	r0, #37	; 0x25
 8002e82:	f000 fa98 	bl	80033b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e86:	2025      	movs	r0, #37	; 0x25
 8002e88:	f000 fab1 	bl	80033ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e8c:	e074      	b.n	8002f78 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a3e      	ldr	r2, [pc, #248]	; (8002f8c <HAL_UART_MspInit+0x194>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d130      	bne.n	8002efa <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e98:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea2:	61d3      	str	r3, [r2, #28]
 8002ea4:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb0:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	4a33      	ldr	r2, [pc, #204]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	6193      	str	r3, [r2, #24]
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ec8:	2304      	movs	r3, #4
 8002eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed4:	f107 0320 	add.w	r3, r7, #32
 8002ed8:	4619      	mov	r1, r3
 8002eda:	482b      	ldr	r0, [pc, #172]	; (8002f88 <HAL_UART_MspInit+0x190>)
 8002edc:	f000 fb54 	bl	8003588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eec:	f107 0320 	add.w	r3, r7, #32
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4825      	ldr	r0, [pc, #148]	; (8002f88 <HAL_UART_MspInit+0x190>)
 8002ef4:	f000 fb48 	bl	8003588 <HAL_GPIO_Init>
}
 8002ef8:	e03e      	b.n	8002f78 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <HAL_UART_MspInit+0x198>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d139      	bne.n	8002f78 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0e:	61d3      	str	r3, [r2, #28]
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002f22:	f043 0308 	orr.w	r3, r3, #8
 8002f26:	6193      	str	r3, [r2, #24]
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <HAL_UART_MspInit+0x18c>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f42:	f107 0320 	add.w	r3, r7, #32
 8002f46:	4619      	mov	r1, r3
 8002f48:	4812      	ldr	r0, [pc, #72]	; (8002f94 <HAL_UART_MspInit+0x19c>)
 8002f4a:	f000 fb1d 	bl	8003588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f54:	2300      	movs	r3, #0
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5c:	f107 0320 	add.w	r3, r7, #32
 8002f60:	4619      	mov	r1, r3
 8002f62:	480c      	ldr	r0, [pc, #48]	; (8002f94 <HAL_UART_MspInit+0x19c>)
 8002f64:	f000 fb10 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	2027      	movs	r0, #39	; 0x27
 8002f6e:	f000 fa22 	bl	80033b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f72:	2027      	movs	r0, #39	; 0x27
 8002f74:	f000 fa3b 	bl	80033ee <HAL_NVIC_EnableIRQ>
}
 8002f78:	bf00      	nop
 8002f7a:	3730      	adds	r7, #48	; 0x30
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40013800 	.word	0x40013800
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40010800 	.word	0x40010800
 8002f8c:	40004400 	.word	0x40004400
 8002f90:	40004800 	.word	0x40004800
 8002f94:	40010c00 	.word	0x40010c00

08002f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f9c:	e7fe      	b.n	8002f9c <NMI_Handler+0x4>

08002f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa2:	e7fe      	b.n	8002fa2 <HardFault_Handler+0x4>

08002fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa8:	e7fe      	b.n	8002fa8 <MemManage_Handler+0x4>

08002faa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fae:	e7fe      	b.n	8002fae <BusFault_Handler+0x4>

08002fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb4:	e7fe      	b.n	8002fb4 <UsageFault_Handler+0x4>

08002fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fde:	f000 f8d3 	bl	8003188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <TIM1_CC_IRQHandler+0x10>)
 8002fee:	f001 ff41 	bl	8004e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200000e4 	.word	0x200000e4

08002ffc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003000:	4802      	ldr	r0, [pc, #8]	; (800300c <TIM2_IRQHandler+0x10>)
 8003002:	f001 ff37 	bl	8004e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000012c 	.word	0x2000012c

08003010 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003014:	4802      	ldr	r0, [pc, #8]	; (8003020 <USART1_IRQHandler+0x10>)
 8003016:	f002 fd8b 	bl	8005b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000174 	.word	0x20000174

08003024 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003028:	4802      	ldr	r0, [pc, #8]	; (8003034 <USART3_IRQHandler+0x10>)
 800302a:	f002 fd81 	bl	8005b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000204 	.word	0x20000204

08003038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003040:	4a14      	ldr	r2, [pc, #80]	; (8003094 <_sbrk+0x5c>)
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <_sbrk+0x60>)
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800304c:	4b13      	ldr	r3, [pc, #76]	; (800309c <_sbrk+0x64>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <_sbrk+0x64>)
 8003056:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <_sbrk+0x68>)
 8003058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <_sbrk+0x64>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d207      	bcs.n	8003078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003068:	f003 fbe6 	bl	8006838 <__errno>
 800306c:	4603      	mov	r3, r0
 800306e:	220c      	movs	r2, #12
 8003070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	e009      	b.n	800308c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <_sbrk+0x64>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800307e:	4b07      	ldr	r3, [pc, #28]	; (800309c <_sbrk+0x64>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	4a05      	ldr	r2, [pc, #20]	; (800309c <_sbrk+0x64>)
 8003088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800308a:	68fb      	ldr	r3, [r7, #12]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20005000 	.word	0x20005000
 8003098:	00000400 	.word	0x00000400
 800309c:	20000308 	.word	0x20000308
 80030a0:	20000458 	.word	0x20000458

080030a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <Reset_Handler>:
 80030b0:	f7ff fff8 	bl	80030a4 <SystemInit>
 80030b4:	480b      	ldr	r0, [pc, #44]	; (80030e4 <LoopFillZerobss+0xe>)
 80030b6:	490c      	ldr	r1, [pc, #48]	; (80030e8 <LoopFillZerobss+0x12>)
 80030b8:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <LoopFillZerobss+0x16>)
 80030ba:	2300      	movs	r3, #0
 80030bc:	e002      	b.n	80030c4 <LoopCopyDataInit>

080030be <CopyDataInit>:
 80030be:	58d4      	ldr	r4, [r2, r3]
 80030c0:	50c4      	str	r4, [r0, r3]
 80030c2:	3304      	adds	r3, #4

080030c4 <LoopCopyDataInit>:
 80030c4:	18c4      	adds	r4, r0, r3
 80030c6:	428c      	cmp	r4, r1
 80030c8:	d3f9      	bcc.n	80030be <CopyDataInit>
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <LoopFillZerobss+0x1a>)
 80030cc:	4c09      	ldr	r4, [pc, #36]	; (80030f4 <LoopFillZerobss+0x1e>)
 80030ce:	2300      	movs	r3, #0
 80030d0:	e001      	b.n	80030d6 <LoopFillZerobss>

080030d2 <FillZerobss>:
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	3204      	adds	r2, #4

080030d6 <LoopFillZerobss>:
 80030d6:	42a2      	cmp	r2, r4
 80030d8:	d3fb      	bcc.n	80030d2 <FillZerobss>
 80030da:	f003 fbb3 	bl	8006844 <__libc_init_array>
 80030de:	f7fd fc2f 	bl	8000940 <main>
 80030e2:	4770      	bx	lr
 80030e4:	20000000 	.word	0x20000000
 80030e8:	20000074 	.word	0x20000074
 80030ec:	08007210 	.word	0x08007210
 80030f0:	20000074 	.word	0x20000074
 80030f4:	20000458 	.word	0x20000458

080030f8 <ADC1_2_IRQHandler>:
 80030f8:	e7fe      	b.n	80030f8 <ADC1_2_IRQHandler>
	...

080030fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_Init+0x28>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a07      	ldr	r2, [pc, #28]	; (8003124 <HAL_Init+0x28>)
 8003106:	f043 0310 	orr.w	r3, r3, #16
 800310a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800310c:	2003      	movs	r0, #3
 800310e:	f000 f947 	bl	80033a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003112:	200f      	movs	r0, #15
 8003114:	f000 f808 	bl	8003128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003118:	f7ff fd92 	bl	8002c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40022000 	.word	0x40022000

08003128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_InitTick+0x54>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_InitTick+0x58>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800313e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003142:	fbb2 f3f3 	udiv	r3, r2, r3
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f95f 	bl	800340a <HAL_SYSTICK_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e00e      	b.n	8003174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b0f      	cmp	r3, #15
 800315a:	d80a      	bhi.n	8003172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800315c:	2200      	movs	r2, #0
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	f04f 30ff 	mov.w	r0, #4294967295
 8003164:	f000 f927 	bl	80033b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003168:	4a06      	ldr	r2, [pc, #24]	; (8003184 <HAL_InitTick+0x5c>)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	e000      	b.n	8003174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000018 	.word	0x20000018
 8003180:	20000020 	.word	0x20000020
 8003184:	2000001c 	.word	0x2000001c

08003188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_IncTick+0x1c>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_IncTick+0x20>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4413      	add	r3, r2
 8003198:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <HAL_IncTick+0x20>)
 800319a:	6013      	str	r3, [r2, #0]
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	20000020 	.word	0x20000020
 80031a8:	2000030c 	.word	0x2000030c

080031ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return uwTick;
 80031b0:	4b02      	ldr	r3, [pc, #8]	; (80031bc <HAL_GetTick+0x10>)
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	2000030c 	.word	0x2000030c

080031c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031c8:	f7ff fff0 	bl	80031ac <HAL_GetTick>
 80031cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d005      	beq.n	80031e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_Delay+0x44>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031e6:	bf00      	nop
 80031e8:	f7ff ffe0 	bl	80031ac <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d8f7      	bhi.n	80031e8 <HAL_Delay+0x28>
  {
  }
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000020 	.word	0x20000020

08003208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <__NVIC_SetPriorityGrouping+0x44>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003224:	4013      	ands	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323a:	4a04      	ldr	r2, [pc, #16]	; (800324c <__NVIC_SetPriorityGrouping+0x44>)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	60d3      	str	r3, [r2, #12]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <__NVIC_GetPriorityGrouping+0x18>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	f003 0307 	and.w	r3, r3, #7
}
 800325e:	4618      	mov	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	2b00      	cmp	r3, #0
 800327c:	db0b      	blt.n	8003296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	f003 021f 	and.w	r2, r3, #31
 8003284:	4906      	ldr	r1, [pc, #24]	; (80032a0 <__NVIC_EnableIRQ+0x34>)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2001      	movs	r0, #1
 800328e:	fa00 f202 	lsl.w	r2, r0, r2
 8003292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	; (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	; (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3b01      	subs	r3, #1
 8003368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800336c:	d301      	bcc.n	8003372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800336e:	2301      	movs	r3, #1
 8003370:	e00f      	b.n	8003392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <SysTick_Config+0x40>)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337a:	210f      	movs	r1, #15
 800337c:	f04f 30ff 	mov.w	r0, #4294967295
 8003380:	f7ff ff90 	bl	80032a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <SysTick_Config+0x40>)
 8003386:	2200      	movs	r2, #0
 8003388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338a:	4b04      	ldr	r3, [pc, #16]	; (800339c <SysTick_Config+0x40>)
 800338c:	2207      	movs	r2, #7
 800338e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	e000e010 	.word	0xe000e010

080033a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ff2d 	bl	8003208 <__NVIC_SetPriorityGrouping>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033c8:	f7ff ff42 	bl	8003250 <__NVIC_GetPriorityGrouping>
 80033cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	6978      	ldr	r0, [r7, #20]
 80033d4:	f7ff ff90 	bl	80032f8 <NVIC_EncodePriority>
 80033d8:	4602      	mov	r2, r0
 80033da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff5f 	bl	80032a4 <__NVIC_SetPriority>
}
 80033e6:	bf00      	nop
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	4603      	mov	r3, r0
 80033f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ff35 	bl	800326c <__NVIC_EnableIRQ>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ffa2 	bl	800335c <SysTick_Config>
 8003418:	4603      	mov	r3, r0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003422:	b480      	push	{r7}
 8003424:	b085      	sub	sp, #20
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d008      	beq.n	800344c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2204      	movs	r2, #4
 800343e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e020      	b.n	800348e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 020e 	bic.w	r2, r2, #14
 800345a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f202 	lsl.w	r2, r1, r2
 800347a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800348c:	7bfb      	ldrb	r3, [r7, #15]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d005      	beq.n	80034bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2204      	movs	r2, #4
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	73fb      	strb	r3, [r7, #15]
 80034ba:	e051      	b.n	8003560 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 020e 	bic.w	r2, r2, #14
 80034ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a22      	ldr	r2, [pc, #136]	; (800356c <HAL_DMA_Abort_IT+0xd4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d029      	beq.n	800353a <HAL_DMA_Abort_IT+0xa2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a21      	ldr	r2, [pc, #132]	; (8003570 <HAL_DMA_Abort_IT+0xd8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d022      	beq.n	8003536 <HAL_DMA_Abort_IT+0x9e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1f      	ldr	r2, [pc, #124]	; (8003574 <HAL_DMA_Abort_IT+0xdc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01a      	beq.n	8003530 <HAL_DMA_Abort_IT+0x98>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1e      	ldr	r2, [pc, #120]	; (8003578 <HAL_DMA_Abort_IT+0xe0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d012      	beq.n	800352a <HAL_DMA_Abort_IT+0x92>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1c      	ldr	r2, [pc, #112]	; (800357c <HAL_DMA_Abort_IT+0xe4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00a      	beq.n	8003524 <HAL_DMA_Abort_IT+0x8c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <HAL_DMA_Abort_IT+0xe8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d102      	bne.n	800351e <HAL_DMA_Abort_IT+0x86>
 8003518:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800351c:	e00e      	b.n	800353c <HAL_DMA_Abort_IT+0xa4>
 800351e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003522:	e00b      	b.n	800353c <HAL_DMA_Abort_IT+0xa4>
 8003524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003528:	e008      	b.n	800353c <HAL_DMA_Abort_IT+0xa4>
 800352a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800352e:	e005      	b.n	800353c <HAL_DMA_Abort_IT+0xa4>
 8003530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003534:	e002      	b.n	800353c <HAL_DMA_Abort_IT+0xa4>
 8003536:	2310      	movs	r3, #16
 8003538:	e000      	b.n	800353c <HAL_DMA_Abort_IT+0xa4>
 800353a:	2301      	movs	r3, #1
 800353c:	4a11      	ldr	r2, [pc, #68]	; (8003584 <HAL_DMA_Abort_IT+0xec>)
 800353e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
    } 
  }
  return status;
 8003560:	7bfb      	ldrb	r3, [r7, #15]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40020008 	.word	0x40020008
 8003570:	4002001c 	.word	0x4002001c
 8003574:	40020030 	.word	0x40020030
 8003578:	40020044 	.word	0x40020044
 800357c:	40020058 	.word	0x40020058
 8003580:	4002006c 	.word	0x4002006c
 8003584:	40020000 	.word	0x40020000

08003588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003588:	b480      	push	{r7}
 800358a:	b08b      	sub	sp, #44	; 0x2c
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003592:	2300      	movs	r3, #0
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003596:	2300      	movs	r3, #0
 8003598:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800359a:	e169      	b.n	8003870 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800359c:	2201      	movs	r2, #1
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	f040 8158 	bne.w	800386a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4a9a      	ldr	r2, [pc, #616]	; (8003828 <HAL_GPIO_Init+0x2a0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d05e      	beq.n	8003682 <HAL_GPIO_Init+0xfa>
 80035c4:	4a98      	ldr	r2, [pc, #608]	; (8003828 <HAL_GPIO_Init+0x2a0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d875      	bhi.n	80036b6 <HAL_GPIO_Init+0x12e>
 80035ca:	4a98      	ldr	r2, [pc, #608]	; (800382c <HAL_GPIO_Init+0x2a4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d058      	beq.n	8003682 <HAL_GPIO_Init+0xfa>
 80035d0:	4a96      	ldr	r2, [pc, #600]	; (800382c <HAL_GPIO_Init+0x2a4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d86f      	bhi.n	80036b6 <HAL_GPIO_Init+0x12e>
 80035d6:	4a96      	ldr	r2, [pc, #600]	; (8003830 <HAL_GPIO_Init+0x2a8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d052      	beq.n	8003682 <HAL_GPIO_Init+0xfa>
 80035dc:	4a94      	ldr	r2, [pc, #592]	; (8003830 <HAL_GPIO_Init+0x2a8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d869      	bhi.n	80036b6 <HAL_GPIO_Init+0x12e>
 80035e2:	4a94      	ldr	r2, [pc, #592]	; (8003834 <HAL_GPIO_Init+0x2ac>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d04c      	beq.n	8003682 <HAL_GPIO_Init+0xfa>
 80035e8:	4a92      	ldr	r2, [pc, #584]	; (8003834 <HAL_GPIO_Init+0x2ac>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d863      	bhi.n	80036b6 <HAL_GPIO_Init+0x12e>
 80035ee:	4a92      	ldr	r2, [pc, #584]	; (8003838 <HAL_GPIO_Init+0x2b0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d046      	beq.n	8003682 <HAL_GPIO_Init+0xfa>
 80035f4:	4a90      	ldr	r2, [pc, #576]	; (8003838 <HAL_GPIO_Init+0x2b0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d85d      	bhi.n	80036b6 <HAL_GPIO_Init+0x12e>
 80035fa:	2b12      	cmp	r3, #18
 80035fc:	d82a      	bhi.n	8003654 <HAL_GPIO_Init+0xcc>
 80035fe:	2b12      	cmp	r3, #18
 8003600:	d859      	bhi.n	80036b6 <HAL_GPIO_Init+0x12e>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <HAL_GPIO_Init+0x80>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	08003683 	.word	0x08003683
 800360c:	0800365d 	.word	0x0800365d
 8003610:	0800366f 	.word	0x0800366f
 8003614:	080036b1 	.word	0x080036b1
 8003618:	080036b7 	.word	0x080036b7
 800361c:	080036b7 	.word	0x080036b7
 8003620:	080036b7 	.word	0x080036b7
 8003624:	080036b7 	.word	0x080036b7
 8003628:	080036b7 	.word	0x080036b7
 800362c:	080036b7 	.word	0x080036b7
 8003630:	080036b7 	.word	0x080036b7
 8003634:	080036b7 	.word	0x080036b7
 8003638:	080036b7 	.word	0x080036b7
 800363c:	080036b7 	.word	0x080036b7
 8003640:	080036b7 	.word	0x080036b7
 8003644:	080036b7 	.word	0x080036b7
 8003648:	080036b7 	.word	0x080036b7
 800364c:	08003665 	.word	0x08003665
 8003650:	08003679 	.word	0x08003679
 8003654:	4a79      	ldr	r2, [pc, #484]	; (800383c <HAL_GPIO_Init+0x2b4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800365a:	e02c      	b.n	80036b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	623b      	str	r3, [r7, #32]
          break;
 8003662:	e029      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	3304      	adds	r3, #4
 800366a:	623b      	str	r3, [r7, #32]
          break;
 800366c:	e024      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	3308      	adds	r3, #8
 8003674:	623b      	str	r3, [r7, #32]
          break;
 8003676:	e01f      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	330c      	adds	r3, #12
 800367e:	623b      	str	r3, [r7, #32]
          break;
 8003680:	e01a      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800368a:	2304      	movs	r3, #4
 800368c:	623b      	str	r3, [r7, #32]
          break;
 800368e:	e013      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d105      	bne.n	80036a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003698:	2308      	movs	r3, #8
 800369a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	611a      	str	r2, [r3, #16]
          break;
 80036a2:	e009      	b.n	80036b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036a4:	2308      	movs	r3, #8
 80036a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	615a      	str	r2, [r3, #20]
          break;
 80036ae:	e003      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036b0:	2300      	movs	r3, #0
 80036b2:	623b      	str	r3, [r7, #32]
          break;
 80036b4:	e000      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          break;
 80036b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2bff      	cmp	r3, #255	; 0xff
 80036bc:	d801      	bhi.n	80036c2 <HAL_GPIO_Init+0x13a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	e001      	b.n	80036c6 <HAL_GPIO_Init+0x13e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2bff      	cmp	r3, #255	; 0xff
 80036cc:	d802      	bhi.n	80036d4 <HAL_GPIO_Init+0x14c>
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	e002      	b.n	80036da <HAL_GPIO_Init+0x152>
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	3b08      	subs	r3, #8
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	210f      	movs	r1, #15
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	401a      	ands	r2, r3
 80036ec:	6a39      	ldr	r1, [r7, #32]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	431a      	orrs	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80b1 	beq.w	800386a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003708:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <HAL_GPIO_Init+0x2b8>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	4a4c      	ldr	r2, [pc, #304]	; (8003840 <HAL_GPIO_Init+0x2b8>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6193      	str	r3, [r2, #24]
 8003714:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_GPIO_Init+0x2b8>)
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003720:	4a48      	ldr	r2, [pc, #288]	; (8003844 <HAL_GPIO_Init+0x2bc>)
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	089b      	lsrs	r3, r3, #2
 8003726:	3302      	adds	r3, #2
 8003728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	220f      	movs	r2, #15
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4013      	ands	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a40      	ldr	r2, [pc, #256]	; (8003848 <HAL_GPIO_Init+0x2c0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_GPIO_Init+0x1ec>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3f      	ldr	r2, [pc, #252]	; (800384c <HAL_GPIO_Init+0x2c4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00d      	beq.n	8003770 <HAL_GPIO_Init+0x1e8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3e      	ldr	r2, [pc, #248]	; (8003850 <HAL_GPIO_Init+0x2c8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <HAL_GPIO_Init+0x1e4>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3d      	ldr	r2, [pc, #244]	; (8003854 <HAL_GPIO_Init+0x2cc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d101      	bne.n	8003768 <HAL_GPIO_Init+0x1e0>
 8003764:	2303      	movs	r3, #3
 8003766:	e006      	b.n	8003776 <HAL_GPIO_Init+0x1ee>
 8003768:	2304      	movs	r3, #4
 800376a:	e004      	b.n	8003776 <HAL_GPIO_Init+0x1ee>
 800376c:	2302      	movs	r3, #2
 800376e:	e002      	b.n	8003776 <HAL_GPIO_Init+0x1ee>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <HAL_GPIO_Init+0x1ee>
 8003774:	2300      	movs	r3, #0
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	f002 0203 	and.w	r2, r2, #3
 800377c:	0092      	lsls	r2, r2, #2
 800377e:	4093      	lsls	r3, r2
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003786:	492f      	ldr	r1, [pc, #188]	; (8003844 <HAL_GPIO_Init+0x2bc>)
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	089b      	lsrs	r3, r3, #2
 800378c:	3302      	adds	r3, #2
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d006      	beq.n	80037ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037a0:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	492c      	ldr	r1, [pc, #176]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	608b      	str	r3, [r1, #8]
 80037ac:	e006      	b.n	80037bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037ae:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	4928      	ldr	r1, [pc, #160]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d006      	beq.n	80037d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037c8:	4b23      	ldr	r3, [pc, #140]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	4922      	ldr	r1, [pc, #136]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60cb      	str	r3, [r1, #12]
 80037d4:	e006      	b.n	80037e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	43db      	mvns	r3, r3
 80037de:	491e      	ldr	r1, [pc, #120]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d006      	beq.n	80037fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	4918      	ldr	r1, [pc, #96]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
 80037fc:	e006      	b.n	800380c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037fe:	4b16      	ldr	r3, [pc, #88]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	43db      	mvns	r3, r3
 8003806:	4914      	ldr	r1, [pc, #80]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 8003808:	4013      	ands	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d021      	beq.n	800385c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	490e      	ldr	r1, [pc, #56]	; (8003858 <HAL_GPIO_Init+0x2d0>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]
 8003824:	e021      	b.n	800386a <HAL_GPIO_Init+0x2e2>
 8003826:	bf00      	nop
 8003828:	10320000 	.word	0x10320000
 800382c:	10310000 	.word	0x10310000
 8003830:	10220000 	.word	0x10220000
 8003834:	10210000 	.word	0x10210000
 8003838:	10120000 	.word	0x10120000
 800383c:	10110000 	.word	0x10110000
 8003840:	40021000 	.word	0x40021000
 8003844:	40010000 	.word	0x40010000
 8003848:	40010800 	.word	0x40010800
 800384c:	40010c00 	.word	0x40010c00
 8003850:	40011000 	.word	0x40011000
 8003854:	40011400 	.word	0x40011400
 8003858:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_GPIO_Init+0x304>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	43db      	mvns	r3, r3
 8003864:	4909      	ldr	r1, [pc, #36]	; (800388c <HAL_GPIO_Init+0x304>)
 8003866:	4013      	ands	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	3301      	adds	r3, #1
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	fa22 f303 	lsr.w	r3, r2, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	f47f ae8e 	bne.w	800359c <HAL_GPIO_Init+0x14>
  }
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	372c      	adds	r7, #44	; 0x2c
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	40010400 	.word	0x40010400

08003890 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	887b      	ldrh	r3, [r7, #2]
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
 80038ac:	e001      	b.n	80038b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	807b      	strh	r3, [r7, #2]
 80038ca:	4613      	mov	r3, r2
 80038cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038ce:	787b      	ldrb	r3, [r7, #1]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038d4:	887a      	ldrh	r2, [r7, #2]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038da:	e003      	b.n	80038e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038dc:	887b      	ldrh	r3, [r7, #2]
 80038de:	041a      	lsls	r2, r3, #16
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	611a      	str	r2, [r3, #16]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003900:	887a      	ldrh	r2, [r7, #2]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4013      	ands	r3, r2
 8003906:	041a      	lsls	r2, r3, #16
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	43d9      	mvns	r1, r3
 800390c:	887b      	ldrh	r3, [r7, #2]
 800390e:	400b      	ands	r3, r1
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	611a      	str	r2, [r3, #16]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e12b      	b.n	8003b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff f9ac 	bl	8002ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2224      	movs	r2, #36	; 0x24
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003984:	f001 f832 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 8003988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4a81      	ldr	r2, [pc, #516]	; (8003b94 <HAL_I2C_Init+0x274>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d807      	bhi.n	80039a4 <HAL_I2C_Init+0x84>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4a80      	ldr	r2, [pc, #512]	; (8003b98 <HAL_I2C_Init+0x278>)
 8003998:	4293      	cmp	r3, r2
 800399a:	bf94      	ite	ls
 800399c:	2301      	movls	r3, #1
 800399e:	2300      	movhi	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e006      	b.n	80039b2 <HAL_I2C_Init+0x92>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a7d      	ldr	r2, [pc, #500]	; (8003b9c <HAL_I2C_Init+0x27c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	bf94      	ite	ls
 80039ac:	2301      	movls	r3, #1
 80039ae:	2300      	movhi	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e0e7      	b.n	8003b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4a78      	ldr	r2, [pc, #480]	; (8003ba0 <HAL_I2C_Init+0x280>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	0c9b      	lsrs	r3, r3, #18
 80039c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4a6a      	ldr	r2, [pc, #424]	; (8003b94 <HAL_I2C_Init+0x274>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d802      	bhi.n	80039f4 <HAL_I2C_Init+0xd4>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	3301      	adds	r3, #1
 80039f2:	e009      	b.n	8003a08 <HAL_I2C_Init+0xe8>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	4a69      	ldr	r2, [pc, #420]	; (8003ba4 <HAL_I2C_Init+0x284>)
 8003a00:	fba2 2303 	umull	r2, r3, r2, r3
 8003a04:	099b      	lsrs	r3, r3, #6
 8003a06:	3301      	adds	r3, #1
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	495c      	ldr	r1, [pc, #368]	; (8003b94 <HAL_I2C_Init+0x274>)
 8003a24:	428b      	cmp	r3, r1
 8003a26:	d819      	bhi.n	8003a5c <HAL_I2C_Init+0x13c>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e59      	subs	r1, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a36:	1c59      	adds	r1, r3, #1
 8003a38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a3c:	400b      	ands	r3, r1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_I2C_Init+0x138>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1e59      	subs	r1, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a50:	3301      	adds	r3, #1
 8003a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a56:	e051      	b.n	8003afc <HAL_I2C_Init+0x1dc>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	e04f      	b.n	8003afc <HAL_I2C_Init+0x1dc>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d111      	bne.n	8003a88 <HAL_I2C_Init+0x168>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e58      	subs	r0, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	440b      	add	r3, r1
 8003a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e012      	b.n	8003aae <HAL_I2C_Init+0x18e>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1e58      	subs	r0, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	0099      	lsls	r1, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Init+0x196>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e022      	b.n	8003afc <HAL_I2C_Init+0x1dc>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10e      	bne.n	8003adc <HAL_I2C_Init+0x1bc>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1e58      	subs	r0, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	440b      	add	r3, r1
 8003acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ada:	e00f      	b.n	8003afc <HAL_I2C_Init+0x1dc>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e58      	subs	r0, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	0099      	lsls	r1, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af2:	3301      	adds	r3, #1
 8003af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	6809      	ldr	r1, [r1, #0]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69da      	ldr	r2, [r3, #28]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6911      	ldr	r1, [r2, #16]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68d2      	ldr	r2, [r2, #12]
 8003b36:	4311      	orrs	r1, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	000186a0 	.word	0x000186a0
 8003b98:	001e847f 	.word	0x001e847f
 8003b9c:	003d08ff 	.word	0x003d08ff
 8003ba0:	431bde83 	.word	0x431bde83
 8003ba4:	10624dd3 	.word	0x10624dd3

08003ba8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	607a      	str	r2, [r7, #4]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	817b      	strh	r3, [r7, #10]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bbc:	f7ff faf6 	bl	80031ac <HAL_GetTick>
 8003bc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	f040 80e0 	bne.w	8003d90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2319      	movs	r3, #25
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	4970      	ldr	r1, [pc, #448]	; (8003d9c <HAL_I2C_Master_Transmit+0x1f4>)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f964 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
 8003be8:	e0d3      	b.n	8003d92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_I2C_Master_Transmit+0x50>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e0cc      	b.n	8003d92 <HAL_I2C_Master_Transmit+0x1ea>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d007      	beq.n	8003c1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2221      	movs	r2, #33	; 0x21
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2210      	movs	r2, #16
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	893a      	ldrh	r2, [r7, #8]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a50      	ldr	r2, [pc, #320]	; (8003da0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c60:	8979      	ldrh	r1, [r7, #10]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	6a3a      	ldr	r2, [r7, #32]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f89c 	bl	8003da4 <I2C_MasterRequestWrite>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e08d      	b.n	8003d92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c8c:	e066      	b.n	8003d5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	6a39      	ldr	r1, [r7, #32]
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fa22 	bl	80040dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d107      	bne.n	8003cb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e06b      	b.n	8003d92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d11b      	bne.n	8003d30 <HAL_I2C_Master_Transmit+0x188>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d017      	beq.n	8003d30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	6a39      	ldr	r1, [r7, #32]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fa19 	bl	800416c <I2C_WaitOnBTFFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00d      	beq.n	8003d5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d107      	bne.n	8003d58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e01a      	b.n	8003d92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d194      	bne.n	8003c8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e000      	b.n	8003d92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
  }
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	00100002 	.word	0x00100002
 8003da0:	ffff0000 	.word	0xffff0000

08003da4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	460b      	mov	r3, r1
 8003db2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d006      	beq.n	8003dce <I2C_MasterRequestWrite+0x2a>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d003      	beq.n	8003dce <I2C_MasterRequestWrite+0x2a>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dcc:	d108      	bne.n	8003de0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e00b      	b.n	8003df8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	2b12      	cmp	r3, #18
 8003de6:	d107      	bne.n	8003df8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f84f 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00d      	beq.n	8003e2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1e:	d103      	bne.n	8003e28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e035      	b.n	8003e98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e34:	d108      	bne.n	8003e48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e36:	897b      	ldrh	r3, [r7, #10]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e44:	611a      	str	r2, [r3, #16]
 8003e46:	e01b      	b.n	8003e80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e48:	897b      	ldrh	r3, [r7, #10]
 8003e4a:	11db      	asrs	r3, r3, #7
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f003 0306 	and.w	r3, r3, #6
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f063 030f 	orn	r3, r3, #15
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	490e      	ldr	r1, [pc, #56]	; (8003ea0 <I2C_MasterRequestWrite+0xfc>)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f898 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e010      	b.n	8003e98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e76:	897b      	ldrh	r3, [r7, #10]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	4907      	ldr	r1, [pc, #28]	; (8003ea4 <I2C_MasterRequestWrite+0x100>)
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f888 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	00010008 	.word	0x00010008
 8003ea4:	00010002 	.word	0x00010002

08003ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb8:	e048      	b.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d044      	beq.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec2:	f7ff f973 	bl	80031ac <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d139      	bne.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	0c1b      	lsrs	r3, r3, #16
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d10d      	bne.n	8003efe <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	43da      	mvns	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4013      	ands	r3, r2
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	e00c      	b.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	43da      	mvns	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf0c      	ite	eq
 8003f10:	2301      	moveq	r3, #1
 8003f12:	2300      	movne	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d116      	bne.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	f043 0220 	orr.w	r2, r3, #32
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e023      	b.n	8003f94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	0c1b      	lsrs	r3, r3, #16
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d10d      	bne.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	43da      	mvns	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4013      	ands	r3, r2
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	e00c      	b.n	8003f8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d093      	beq.n	8003eba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003faa:	e071      	b.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fba:	d123      	bne.n	8004004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	f043 0204 	orr.w	r2, r3, #4
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e067      	b.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d041      	beq.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400c:	f7ff f8ce 	bl	80031ac <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d302      	bcc.n	8004022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d136      	bne.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	d10c      	bne.n	8004046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	43da      	mvns	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf14      	ite	ne
 800403e:	2301      	movne	r3, #1
 8004040:	2300      	moveq	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	e00b      	b.n	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	43da      	mvns	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf14      	ite	ne
 8004058:	2301      	movne	r3, #1
 800405a:	2300      	moveq	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e021      	b.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10c      	bne.n	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	43da      	mvns	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf14      	ite	ne
 80040ac:	2301      	movne	r3, #1
 80040ae:	2300      	moveq	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	e00b      	b.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	43da      	mvns	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4013      	ands	r3, r2
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f47f af6d 	bne.w	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e8:	e034      	b.n	8004154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f886 	bl	80041fc <I2C_IsAcknowledgeFailed>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e034      	b.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d028      	beq.n	8004154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004102:	f7ff f853 	bl	80031ac <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	429a      	cmp	r2, r3
 8004110:	d302      	bcc.n	8004118 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d11d      	bne.n	8004154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	2b80      	cmp	r3, #128	; 0x80
 8004124:	d016      	beq.n	8004154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e007      	b.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	d1c3      	bne.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004178:	e034      	b.n	80041e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f83e 	bl	80041fc <I2C_IsAcknowledgeFailed>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e034      	b.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d028      	beq.n	80041e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004192:	f7ff f80b 	bl	80031ac <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11d      	bne.n	80041e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d016      	beq.n	80041e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e007      	b.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d1c3      	bne.n	800417a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004212:	d11b      	bne.n	800424c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800421c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f043 0204 	orr.w	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr

08004258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e272      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8087 	beq.w	8004386 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004278:	4b92      	ldr	r3, [pc, #584]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b04      	cmp	r3, #4
 8004282:	d00c      	beq.n	800429e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004284:	4b8f      	ldr	r3, [pc, #572]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b08      	cmp	r3, #8
 800428e:	d112      	bne.n	80042b6 <HAL_RCC_OscConfig+0x5e>
 8004290:	4b8c      	ldr	r3, [pc, #560]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d10b      	bne.n	80042b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429e:	4b89      	ldr	r3, [pc, #548]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d06c      	beq.n	8004384 <HAL_RCC_OscConfig+0x12c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d168      	bne.n	8004384 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e24c      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042be:	d106      	bne.n	80042ce <HAL_RCC_OscConfig+0x76>
 80042c0:	4b80      	ldr	r3, [pc, #512]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a7f      	ldr	r2, [pc, #508]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	e02e      	b.n	800432c <HAL_RCC_OscConfig+0xd4>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10c      	bne.n	80042f0 <HAL_RCC_OscConfig+0x98>
 80042d6:	4b7b      	ldr	r3, [pc, #492]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7a      	ldr	r2, [pc, #488]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	4b78      	ldr	r3, [pc, #480]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a77      	ldr	r2, [pc, #476]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e01d      	b.n	800432c <HAL_RCC_OscConfig+0xd4>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0xbc>
 80042fa:	4b72      	ldr	r3, [pc, #456]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a71      	ldr	r2, [pc, #452]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b6f      	ldr	r3, [pc, #444]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a6e      	ldr	r2, [pc, #440]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e00b      	b.n	800432c <HAL_RCC_OscConfig+0xd4>
 8004314:	4b6b      	ldr	r3, [pc, #428]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a6a      	ldr	r2, [pc, #424]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 800431a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b68      	ldr	r3, [pc, #416]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a67      	ldr	r2, [pc, #412]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d013      	beq.n	800435c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fe ff3a 	bl	80031ac <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fe ff36 	bl	80031ac <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	; 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e200      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b5d      	ldr	r3, [pc, #372]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0xe4>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fe ff26 	bl	80031ac <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004364:	f7fe ff22 	bl	80031ac <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e1ec      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x10c>
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d063      	beq.n	800445a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004392:	4b4c      	ldr	r3, [pc, #304]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800439e:	4b49      	ldr	r3, [pc, #292]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d11c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x18c>
 80043aa:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d116      	bne.n	80043e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	4b43      	ldr	r3, [pc, #268]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_RCC_OscConfig+0x176>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e1c0      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ce:	4b3d      	ldr	r3, [pc, #244]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4939      	ldr	r1, [pc, #228]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	e03a      	b.n	800445a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d020      	beq.n	800442e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ec:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fe fedb 	bl	80031ac <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043fa:	f7fe fed7 	bl	80031ac <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e1a1      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440c:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004418:	4b2a      	ldr	r3, [pc, #168]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	4927      	ldr	r1, [pc, #156]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004428:	4313      	orrs	r3, r2
 800442a:	600b      	str	r3, [r1, #0]
 800442c:	e015      	b.n	800445a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800442e:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fe feba 	bl	80031ac <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443c:	f7fe feb6 	bl	80031ac <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e180      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444e:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d03a      	beq.n	80044dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d019      	beq.n	80044a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800446e:	4b17      	ldr	r3, [pc, #92]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004474:	f7fe fe9a 	bl	80031ac <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800447c:	f7fe fe96 	bl	80031ac <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e160      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448e:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <HAL_RCC_OscConfig+0x26c>)
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800449a:	2001      	movs	r0, #1
 800449c:	f000 face 	bl	8004a3c <RCC_Delay>
 80044a0:	e01c      	b.n	80044dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a2:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a8:	f7fe fe80 	bl	80031ac <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ae:	e00f      	b.n	80044d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b0:	f7fe fe7c 	bl	80031ac <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d908      	bls.n	80044d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e146      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
 80044c8:	42420000 	.word	0x42420000
 80044cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d0:	4b92      	ldr	r3, [pc, #584]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e9      	bne.n	80044b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80a6 	beq.w	8004636 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ea:	2300      	movs	r3, #0
 80044ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ee:	4b8b      	ldr	r3, [pc, #556]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10d      	bne.n	8004516 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fa:	4b88      	ldr	r3, [pc, #544]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	4a87      	ldr	r2, [pc, #540]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004504:	61d3      	str	r3, [r2, #28]
 8004506:	4b85      	ldr	r3, [pc, #532]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004512:	2301      	movs	r3, #1
 8004514:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004516:	4b82      	ldr	r3, [pc, #520]	; (8004720 <HAL_RCC_OscConfig+0x4c8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d118      	bne.n	8004554 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004522:	4b7f      	ldr	r3, [pc, #508]	; (8004720 <HAL_RCC_OscConfig+0x4c8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a7e      	ldr	r2, [pc, #504]	; (8004720 <HAL_RCC_OscConfig+0x4c8>)
 8004528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452e:	f7fe fe3d 	bl	80031ac <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004536:	f7fe fe39 	bl	80031ac <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b64      	cmp	r3, #100	; 0x64
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e103      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004548:	4b75      	ldr	r3, [pc, #468]	; (8004720 <HAL_RCC_OscConfig+0x4c8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d106      	bne.n	800456a <HAL_RCC_OscConfig+0x312>
 800455c:	4b6f      	ldr	r3, [pc, #444]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4a6e      	ldr	r2, [pc, #440]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6213      	str	r3, [r2, #32]
 8004568:	e02d      	b.n	80045c6 <HAL_RCC_OscConfig+0x36e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10c      	bne.n	800458c <HAL_RCC_OscConfig+0x334>
 8004572:	4b6a      	ldr	r3, [pc, #424]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4a69      	ldr	r2, [pc, #420]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	6213      	str	r3, [r2, #32]
 800457e:	4b67      	ldr	r3, [pc, #412]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4a66      	ldr	r2, [pc, #408]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004584:	f023 0304 	bic.w	r3, r3, #4
 8004588:	6213      	str	r3, [r2, #32]
 800458a:	e01c      	b.n	80045c6 <HAL_RCC_OscConfig+0x36e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	2b05      	cmp	r3, #5
 8004592:	d10c      	bne.n	80045ae <HAL_RCC_OscConfig+0x356>
 8004594:	4b61      	ldr	r3, [pc, #388]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4a60      	ldr	r2, [pc, #384]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 800459a:	f043 0304 	orr.w	r3, r3, #4
 800459e:	6213      	str	r3, [r2, #32]
 80045a0:	4b5e      	ldr	r3, [pc, #376]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	4a5d      	ldr	r2, [pc, #372]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	6213      	str	r3, [r2, #32]
 80045ac:	e00b      	b.n	80045c6 <HAL_RCC_OscConfig+0x36e>
 80045ae:	4b5b      	ldr	r3, [pc, #364]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	4a5a      	ldr	r2, [pc, #360]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	6213      	str	r3, [r2, #32]
 80045ba:	4b58      	ldr	r3, [pc, #352]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	4a57      	ldr	r2, [pc, #348]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	f023 0304 	bic.w	r3, r3, #4
 80045c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d015      	beq.n	80045fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fe fded 	bl	80031ac <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d4:	e00a      	b.n	80045ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fe fde9 	bl	80031ac <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e0b1      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ec:	4b4b      	ldr	r3, [pc, #300]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ee      	beq.n	80045d6 <HAL_RCC_OscConfig+0x37e>
 80045f8:	e014      	b.n	8004624 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fa:	f7fe fdd7 	bl	80031ac <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004600:	e00a      	b.n	8004618 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004602:	f7fe fdd3 	bl	80031ac <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004610:	4293      	cmp	r3, r2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e09b      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004618:	4b40      	ldr	r3, [pc, #256]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1ee      	bne.n	8004602 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004624:	7dfb      	ldrb	r3, [r7, #23]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462a:	4b3c      	ldr	r3, [pc, #240]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	4a3b      	ldr	r2, [pc, #236]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004634:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8087 	beq.w	800474e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004640:	4b36      	ldr	r3, [pc, #216]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 030c 	and.w	r3, r3, #12
 8004648:	2b08      	cmp	r3, #8
 800464a:	d061      	beq.n	8004710 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d146      	bne.n	80046e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004654:	4b33      	ldr	r3, [pc, #204]	; (8004724 <HAL_RCC_OscConfig+0x4cc>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465a:	f7fe fda7 	bl	80031ac <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004662:	f7fe fda3 	bl	80031ac <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e06d      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004674:	4b29      	ldr	r3, [pc, #164]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f0      	bne.n	8004662 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004688:	d108      	bne.n	800469c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800468a:	4b24      	ldr	r3, [pc, #144]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	4921      	ldr	r1, [pc, #132]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800469c:	4b1f      	ldr	r3, [pc, #124]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a19      	ldr	r1, [r3, #32]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	430b      	orrs	r3, r1
 80046ae:	491b      	ldr	r1, [pc, #108]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b4:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <HAL_RCC_OscConfig+0x4cc>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ba:	f7fe fd77 	bl	80031ac <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c2:	f7fe fd73 	bl	80031ac <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e03d      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046d4:	4b11      	ldr	r3, [pc, #68]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x46a>
 80046e0:	e035      	b.n	800474e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e2:	4b10      	ldr	r3, [pc, #64]	; (8004724 <HAL_RCC_OscConfig+0x4cc>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e8:	f7fe fd60 	bl	80031ac <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fe fd5c 	bl	80031ac <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e026      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <HAL_RCC_OscConfig+0x4c4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x498>
 800470e:	e01e      	b.n	800474e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e019      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
 800471c:	40021000 	.word	0x40021000
 8004720:	40007000 	.word	0x40007000
 8004724:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_RCC_OscConfig+0x500>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	429a      	cmp	r2, r3
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d001      	beq.n	800474e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40021000 	.word	0x40021000

0800475c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0d0      	b.n	8004912 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004770:	4b6a      	ldr	r3, [pc, #424]	; (800491c <HAL_RCC_ClockConfig+0x1c0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d910      	bls.n	80047a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477e:	4b67      	ldr	r3, [pc, #412]	; (800491c <HAL_RCC_ClockConfig+0x1c0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 0207 	bic.w	r2, r3, #7
 8004786:	4965      	ldr	r1, [pc, #404]	; (800491c <HAL_RCC_ClockConfig+0x1c0>)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478e:	4b63      	ldr	r3, [pc, #396]	; (800491c <HAL_RCC_ClockConfig+0x1c0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0b8      	b.n	8004912 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d020      	beq.n	80047ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b8:	4b59      	ldr	r3, [pc, #356]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4a58      	ldr	r2, [pc, #352]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 80047be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d0:	4b53      	ldr	r3, [pc, #332]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4a52      	ldr	r2, [pc, #328]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 80047d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047dc:	4b50      	ldr	r3, [pc, #320]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	494d      	ldr	r1, [pc, #308]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d040      	beq.n	800487c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d107      	bne.n	8004812 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004802:	4b47      	ldr	r3, [pc, #284]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d115      	bne.n	800483a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e07f      	b.n	8004912 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d107      	bne.n	800482a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481a:	4b41      	ldr	r3, [pc, #260]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e073      	b.n	8004912 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482a:	4b3d      	ldr	r3, [pc, #244]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e06b      	b.n	8004912 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800483a:	4b39      	ldr	r3, [pc, #228]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f023 0203 	bic.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4936      	ldr	r1, [pc, #216]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800484c:	f7fe fcae 	bl	80031ac <HAL_GetTick>
 8004850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004852:	e00a      	b.n	800486a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004854:	f7fe fcaa 	bl	80031ac <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e053      	b.n	8004912 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	4b2d      	ldr	r3, [pc, #180]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 020c 	and.w	r2, r3, #12
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	429a      	cmp	r2, r3
 800487a:	d1eb      	bne.n	8004854 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800487c:	4b27      	ldr	r3, [pc, #156]	; (800491c <HAL_RCC_ClockConfig+0x1c0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d210      	bcs.n	80048ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b24      	ldr	r3, [pc, #144]	; (800491c <HAL_RCC_ClockConfig+0x1c0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 0207 	bic.w	r2, r3, #7
 8004892:	4922      	ldr	r1, [pc, #136]	; (800491c <HAL_RCC_ClockConfig+0x1c0>)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b20      	ldr	r3, [pc, #128]	; (800491c <HAL_RCC_ClockConfig+0x1c0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e032      	b.n	8004912 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b8:	4b19      	ldr	r3, [pc, #100]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4916      	ldr	r1, [pc, #88]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048d6:	4b12      	ldr	r3, [pc, #72]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	490e      	ldr	r1, [pc, #56]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ea:	f000 f821 	bl	8004930 <HAL_RCC_GetSysClockFreq>
 80048ee:	4602      	mov	r2, r0
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	490a      	ldr	r1, [pc, #40]	; (8004924 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	5ccb      	ldrb	r3, [r1, r3]
 80048fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004902:	4a09      	ldr	r2, [pc, #36]	; (8004928 <HAL_RCC_ClockConfig+0x1cc>)
 8004904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004906:	4b09      	ldr	r3, [pc, #36]	; (800492c <HAL_RCC_ClockConfig+0x1d0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fc0c 	bl	8003128 <HAL_InitTick>

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40022000 	.word	0x40022000
 8004920:	40021000 	.word	0x40021000
 8004924:	080071a8 	.word	0x080071a8
 8004928:	20000018 	.word	0x20000018
 800492c:	2000001c 	.word	0x2000001c

08004930 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	2300      	movs	r3, #0
 8004944:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800494a:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b04      	cmp	r3, #4
 8004958:	d002      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x30>
 800495a:	2b08      	cmp	r3, #8
 800495c:	d003      	beq.n	8004966 <HAL_RCC_GetSysClockFreq+0x36>
 800495e:	e027      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004962:	613b      	str	r3, [r7, #16]
      break;
 8004964:	e027      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	0c9b      	lsrs	r3, r3, #18
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	4a17      	ldr	r2, [pc, #92]	; (80049cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004970:	5cd3      	ldrb	r3, [r2, r3]
 8004972:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d010      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	0c5b      	lsrs	r3, r3, #17
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	4a11      	ldr	r2, [pc, #68]	; (80049d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800498a:	5cd3      	ldrb	r3, [r2, r3]
 800498c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a0d      	ldr	r2, [pc, #52]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004992:	fb03 f202 	mul.w	r2, r3, r2
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	e004      	b.n	80049aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a0c      	ldr	r2, [pc, #48]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049a4:	fb02 f303 	mul.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	613b      	str	r3, [r7, #16]
      break;
 80049ae:	e002      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80049b2:	613b      	str	r3, [r7, #16]
      break;
 80049b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049b6:	693b      	ldr	r3, [r7, #16]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000
 80049c8:	007a1200 	.word	0x007a1200
 80049cc:	080071c0 	.word	0x080071c0
 80049d0:	080071d0 	.word	0x080071d0
 80049d4:	003d0900 	.word	0x003d0900

080049d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049dc:	4b02      	ldr	r3, [pc, #8]	; (80049e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	20000018 	.word	0x20000018

080049ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049f0:	f7ff fff2 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4903      	ldr	r1, [pc, #12]	; (8004a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	080071b8 	.word	0x080071b8

08004a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a18:	f7ff ffde 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	0adb      	lsrs	r3, r3, #11
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	4903      	ldr	r1, [pc, #12]	; (8004a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	080071b8 	.word	0x080071b8

08004a3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a44:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <RCC_Delay+0x34>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a0a      	ldr	r2, [pc, #40]	; (8004a74 <RCC_Delay+0x38>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	0a5b      	lsrs	r3, r3, #9
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a58:	bf00      	nop
  }
  while (Delay --);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1e5a      	subs	r2, r3, #1
 8004a5e:	60fa      	str	r2, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f9      	bne.n	8004a58 <RCC_Delay+0x1c>
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr
 8004a70:	20000018 	.word	0x20000018
 8004a74:	10624dd3 	.word	0x10624dd3

08004a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e041      	b.n	8004b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fe f986 	bl	8002db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f000 fca8 	bl	800540c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d001      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e03a      	b.n	8004ba6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <HAL_TIM_Base_Start_IT+0x98>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00e      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x58>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5a:	d009      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x58>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a14      	ldr	r2, [pc, #80]	; (8004bb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x58>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d111      	bne.n	8004b94 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b06      	cmp	r3, #6
 8004b80:	d010      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b92:	e007      	b.n	8004ba4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800

08004bbc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e041      	b.n	8004c52 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fe f89c 	bl	8002d20 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f000 fc06 	bl	800540c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <HAL_TIM_IC_Start_IT+0x1e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	e013      	b.n	8004ca2 <HAL_TIM_IC_Start_IT+0x46>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d104      	bne.n	8004c8a <HAL_TIM_IC_Start_IT+0x2e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	e00b      	b.n	8004ca2 <HAL_TIM_IC_Start_IT+0x46>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d104      	bne.n	8004c9a <HAL_TIM_IC_Start_IT+0x3e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	e003      	b.n	8004ca2 <HAL_TIM_IC_Start_IT+0x46>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d104      	bne.n	8004cb4 <HAL_TIM_IC_Start_IT+0x58>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e013      	b.n	8004cdc <HAL_TIM_IC_Start_IT+0x80>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d104      	bne.n	8004cc4 <HAL_TIM_IC_Start_IT+0x68>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	e00b      	b.n	8004cdc <HAL_TIM_IC_Start_IT+0x80>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d104      	bne.n	8004cd4 <HAL_TIM_IC_Start_IT+0x78>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e003      	b.n	8004cdc <HAL_TIM_IC_Start_IT+0x80>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cde:	7bbb      	ldrb	r3, [r7, #14]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d102      	bne.n	8004cea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ce4:	7b7b      	ldrb	r3, [r7, #13]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d001      	beq.n	8004cee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e0b8      	b.n	8004e60 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_IC_Start_IT+0xa2>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cfc:	e013      	b.n	8004d26 <HAL_TIM_IC_Start_IT+0xca>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_IC_Start_IT+0xb2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d0c:	e00b      	b.n	8004d26 <HAL_TIM_IC_Start_IT+0xca>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d104      	bne.n	8004d1e <HAL_TIM_IC_Start_IT+0xc2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d1c:	e003      	b.n	8004d26 <HAL_TIM_IC_Start_IT+0xca>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2202      	movs	r2, #2
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <HAL_TIM_IC_Start_IT+0xda>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d34:	e013      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x102>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d104      	bne.n	8004d46 <HAL_TIM_IC_Start_IT+0xea>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d44:	e00b      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x102>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d104      	bne.n	8004d56 <HAL_TIM_IC_Start_IT+0xfa>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d54:	e003      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x102>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b0c      	cmp	r3, #12
 8004d62:	d841      	bhi.n	8004de8 <HAL_TIM_IC_Start_IT+0x18c>
 8004d64:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <HAL_TIM_IC_Start_IT+0x110>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004de9 	.word	0x08004de9
 8004d74:	08004de9 	.word	0x08004de9
 8004d78:	08004de9 	.word	0x08004de9
 8004d7c:	08004db3 	.word	0x08004db3
 8004d80:	08004de9 	.word	0x08004de9
 8004d84:	08004de9 	.word	0x08004de9
 8004d88:	08004de9 	.word	0x08004de9
 8004d8c:	08004dc5 	.word	0x08004dc5
 8004d90:	08004de9 	.word	0x08004de9
 8004d94:	08004de9 	.word	0x08004de9
 8004d98:	08004de9 	.word	0x08004de9
 8004d9c:	08004dd7 	.word	0x08004dd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0202 	orr.w	r2, r2, #2
 8004dae:	60da      	str	r2, [r3, #12]
      break;
 8004db0:	e01d      	b.n	8004dee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0204 	orr.w	r2, r2, #4
 8004dc0:	60da      	str	r2, [r3, #12]
      break;
 8004dc2:	e014      	b.n	8004dee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0208 	orr.w	r2, r2, #8
 8004dd2:	60da      	str	r2, [r3, #12]
      break;
 8004dd4:	e00b      	b.n	8004dee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0210 	orr.w	r2, r2, #16
 8004de4:	60da      	str	r2, [r3, #12]
      break;
 8004de6:	e002      	b.n	8004dee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      break;
 8004dec:	bf00      	nop
  }

  if (status == HAL_OK)
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d134      	bne.n	8004e5e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	6839      	ldr	r1, [r7, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fd0a 	bl	8005816 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <HAL_TIM_IC_Start_IT+0x20c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_TIM_IC_Start_IT+0x1ce>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e14:	d009      	beq.n	8004e2a <HAL_TIM_IC_Start_IT+0x1ce>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <HAL_TIM_IC_Start_IT+0x210>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_TIM_IC_Start_IT+0x1ce>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a12      	ldr	r2, [pc, #72]	; (8004e70 <HAL_TIM_IC_Start_IT+0x214>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d111      	bne.n	8004e4e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b06      	cmp	r3, #6
 8004e3a:	d010      	beq.n	8004e5e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4c:	e007      	b.n	8004e5e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800

08004e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d122      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d11b      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0202 	mvn.w	r2, #2
 8004ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fd fcfa 	bl	80028b0 <HAL_TIM_IC_CaptureCallback>
 8004ebc:	e005      	b.n	8004eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa88 	bl	80053d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fa8e 	bl	80053e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d122      	bne.n	8004f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d11b      	bne.n	8004f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0204 	mvn.w	r2, #4
 8004ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fd fcd0 	bl	80028b0 <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa5e 	bl	80053d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fa64 	bl	80053e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d122      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d11b      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0208 	mvn.w	r2, #8
 8004f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fd fca6 	bl	80028b0 <HAL_TIM_IC_CaptureCallback>
 8004f64:	e005      	b.n	8004f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fa34 	bl	80053d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fa3a 	bl	80053e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b10      	cmp	r3, #16
 8004f84:	d122      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d11b      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0210 	mvn.w	r2, #16
 8004f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fd fc7c 	bl	80028b0 <HAL_TIM_IC_CaptureCallback>
 8004fb8:	e005      	b.n	8004fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fa0a 	bl	80053d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fa10 	bl	80053e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d10e      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d107      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0201 	mvn.w	r2, #1
 8004ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fd fb16 	bl	8002624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d10e      	bne.n	8005024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005010:	2b80      	cmp	r3, #128	; 0x80
 8005012:	d107      	bne.n	8005024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800501c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fc85 	bl	800592e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b40      	cmp	r3, #64	; 0x40
 8005030:	d10e      	bne.n	8005050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d107      	bne.n	8005050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f9d4 	bl	80053f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b20      	cmp	r3, #32
 800505c:	d10e      	bne.n	800507c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b20      	cmp	r3, #32
 800506a:	d107      	bne.n	800507c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0220 	mvn.w	r2, #32
 8005074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fc50 	bl	800591c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_IC_ConfigChannel+0x1e>
 800509e:	2302      	movs	r3, #2
 80050a0:	e088      	b.n	80051b4 <HAL_TIM_IC_ConfigChannel+0x130>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d11b      	bne.n	80050e8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80050c0:	f000 fa06 	bl	80054d0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 020c 	bic.w	r2, r2, #12
 80050d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6999      	ldr	r1, [r3, #24]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	619a      	str	r2, [r3, #24]
 80050e6:	e060      	b.n	80051aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d11c      	bne.n	8005128 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80050fe:	f000 fa6f 	bl	80055e0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005110:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6999      	ldr	r1, [r3, #24]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	021a      	lsls	r2, r3, #8
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	619a      	str	r2, [r3, #24]
 8005126:	e040      	b.n	80051aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b08      	cmp	r3, #8
 800512c:	d11b      	bne.n	8005166 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800513e:	f000 faba 	bl	80056b6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 020c 	bic.w	r2, r2, #12
 8005150:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69d9      	ldr	r1, [r3, #28]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	61da      	str	r2, [r3, #28]
 8005164:	e021      	b.n	80051aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b0c      	cmp	r3, #12
 800516a:	d11c      	bne.n	80051a6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800517c:	f000 fad6 	bl	800572c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69da      	ldr	r2, [r3, #28]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800518e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69d9      	ldr	r1, [r3, #28]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	021a      	lsls	r2, r3, #8
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	61da      	str	r2, [r3, #28]
 80051a4:	e001      	b.n	80051aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_TIM_ConfigClockSource+0x1c>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e0b4      	b.n	8005342 <HAL_TIM_ConfigClockSource+0x186>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005210:	d03e      	beq.n	8005290 <HAL_TIM_ConfigClockSource+0xd4>
 8005212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005216:	f200 8087 	bhi.w	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 800521a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521e:	f000 8086 	beq.w	800532e <HAL_TIM_ConfigClockSource+0x172>
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005226:	d87f      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005228:	2b70      	cmp	r3, #112	; 0x70
 800522a:	d01a      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0xa6>
 800522c:	2b70      	cmp	r3, #112	; 0x70
 800522e:	d87b      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005230:	2b60      	cmp	r3, #96	; 0x60
 8005232:	d050      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005234:	2b60      	cmp	r3, #96	; 0x60
 8005236:	d877      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b50      	cmp	r3, #80	; 0x50
 800523a:	d03c      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0xfa>
 800523c:	2b50      	cmp	r3, #80	; 0x50
 800523e:	d873      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d058      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d86f      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b30      	cmp	r3, #48	; 0x30
 800524a:	d064      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x15a>
 800524c:	2b30      	cmp	r3, #48	; 0x30
 800524e:	d86b      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005250:	2b20      	cmp	r3, #32
 8005252:	d060      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x15a>
 8005254:	2b20      	cmp	r3, #32
 8005256:	d867      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d05c      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x15a>
 800525c:	2b10      	cmp	r3, #16
 800525e:	d05a      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x15a>
 8005260:	e062      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005272:	f000 fab1 	bl	80057d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	609a      	str	r2, [r3, #8]
      break;
 800528e:	e04f      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052a0:	f000 fa9a 	bl	80057d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052b2:	609a      	str	r2, [r3, #8]
      break;
 80052b4:	e03c      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c2:	461a      	mov	r2, r3
 80052c4:	f000 f95e 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2150      	movs	r1, #80	; 0x50
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fa68 	bl	80057a4 <TIM_ITRx_SetConfig>
      break;
 80052d4:	e02c      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052e2:	461a      	mov	r2, r3
 80052e4:	f000 f9b8 	bl	8005658 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2160      	movs	r1, #96	; 0x60
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fa58 	bl	80057a4 <TIM_ITRx_SetConfig>
      break;
 80052f4:	e01c      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005302:	461a      	mov	r2, r3
 8005304:	f000 f93e 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2140      	movs	r1, #64	; 0x40
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fa48 	bl	80057a4 <TIM_ITRx_SetConfig>
      break;
 8005314:	e00c      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f000 fa3f 	bl	80057a4 <TIM_ITRx_SetConfig>
      break;
 8005326:	e003      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
      break;
 800532c:	e000      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800532e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b0c      	cmp	r3, #12
 800535e:	d831      	bhi.n	80053c4 <HAL_TIM_ReadCapturedValue+0x78>
 8005360:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005366:	bf00      	nop
 8005368:	0800539d 	.word	0x0800539d
 800536c:	080053c5 	.word	0x080053c5
 8005370:	080053c5 	.word	0x080053c5
 8005374:	080053c5 	.word	0x080053c5
 8005378:	080053a7 	.word	0x080053a7
 800537c:	080053c5 	.word	0x080053c5
 8005380:	080053c5 	.word	0x080053c5
 8005384:	080053c5 	.word	0x080053c5
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053c5 	.word	0x080053c5
 8005390:	080053c5 	.word	0x080053c5
 8005394:	080053c5 	.word	0x080053c5
 8005398:	080053bb 	.word	0x080053bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a2:	60fb      	str	r3, [r7, #12]

      break;
 80053a4:	e00f      	b.n	80053c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	60fb      	str	r3, [r7, #12]

      break;
 80053ae:	e00a      	b.n	80053c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b6:	60fb      	str	r3, [r7, #12]

      break;
 80053b8:	e005      	b.n	80053c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	60fb      	str	r3, [r7, #12]

      break;
 80053c2:	e000      	b.n	80053c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80053c4:	bf00      	nop
  }

  return tmpreg;
 80053c6:	68fb      	ldr	r3, [r7, #12]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop

080053d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr
	...

0800540c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a29      	ldr	r2, [pc, #164]	; (80054c4 <TIM_Base_SetConfig+0xb8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00b      	beq.n	800543c <TIM_Base_SetConfig+0x30>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542a:	d007      	beq.n	800543c <TIM_Base_SetConfig+0x30>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a26      	ldr	r2, [pc, #152]	; (80054c8 <TIM_Base_SetConfig+0xbc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d003      	beq.n	800543c <TIM_Base_SetConfig+0x30>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a25      	ldr	r2, [pc, #148]	; (80054cc <TIM_Base_SetConfig+0xc0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d108      	bne.n	800544e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a1c      	ldr	r2, [pc, #112]	; (80054c4 <TIM_Base_SetConfig+0xb8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0x62>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0x62>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a19      	ldr	r2, [pc, #100]	; (80054c8 <TIM_Base_SetConfig+0xbc>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0x62>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a18      	ldr	r2, [pc, #96]	; (80054cc <TIM_Base_SetConfig+0xc0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <TIM_Base_SetConfig+0xb8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d103      	bne.n	80054b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	615a      	str	r2, [r3, #20]
}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800

080054d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f023 0201 	bic.w	r2, r3, #1
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4a1f      	ldr	r2, [pc, #124]	; (8005578 <TIM_TI1_SetConfig+0xa8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00b      	beq.n	8005516 <TIM_TI1_SetConfig+0x46>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005504:	d007      	beq.n	8005516 <TIM_TI1_SetConfig+0x46>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4a1c      	ldr	r2, [pc, #112]	; (800557c <TIM_TI1_SetConfig+0xac>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d003      	beq.n	8005516 <TIM_TI1_SetConfig+0x46>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <TIM_TI1_SetConfig+0xb0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d101      	bne.n	800551a <TIM_TI1_SetConfig+0x4a>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <TIM_TI1_SetConfig+0x4c>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e003      	b.n	800553a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	b2db      	uxtb	r3, r3
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f023 030a 	bic.w	r3, r3, #10
 8005554:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f003 030a 	and.w	r3, r3, #10
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40000400 	.word	0x40000400
 8005580:	40000800 	.word	0x40000800

08005584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 030a 	bic.w	r3, r3, #10
 80055c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr

080055e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f023 0210 	bic.w	r2, r3, #16
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800561e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	031b      	lsls	r3, r3, #12
 8005624:	b29b      	uxth	r3, r3
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005632:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	621a      	str	r2, [r3, #32]
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0210 	bic.w	r2, r3, #16
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	031b      	lsls	r3, r3, #12
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005694:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	621a      	str	r2, [r3, #32]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr

080056b6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
 80056c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f023 0303 	bic.w	r3, r3, #3
 80056e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056f2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005706:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr

0800572c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005758:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	021b      	lsls	r3, r3, #8
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800576a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	031b      	lsls	r3, r3, #12
 8005770:	b29b      	uxth	r3, r3
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800577e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	031b      	lsls	r3, r3, #12
 8005784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr

080057a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f043 0307 	orr.w	r3, r3, #7
 80057c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	609a      	str	r2, [r3, #8]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	021a      	lsls	r2, r3, #8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4313      	orrs	r3, r2
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	609a      	str	r2, [r3, #8]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr

08005816 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005816:	b480      	push	{r7}
 8005818:	b087      	sub	sp, #28
 800581a:	af00      	add	r7, sp, #0
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f003 031f 	and.w	r3, r3, #31
 8005828:	2201      	movs	r2, #1
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1a      	ldr	r2, [r3, #32]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	43db      	mvns	r3, r3
 8005838:	401a      	ands	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	fa01 f303 	lsl.w	r3, r1, r3
 800584e:	431a      	orrs	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	621a      	str	r2, [r3, #32]
}
 8005854:	bf00      	nop
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr
	...

08005860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005874:	2302      	movs	r3, #2
 8005876:	e046      	b.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a16      	ldr	r2, [pc, #88]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c4:	d009      	beq.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a12      	ldr	r2, [pc, #72]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a10      	ldr	r2, [pc, #64]	; (8005918 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d10c      	bne.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40000400 	.word	0x40000400
 8005918:	40000800 	.word	0x40000800

0800591c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr

0800592e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e042      	b.n	80059d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fd fa46 	bl	8002df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2224      	movs	r2, #36	; 0x24
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fdc5 	bl	8006514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d16d      	bne.n	8005adc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_UART_Transmit+0x2c>
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e066      	b.n	8005ade <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2221      	movs	r2, #33	; 0x21
 8005a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a1e:	f7fd fbc5 	bl	80031ac <HAL_GetTick>
 8005a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	88fa      	ldrh	r2, [r7, #6]
 8005a28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	88fa      	ldrh	r2, [r7, #6]
 8005a2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a38:	d108      	bne.n	8005a4c <HAL_UART_Transmit+0x6c>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	e003      	b.n	8005a54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a54:	e02a      	b.n	8005aac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2180      	movs	r1, #128	; 0x80
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fb14 	bl	800608e <UART_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e036      	b.n	8005ade <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	3302      	adds	r3, #2
 8005a8a:	61bb      	str	r3, [r7, #24]
 8005a8c:	e007      	b.n	8005a9e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	781a      	ldrb	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1cf      	bne.n	8005a56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2140      	movs	r1, #64	; 0x40
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fae4 	bl	800608e <UART_WaitOnFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e006      	b.n	8005ade <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e000      	b.n	8005ade <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005adc:	2302      	movs	r3, #2
  }
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	4613      	mov	r3, r2
 8005af2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d112      	bne.n	8005b26 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <HAL_UART_Receive_IT+0x26>
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e00b      	b.n	8005b28 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fb24 	bl	800616a <UART_Start_Receive_IT>
 8005b22:	4603      	mov	r3, r0
 8005b24:	e000      	b.n	8005b28 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b26:	2302      	movs	r3, #2
  }
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b0ba      	sub	sp, #232	; 0xe8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10f      	bne.n	8005b96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <HAL_UART_IRQHandler+0x66>
 8005b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fc01 	bl	8006396 <UART_Receive_IT>
      return;
 8005b94:	e25b      	b.n	800604e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80de 	beq.w	8005d5c <HAL_UART_IRQHandler+0x22c>
 8005ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d106      	bne.n	8005bba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80d1 	beq.w	8005d5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <HAL_UART_IRQHandler+0xae>
 8005bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd6:	f043 0201 	orr.w	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00b      	beq.n	8005c02 <HAL_UART_IRQHandler+0xd2>
 8005bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	f043 0202 	orr.w	r2, r3, #2
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <HAL_UART_IRQHandler+0xf6>
 8005c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1e:	f043 0204 	orr.w	r2, r3, #4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d011      	beq.n	8005c56 <HAL_UART_IRQHandler+0x126>
 8005c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d105      	bne.n	8005c4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	f043 0208 	orr.w	r2, r3, #8
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 81f2 	beq.w	8006044 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <HAL_UART_IRQHandler+0x14e>
 8005c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fb8c 	bl	8006396 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bf14      	ite	ne
 8005c8c:	2301      	movne	r3, #1
 8005c8e:	2300      	moveq	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d103      	bne.n	8005caa <HAL_UART_IRQHandler+0x17a>
 8005ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d04f      	beq.n	8005d4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fa96 	bl	80061dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d041      	beq.n	8005d42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3314      	adds	r3, #20
 8005cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3314      	adds	r3, #20
 8005ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1d9      	bne.n	8005cbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d013      	beq.n	8005d3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d16:	4a7e      	ldr	r2, [pc, #504]	; (8005f10 <HAL_UART_IRQHandler+0x3e0>)
 8005d18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fd fbba 	bl	8003498 <HAL_DMA_Abort_IT>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d016      	beq.n	8005d58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d38:	e00e      	b.n	8005d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f993 	bl	8006066 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d40:	e00a      	b.n	8005d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f98f 	bl	8006066 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d48:	e006      	b.n	8005d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f98b 	bl	8006066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005d56:	e175      	b.n	8006044 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d58:	bf00      	nop
    return;
 8005d5a:	e173      	b.n	8006044 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	f040 814f 	bne.w	8006004 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8148 	beq.w	8006004 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8141 	beq.w	8006004 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80b6 	beq.w	8005f14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 8145 	beq.w	8006048 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	f080 813e 	bcs.w	8006048 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	f000 8088 	beq.w	8005ef0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	330c      	adds	r3, #12
 8005de6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	330c      	adds	r3, #12
 8005e08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e0c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1d9      	bne.n	8005de0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3314      	adds	r3, #20
 8005e32:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e3e:	f023 0301 	bic.w	r3, r3, #1
 8005e42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e1      	bne.n	8005e2c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3314      	adds	r3, #20
 8005e6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3314      	adds	r3, #20
 8005e88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e3      	bne.n	8005e68 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	330c      	adds	r3, #12
 8005eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec0:	f023 0310 	bic.w	r3, r3, #16
 8005ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ed2:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ed4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ed8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e3      	bne.n	8005eae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fd fa99 	bl	8003422 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f8b6 	bl	8006078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f0c:	e09c      	b.n	8006048 <HAL_UART_IRQHandler+0x518>
 8005f0e:	bf00      	nop
 8005f10:	080062a1 	.word	0x080062a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 808e 	beq.w	800604c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8089 	beq.w	800604c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	330c      	adds	r3, #12
 8005f40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f5e:	647a      	str	r2, [r7, #68]	; 0x44
 8005f60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e3      	bne.n	8005f3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3314      	adds	r3, #20
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	623b      	str	r3, [r7, #32]
   return(result);
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3314      	adds	r3, #20
 8005f92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f96:	633a      	str	r2, [r7, #48]	; 0x30
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e3      	bne.n	8005f72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0310 	bic.w	r3, r3, #16
 8005fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fdc:	61fa      	str	r2, [r7, #28]
 8005fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	69b9      	ldr	r1, [r7, #24]
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e3      	bne.n	8005fb8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ff6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f83b 	bl	8006078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006002:	e023      	b.n	800604c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <HAL_UART_IRQHandler+0x4f4>
 8006010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f953 	bl	80062c8 <UART_Transmit_IT>
    return;
 8006022:	e014      	b.n	800604e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00e      	beq.n	800604e <HAL_UART_IRQHandler+0x51e>
 8006030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f992 	bl	8006366 <UART_EndTransmit_IT>
    return;
 8006042:	e004      	b.n	800604e <HAL_UART_IRQHandler+0x51e>
    return;
 8006044:	bf00      	nop
 8006046:	e002      	b.n	800604e <HAL_UART_IRQHandler+0x51e>
      return;
 8006048:	bf00      	nop
 800604a:	e000      	b.n	800604e <HAL_UART_IRQHandler+0x51e>
      return;
 800604c:	bf00      	nop
  }
}
 800604e:	37e8      	adds	r7, #232	; 0xe8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr

08006066 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr

08006078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr

0800608e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b090      	sub	sp, #64	; 0x40
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	603b      	str	r3, [r7, #0]
 800609a:	4613      	mov	r3, r2
 800609c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800609e:	e050      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a6:	d04c      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d007      	beq.n	80060be <UART_WaitOnFlagUntilTimeout+0x30>
 80060ae:	f7fd f87d 	bl	80031ac <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d241      	bcs.n	8006142 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	330c      	adds	r3, #12
 80060dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060de:	637a      	str	r2, [r7, #52]	; 0x34
 80060e0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e5      	bne.n	80060be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3314      	adds	r3, #20
 80060f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	613b      	str	r3, [r7, #16]
   return(result);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f023 0301 	bic.w	r3, r3, #1
 8006108:	63bb      	str	r3, [r7, #56]	; 0x38
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3314      	adds	r3, #20
 8006110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006112:	623a      	str	r2, [r7, #32]
 8006114:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	69f9      	ldr	r1, [r7, #28]
 8006118:	6a3a      	ldr	r2, [r7, #32]
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e5      	bne.n	80060f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2220      	movs	r2, #32
 800612a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e00f      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	429a      	cmp	r2, r3
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	429a      	cmp	r2, r3
 800615e:	d09f      	beq.n	80060a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3740      	adds	r7, #64	; 0x40
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	4613      	mov	r3, r2
 8006176:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	88fa      	ldrh	r2, [r7, #6]
 8006182:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	88fa      	ldrh	r2, [r7, #6]
 8006188:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2222      	movs	r2, #34	; 0x22
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695a      	ldr	r2, [r3, #20]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0220 	orr.w	r2, r2, #32
 80061ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b095      	sub	sp, #84	; 0x54
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	330c      	adds	r3, #12
 80061ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ee:	e853 3f00 	ldrex	r3, [r3]
 80061f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	330c      	adds	r3, #12
 8006202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006204:	643a      	str	r2, [r7, #64]	; 0x40
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800620a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800620c:	e841 2300 	strex	r3, r2, [r1]
 8006210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e5      	bne.n	80061e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3314      	adds	r3, #20
 800621e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	61fb      	str	r3, [r7, #28]
   return(result);
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3314      	adds	r3, #20
 8006236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006238:	62fa      	str	r2, [r7, #44]	; 0x2c
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800623e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e5      	bne.n	8006218 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006250:	2b01      	cmp	r3, #1
 8006252:	d119      	bne.n	8006288 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	330c      	adds	r3, #12
 800625a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	60bb      	str	r3, [r7, #8]
   return(result);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f023 0310 	bic.w	r3, r3, #16
 800626a:	647b      	str	r3, [r7, #68]	; 0x44
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330c      	adds	r3, #12
 8006272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006274:	61ba      	str	r2, [r7, #24]
 8006276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6979      	ldr	r1, [r7, #20]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	613b      	str	r3, [r7, #16]
   return(result);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e5      	bne.n	8006254 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006296:	bf00      	nop
 8006298:	3754      	adds	r7, #84	; 0x54
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr

080062a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f7ff fed3 	bl	8006066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062c0:	bf00      	nop
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b21      	cmp	r3, #33	; 0x21
 80062da:	d13e      	bne.n	800635a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e4:	d114      	bne.n	8006310 <UART_Transmit_IT+0x48>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d110      	bne.n	8006310 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006302:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	1c9a      	adds	r2, r3, #2
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]
 800630e:	e008      	b.n	8006322 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	1c59      	adds	r1, r3, #1
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6211      	str	r1, [r2, #32]
 800631a:	781a      	ldrb	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29b      	uxth	r3, r3
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	4619      	mov	r1, r3
 8006330:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10f      	bne.n	8006356 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006344:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006354:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	e000      	b.n	800635c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800635a:	2302      	movs	r3, #2
  }
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	bc80      	pop	{r7}
 8006364:	4770      	bx	lr

08006366 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800637c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff fe64 	bl	8006054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b08c      	sub	sp, #48	; 0x30
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b22      	cmp	r3, #34	; 0x22
 80063a8:	f040 80ae 	bne.w	8006508 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b4:	d117      	bne.n	80063e6 <UART_Receive_IT+0x50>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d113      	bne.n	80063e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063de:	1c9a      	adds	r2, r3, #2
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	629a      	str	r2, [r3, #40]	; 0x28
 80063e4:	e026      	b.n	8006434 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f8:	d007      	beq.n	800640a <UART_Receive_IT+0x74>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <UART_Receive_IT+0x82>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d106      	bne.n	8006418 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	e008      	b.n	800642a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006424:	b2da      	uxtb	r2, r3
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	b29b      	uxth	r3, r3
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	4619      	mov	r1, r3
 8006442:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006444:	2b00      	cmp	r3, #0
 8006446:	d15d      	bne.n	8006504 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0220 	bic.w	r2, r2, #32
 8006456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695a      	ldr	r2, [r3, #20]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0201 	bic.w	r2, r2, #1
 8006476:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648a:	2b01      	cmp	r3, #1
 800648c:	d135      	bne.n	80064fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	330c      	adds	r3, #12
 800649a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	613b      	str	r3, [r7, #16]
   return(result);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f023 0310 	bic.w	r3, r3, #16
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b4:	623a      	str	r2, [r7, #32]
 80064b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	69f9      	ldr	r1, [r7, #28]
 80064ba:	6a3a      	ldr	r2, [r7, #32]
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e5      	bne.n	8006494 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0310 	and.w	r3, r3, #16
 80064d2:	2b10      	cmp	r3, #16
 80064d4:	d10a      	bne.n	80064ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff fdc0 	bl	8006078 <HAL_UARTEx_RxEventCallback>
 80064f8:	e002      	b.n	8006500 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc fb70 	bl	8002be0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	e002      	b.n	800650a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	e000      	b.n	800650a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006508:	2302      	movs	r3, #2
  }
}
 800650a:	4618      	mov	r0, r3
 800650c:	3730      	adds	r7, #48	; 0x30
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800654e:	f023 030c 	bic.w	r3, r3, #12
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	430b      	orrs	r3, r1
 800655a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a2c      	ldr	r2, [pc, #176]	; (8006628 <UART_SetConfig+0x114>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d103      	bne.n	8006584 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800657c:	f7fe fa4a 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	e002      	b.n	800658a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006584:	f7fe fa32 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 8006588:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	009a      	lsls	r2, r3, #2
 8006594:	441a      	add	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a0:	4a22      	ldr	r2, [pc, #136]	; (800662c <UART_SetConfig+0x118>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	0119      	lsls	r1, r3, #4
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	009a      	lsls	r2, r3, #2
 80065b4:	441a      	add	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80065c0:	4b1a      	ldr	r3, [pc, #104]	; (800662c <UART_SetConfig+0x118>)
 80065c2:	fba3 0302 	umull	r0, r3, r3, r2
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	2064      	movs	r0, #100	; 0x64
 80065ca:	fb00 f303 	mul.w	r3, r0, r3
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	3332      	adds	r3, #50	; 0x32
 80065d4:	4a15      	ldr	r2, [pc, #84]	; (800662c <UART_SetConfig+0x118>)
 80065d6:	fba2 2303 	umull	r2, r3, r2, r3
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065e0:	4419      	add	r1, r3
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	009a      	lsls	r2, r3, #2
 80065ec:	441a      	add	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80065f8:	4b0c      	ldr	r3, [pc, #48]	; (800662c <UART_SetConfig+0x118>)
 80065fa:	fba3 0302 	umull	r0, r3, r3, r2
 80065fe:	095b      	lsrs	r3, r3, #5
 8006600:	2064      	movs	r0, #100	; 0x64
 8006602:	fb00 f303 	mul.w	r3, r0, r3
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	3332      	adds	r3, #50	; 0x32
 800660c:	4a07      	ldr	r2, [pc, #28]	; (800662c <UART_SetConfig+0x118>)
 800660e:	fba2 2303 	umull	r2, r3, r2, r3
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	f003 020f 	and.w	r2, r3, #15
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	440a      	add	r2, r1
 800661e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40013800 	.word	0x40013800
 800662c:	51eb851f 	.word	0x51eb851f

08006630 <malloc>:
 8006630:	4b02      	ldr	r3, [pc, #8]	; (800663c <malloc+0xc>)
 8006632:	4601      	mov	r1, r0
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	f000 b82b 	b.w	8006690 <_malloc_r>
 800663a:	bf00      	nop
 800663c:	20000070 	.word	0x20000070

08006640 <free>:
 8006640:	4b02      	ldr	r3, [pc, #8]	; (800664c <free+0xc>)
 8006642:	4601      	mov	r1, r0
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	f000 b92b 	b.w	80068a0 <_free_r>
 800664a:	bf00      	nop
 800664c:	20000070 	.word	0x20000070

08006650 <sbrk_aligned>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	4e0e      	ldr	r6, [pc, #56]	; (800668c <sbrk_aligned+0x3c>)
 8006654:	460c      	mov	r4, r1
 8006656:	6831      	ldr	r1, [r6, #0]
 8006658:	4605      	mov	r5, r0
 800665a:	b911      	cbnz	r1, 8006662 <sbrk_aligned+0x12>
 800665c:	f000 f8dc 	bl	8006818 <_sbrk_r>
 8006660:	6030      	str	r0, [r6, #0]
 8006662:	4621      	mov	r1, r4
 8006664:	4628      	mov	r0, r5
 8006666:	f000 f8d7 	bl	8006818 <_sbrk_r>
 800666a:	1c43      	adds	r3, r0, #1
 800666c:	d00a      	beq.n	8006684 <sbrk_aligned+0x34>
 800666e:	1cc4      	adds	r4, r0, #3
 8006670:	f024 0403 	bic.w	r4, r4, #3
 8006674:	42a0      	cmp	r0, r4
 8006676:	d007      	beq.n	8006688 <sbrk_aligned+0x38>
 8006678:	1a21      	subs	r1, r4, r0
 800667a:	4628      	mov	r0, r5
 800667c:	f000 f8cc 	bl	8006818 <_sbrk_r>
 8006680:	3001      	adds	r0, #1
 8006682:	d101      	bne.n	8006688 <sbrk_aligned+0x38>
 8006684:	f04f 34ff 	mov.w	r4, #4294967295
 8006688:	4620      	mov	r0, r4
 800668a:	bd70      	pop	{r4, r5, r6, pc}
 800668c:	20000314 	.word	0x20000314

08006690 <_malloc_r>:
 8006690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006694:	1ccd      	adds	r5, r1, #3
 8006696:	f025 0503 	bic.w	r5, r5, #3
 800669a:	3508      	adds	r5, #8
 800669c:	2d0c      	cmp	r5, #12
 800669e:	bf38      	it	cc
 80066a0:	250c      	movcc	r5, #12
 80066a2:	2d00      	cmp	r5, #0
 80066a4:	4607      	mov	r7, r0
 80066a6:	db01      	blt.n	80066ac <_malloc_r+0x1c>
 80066a8:	42a9      	cmp	r1, r5
 80066aa:	d905      	bls.n	80066b8 <_malloc_r+0x28>
 80066ac:	230c      	movs	r3, #12
 80066ae:	2600      	movs	r6, #0
 80066b0:	603b      	str	r3, [r7, #0]
 80066b2:	4630      	mov	r0, r6
 80066b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800678c <_malloc_r+0xfc>
 80066bc:	f000 f868 	bl	8006790 <__malloc_lock>
 80066c0:	f8d8 3000 	ldr.w	r3, [r8]
 80066c4:	461c      	mov	r4, r3
 80066c6:	bb5c      	cbnz	r4, 8006720 <_malloc_r+0x90>
 80066c8:	4629      	mov	r1, r5
 80066ca:	4638      	mov	r0, r7
 80066cc:	f7ff ffc0 	bl	8006650 <sbrk_aligned>
 80066d0:	1c43      	adds	r3, r0, #1
 80066d2:	4604      	mov	r4, r0
 80066d4:	d155      	bne.n	8006782 <_malloc_r+0xf2>
 80066d6:	f8d8 4000 	ldr.w	r4, [r8]
 80066da:	4626      	mov	r6, r4
 80066dc:	2e00      	cmp	r6, #0
 80066de:	d145      	bne.n	800676c <_malloc_r+0xdc>
 80066e0:	2c00      	cmp	r4, #0
 80066e2:	d048      	beq.n	8006776 <_malloc_r+0xe6>
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	4631      	mov	r1, r6
 80066e8:	4638      	mov	r0, r7
 80066ea:	eb04 0903 	add.w	r9, r4, r3
 80066ee:	f000 f893 	bl	8006818 <_sbrk_r>
 80066f2:	4581      	cmp	r9, r0
 80066f4:	d13f      	bne.n	8006776 <_malloc_r+0xe6>
 80066f6:	6821      	ldr	r1, [r4, #0]
 80066f8:	4638      	mov	r0, r7
 80066fa:	1a6d      	subs	r5, r5, r1
 80066fc:	4629      	mov	r1, r5
 80066fe:	f7ff ffa7 	bl	8006650 <sbrk_aligned>
 8006702:	3001      	adds	r0, #1
 8006704:	d037      	beq.n	8006776 <_malloc_r+0xe6>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	442b      	add	r3, r5
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	f8d8 3000 	ldr.w	r3, [r8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d038      	beq.n	8006786 <_malloc_r+0xf6>
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	42a2      	cmp	r2, r4
 8006718:	d12b      	bne.n	8006772 <_malloc_r+0xe2>
 800671a:	2200      	movs	r2, #0
 800671c:	605a      	str	r2, [r3, #4]
 800671e:	e00f      	b.n	8006740 <_malloc_r+0xb0>
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	1b52      	subs	r2, r2, r5
 8006724:	d41f      	bmi.n	8006766 <_malloc_r+0xd6>
 8006726:	2a0b      	cmp	r2, #11
 8006728:	d917      	bls.n	800675a <_malloc_r+0xca>
 800672a:	1961      	adds	r1, r4, r5
 800672c:	42a3      	cmp	r3, r4
 800672e:	6025      	str	r5, [r4, #0]
 8006730:	bf18      	it	ne
 8006732:	6059      	strne	r1, [r3, #4]
 8006734:	6863      	ldr	r3, [r4, #4]
 8006736:	bf08      	it	eq
 8006738:	f8c8 1000 	streq.w	r1, [r8]
 800673c:	5162      	str	r2, [r4, r5]
 800673e:	604b      	str	r3, [r1, #4]
 8006740:	4638      	mov	r0, r7
 8006742:	f104 060b 	add.w	r6, r4, #11
 8006746:	f000 f829 	bl	800679c <__malloc_unlock>
 800674a:	f026 0607 	bic.w	r6, r6, #7
 800674e:	1d23      	adds	r3, r4, #4
 8006750:	1af2      	subs	r2, r6, r3
 8006752:	d0ae      	beq.n	80066b2 <_malloc_r+0x22>
 8006754:	1b9b      	subs	r3, r3, r6
 8006756:	50a3      	str	r3, [r4, r2]
 8006758:	e7ab      	b.n	80066b2 <_malloc_r+0x22>
 800675a:	42a3      	cmp	r3, r4
 800675c:	6862      	ldr	r2, [r4, #4]
 800675e:	d1dd      	bne.n	800671c <_malloc_r+0x8c>
 8006760:	f8c8 2000 	str.w	r2, [r8]
 8006764:	e7ec      	b.n	8006740 <_malloc_r+0xb0>
 8006766:	4623      	mov	r3, r4
 8006768:	6864      	ldr	r4, [r4, #4]
 800676a:	e7ac      	b.n	80066c6 <_malloc_r+0x36>
 800676c:	4634      	mov	r4, r6
 800676e:	6876      	ldr	r6, [r6, #4]
 8006770:	e7b4      	b.n	80066dc <_malloc_r+0x4c>
 8006772:	4613      	mov	r3, r2
 8006774:	e7cc      	b.n	8006710 <_malloc_r+0x80>
 8006776:	230c      	movs	r3, #12
 8006778:	4638      	mov	r0, r7
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	f000 f80e 	bl	800679c <__malloc_unlock>
 8006780:	e797      	b.n	80066b2 <_malloc_r+0x22>
 8006782:	6025      	str	r5, [r4, #0]
 8006784:	e7dc      	b.n	8006740 <_malloc_r+0xb0>
 8006786:	605b      	str	r3, [r3, #4]
 8006788:	deff      	udf	#255	; 0xff
 800678a:	bf00      	nop
 800678c:	20000310 	.word	0x20000310

08006790 <__malloc_lock>:
 8006790:	4801      	ldr	r0, [pc, #4]	; (8006798 <__malloc_lock+0x8>)
 8006792:	f000 b87b 	b.w	800688c <__retarget_lock_acquire_recursive>
 8006796:	bf00      	nop
 8006798:	20000454 	.word	0x20000454

0800679c <__malloc_unlock>:
 800679c:	4801      	ldr	r0, [pc, #4]	; (80067a4 <__malloc_unlock+0x8>)
 800679e:	f000 b876 	b.w	800688e <__retarget_lock_release_recursive>
 80067a2:	bf00      	nop
 80067a4:	20000454 	.word	0x20000454

080067a8 <siprintf>:
 80067a8:	b40e      	push	{r1, r2, r3}
 80067aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067ae:	b500      	push	{lr}
 80067b0:	b09c      	sub	sp, #112	; 0x70
 80067b2:	ab1d      	add	r3, sp, #116	; 0x74
 80067b4:	9002      	str	r0, [sp, #8]
 80067b6:	9006      	str	r0, [sp, #24]
 80067b8:	9107      	str	r1, [sp, #28]
 80067ba:	9104      	str	r1, [sp, #16]
 80067bc:	4808      	ldr	r0, [pc, #32]	; (80067e0 <siprintf+0x38>)
 80067be:	4909      	ldr	r1, [pc, #36]	; (80067e4 <siprintf+0x3c>)
 80067c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80067c4:	9105      	str	r1, [sp, #20]
 80067c6:	6800      	ldr	r0, [r0, #0]
 80067c8:	a902      	add	r1, sp, #8
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	f000 f90a 	bl	80069e4 <_svfiprintf_r>
 80067d0:	2200      	movs	r2, #0
 80067d2:	9b02      	ldr	r3, [sp, #8]
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	b01c      	add	sp, #112	; 0x70
 80067d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067dc:	b003      	add	sp, #12
 80067de:	4770      	bx	lr
 80067e0:	20000070 	.word	0x20000070
 80067e4:	ffff0208 	.word	0xffff0208

080067e8 <memcmp>:
 80067e8:	b510      	push	{r4, lr}
 80067ea:	3901      	subs	r1, #1
 80067ec:	4402      	add	r2, r0
 80067ee:	4290      	cmp	r0, r2
 80067f0:	d101      	bne.n	80067f6 <memcmp+0xe>
 80067f2:	2000      	movs	r0, #0
 80067f4:	e005      	b.n	8006802 <memcmp+0x1a>
 80067f6:	7803      	ldrb	r3, [r0, #0]
 80067f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80067fc:	42a3      	cmp	r3, r4
 80067fe:	d001      	beq.n	8006804 <memcmp+0x1c>
 8006800:	1b18      	subs	r0, r3, r4
 8006802:	bd10      	pop	{r4, pc}
 8006804:	3001      	adds	r0, #1
 8006806:	e7f2      	b.n	80067ee <memcmp+0x6>

08006808 <memset>:
 8006808:	4603      	mov	r3, r0
 800680a:	4402      	add	r2, r0
 800680c:	4293      	cmp	r3, r2
 800680e:	d100      	bne.n	8006812 <memset+0xa>
 8006810:	4770      	bx	lr
 8006812:	f803 1b01 	strb.w	r1, [r3], #1
 8006816:	e7f9      	b.n	800680c <memset+0x4>

08006818 <_sbrk_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	2300      	movs	r3, #0
 800681c:	4d05      	ldr	r5, [pc, #20]	; (8006834 <_sbrk_r+0x1c>)
 800681e:	4604      	mov	r4, r0
 8006820:	4608      	mov	r0, r1
 8006822:	602b      	str	r3, [r5, #0]
 8006824:	f7fc fc08 	bl	8003038 <_sbrk>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d102      	bne.n	8006832 <_sbrk_r+0x1a>
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	b103      	cbz	r3, 8006832 <_sbrk_r+0x1a>
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	bd38      	pop	{r3, r4, r5, pc}
 8006834:	20000450 	.word	0x20000450

08006838 <__errno>:
 8006838:	4b01      	ldr	r3, [pc, #4]	; (8006840 <__errno+0x8>)
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000070 	.word	0x20000070

08006844 <__libc_init_array>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	2600      	movs	r6, #0
 8006848:	4d0c      	ldr	r5, [pc, #48]	; (800687c <__libc_init_array+0x38>)
 800684a:	4c0d      	ldr	r4, [pc, #52]	; (8006880 <__libc_init_array+0x3c>)
 800684c:	1b64      	subs	r4, r4, r5
 800684e:	10a4      	asrs	r4, r4, #2
 8006850:	42a6      	cmp	r6, r4
 8006852:	d109      	bne.n	8006868 <__libc_init_array+0x24>
 8006854:	f000 fbc6 	bl	8006fe4 <_init>
 8006858:	2600      	movs	r6, #0
 800685a:	4d0a      	ldr	r5, [pc, #40]	; (8006884 <__libc_init_array+0x40>)
 800685c:	4c0a      	ldr	r4, [pc, #40]	; (8006888 <__libc_init_array+0x44>)
 800685e:	1b64      	subs	r4, r4, r5
 8006860:	10a4      	asrs	r4, r4, #2
 8006862:	42a6      	cmp	r6, r4
 8006864:	d105      	bne.n	8006872 <__libc_init_array+0x2e>
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	f855 3b04 	ldr.w	r3, [r5], #4
 800686c:	4798      	blx	r3
 800686e:	3601      	adds	r6, #1
 8006870:	e7ee      	b.n	8006850 <__libc_init_array+0xc>
 8006872:	f855 3b04 	ldr.w	r3, [r5], #4
 8006876:	4798      	blx	r3
 8006878:	3601      	adds	r6, #1
 800687a:	e7f2      	b.n	8006862 <__libc_init_array+0x1e>
 800687c:	08007208 	.word	0x08007208
 8006880:	08007208 	.word	0x08007208
 8006884:	08007208 	.word	0x08007208
 8006888:	0800720c 	.word	0x0800720c

0800688c <__retarget_lock_acquire_recursive>:
 800688c:	4770      	bx	lr

0800688e <__retarget_lock_release_recursive>:
 800688e:	4770      	bx	lr

08006890 <strcpy>:
 8006890:	4603      	mov	r3, r0
 8006892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006896:	f803 2b01 	strb.w	r2, [r3], #1
 800689a:	2a00      	cmp	r2, #0
 800689c:	d1f9      	bne.n	8006892 <strcpy+0x2>
 800689e:	4770      	bx	lr

080068a0 <_free_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4605      	mov	r5, r0
 80068a4:	2900      	cmp	r1, #0
 80068a6:	d040      	beq.n	800692a <_free_r+0x8a>
 80068a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ac:	1f0c      	subs	r4, r1, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bfb8      	it	lt
 80068b2:	18e4      	addlt	r4, r4, r3
 80068b4:	f7ff ff6c 	bl	8006790 <__malloc_lock>
 80068b8:	4a1c      	ldr	r2, [pc, #112]	; (800692c <_free_r+0x8c>)
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	b933      	cbnz	r3, 80068cc <_free_r+0x2c>
 80068be:	6063      	str	r3, [r4, #4]
 80068c0:	6014      	str	r4, [r2, #0]
 80068c2:	4628      	mov	r0, r5
 80068c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068c8:	f7ff bf68 	b.w	800679c <__malloc_unlock>
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	d908      	bls.n	80068e2 <_free_r+0x42>
 80068d0:	6820      	ldr	r0, [r4, #0]
 80068d2:	1821      	adds	r1, r4, r0
 80068d4:	428b      	cmp	r3, r1
 80068d6:	bf01      	itttt	eq
 80068d8:	6819      	ldreq	r1, [r3, #0]
 80068da:	685b      	ldreq	r3, [r3, #4]
 80068dc:	1809      	addeq	r1, r1, r0
 80068de:	6021      	streq	r1, [r4, #0]
 80068e0:	e7ed      	b.n	80068be <_free_r+0x1e>
 80068e2:	461a      	mov	r2, r3
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	b10b      	cbz	r3, 80068ec <_free_r+0x4c>
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	d9fa      	bls.n	80068e2 <_free_r+0x42>
 80068ec:	6811      	ldr	r1, [r2, #0]
 80068ee:	1850      	adds	r0, r2, r1
 80068f0:	42a0      	cmp	r0, r4
 80068f2:	d10b      	bne.n	800690c <_free_r+0x6c>
 80068f4:	6820      	ldr	r0, [r4, #0]
 80068f6:	4401      	add	r1, r0
 80068f8:	1850      	adds	r0, r2, r1
 80068fa:	4283      	cmp	r3, r0
 80068fc:	6011      	str	r1, [r2, #0]
 80068fe:	d1e0      	bne.n	80068c2 <_free_r+0x22>
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	4408      	add	r0, r1
 8006906:	6010      	str	r0, [r2, #0]
 8006908:	6053      	str	r3, [r2, #4]
 800690a:	e7da      	b.n	80068c2 <_free_r+0x22>
 800690c:	d902      	bls.n	8006914 <_free_r+0x74>
 800690e:	230c      	movs	r3, #12
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	e7d6      	b.n	80068c2 <_free_r+0x22>
 8006914:	6820      	ldr	r0, [r4, #0]
 8006916:	1821      	adds	r1, r4, r0
 8006918:	428b      	cmp	r3, r1
 800691a:	bf01      	itttt	eq
 800691c:	6819      	ldreq	r1, [r3, #0]
 800691e:	685b      	ldreq	r3, [r3, #4]
 8006920:	1809      	addeq	r1, r1, r0
 8006922:	6021      	streq	r1, [r4, #0]
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	6054      	str	r4, [r2, #4]
 8006928:	e7cb      	b.n	80068c2 <_free_r+0x22>
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	20000310 	.word	0x20000310

08006930 <__ssputs_r>:
 8006930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006934:	461f      	mov	r7, r3
 8006936:	688e      	ldr	r6, [r1, #8]
 8006938:	4682      	mov	sl, r0
 800693a:	42be      	cmp	r6, r7
 800693c:	460c      	mov	r4, r1
 800693e:	4690      	mov	r8, r2
 8006940:	680b      	ldr	r3, [r1, #0]
 8006942:	d82c      	bhi.n	800699e <__ssputs_r+0x6e>
 8006944:	898a      	ldrh	r2, [r1, #12]
 8006946:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800694a:	d026      	beq.n	800699a <__ssputs_r+0x6a>
 800694c:	6965      	ldr	r5, [r4, #20]
 800694e:	6909      	ldr	r1, [r1, #16]
 8006950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006954:	eba3 0901 	sub.w	r9, r3, r1
 8006958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800695c:	1c7b      	adds	r3, r7, #1
 800695e:	444b      	add	r3, r9
 8006960:	106d      	asrs	r5, r5, #1
 8006962:	429d      	cmp	r5, r3
 8006964:	bf38      	it	cc
 8006966:	461d      	movcc	r5, r3
 8006968:	0553      	lsls	r3, r2, #21
 800696a:	d527      	bpl.n	80069bc <__ssputs_r+0x8c>
 800696c:	4629      	mov	r1, r5
 800696e:	f7ff fe8f 	bl	8006690 <_malloc_r>
 8006972:	4606      	mov	r6, r0
 8006974:	b360      	cbz	r0, 80069d0 <__ssputs_r+0xa0>
 8006976:	464a      	mov	r2, r9
 8006978:	6921      	ldr	r1, [r4, #16]
 800697a:	f000 faed 	bl	8006f58 <memcpy>
 800697e:	89a3      	ldrh	r3, [r4, #12]
 8006980:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006988:	81a3      	strh	r3, [r4, #12]
 800698a:	6126      	str	r6, [r4, #16]
 800698c:	444e      	add	r6, r9
 800698e:	6026      	str	r6, [r4, #0]
 8006990:	463e      	mov	r6, r7
 8006992:	6165      	str	r5, [r4, #20]
 8006994:	eba5 0509 	sub.w	r5, r5, r9
 8006998:	60a5      	str	r5, [r4, #8]
 800699a:	42be      	cmp	r6, r7
 800699c:	d900      	bls.n	80069a0 <__ssputs_r+0x70>
 800699e:	463e      	mov	r6, r7
 80069a0:	4632      	mov	r2, r6
 80069a2:	4641      	mov	r1, r8
 80069a4:	6820      	ldr	r0, [r4, #0]
 80069a6:	f000 faaf 	bl	8006f08 <memmove>
 80069aa:	2000      	movs	r0, #0
 80069ac:	68a3      	ldr	r3, [r4, #8]
 80069ae:	1b9b      	subs	r3, r3, r6
 80069b0:	60a3      	str	r3, [r4, #8]
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	4433      	add	r3, r6
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069bc:	462a      	mov	r2, r5
 80069be:	f000 fad9 	bl	8006f74 <_realloc_r>
 80069c2:	4606      	mov	r6, r0
 80069c4:	2800      	cmp	r0, #0
 80069c6:	d1e0      	bne.n	800698a <__ssputs_r+0x5a>
 80069c8:	4650      	mov	r0, sl
 80069ca:	6921      	ldr	r1, [r4, #16]
 80069cc:	f7ff ff68 	bl	80068a0 <_free_r>
 80069d0:	230c      	movs	r3, #12
 80069d2:	f8ca 3000 	str.w	r3, [sl]
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069e0:	81a3      	strh	r3, [r4, #12]
 80069e2:	e7e9      	b.n	80069b8 <__ssputs_r+0x88>

080069e4 <_svfiprintf_r>:
 80069e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	4698      	mov	r8, r3
 80069ea:	898b      	ldrh	r3, [r1, #12]
 80069ec:	4607      	mov	r7, r0
 80069ee:	061b      	lsls	r3, r3, #24
 80069f0:	460d      	mov	r5, r1
 80069f2:	4614      	mov	r4, r2
 80069f4:	b09d      	sub	sp, #116	; 0x74
 80069f6:	d50e      	bpl.n	8006a16 <_svfiprintf_r+0x32>
 80069f8:	690b      	ldr	r3, [r1, #16]
 80069fa:	b963      	cbnz	r3, 8006a16 <_svfiprintf_r+0x32>
 80069fc:	2140      	movs	r1, #64	; 0x40
 80069fe:	f7ff fe47 	bl	8006690 <_malloc_r>
 8006a02:	6028      	str	r0, [r5, #0]
 8006a04:	6128      	str	r0, [r5, #16]
 8006a06:	b920      	cbnz	r0, 8006a12 <_svfiprintf_r+0x2e>
 8006a08:	230c      	movs	r3, #12
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	e0d0      	b.n	8006bb4 <_svfiprintf_r+0x1d0>
 8006a12:	2340      	movs	r3, #64	; 0x40
 8006a14:	616b      	str	r3, [r5, #20]
 8006a16:	2300      	movs	r3, #0
 8006a18:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1a:	2320      	movs	r3, #32
 8006a1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a20:	2330      	movs	r3, #48	; 0x30
 8006a22:	f04f 0901 	mov.w	r9, #1
 8006a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a2a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006bcc <_svfiprintf_r+0x1e8>
 8006a2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a32:	4623      	mov	r3, r4
 8006a34:	469a      	mov	sl, r3
 8006a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a3a:	b10a      	cbz	r2, 8006a40 <_svfiprintf_r+0x5c>
 8006a3c:	2a25      	cmp	r2, #37	; 0x25
 8006a3e:	d1f9      	bne.n	8006a34 <_svfiprintf_r+0x50>
 8006a40:	ebba 0b04 	subs.w	fp, sl, r4
 8006a44:	d00b      	beq.n	8006a5e <_svfiprintf_r+0x7a>
 8006a46:	465b      	mov	r3, fp
 8006a48:	4622      	mov	r2, r4
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	f7ff ff6f 	bl	8006930 <__ssputs_r>
 8006a52:	3001      	adds	r0, #1
 8006a54:	f000 80a9 	beq.w	8006baa <_svfiprintf_r+0x1c6>
 8006a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a5a:	445a      	add	r2, fp
 8006a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 80a1 	beq.w	8006baa <_svfiprintf_r+0x1c6>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a72:	f10a 0a01 	add.w	sl, sl, #1
 8006a76:	9304      	str	r3, [sp, #16]
 8006a78:	9307      	str	r3, [sp, #28]
 8006a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a7e:	931a      	str	r3, [sp, #104]	; 0x68
 8006a80:	4654      	mov	r4, sl
 8006a82:	2205      	movs	r2, #5
 8006a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a88:	4850      	ldr	r0, [pc, #320]	; (8006bcc <_svfiprintf_r+0x1e8>)
 8006a8a:	f000 fa57 	bl	8006f3c <memchr>
 8006a8e:	9a04      	ldr	r2, [sp, #16]
 8006a90:	b9d8      	cbnz	r0, 8006aca <_svfiprintf_r+0xe6>
 8006a92:	06d0      	lsls	r0, r2, #27
 8006a94:	bf44      	itt	mi
 8006a96:	2320      	movmi	r3, #32
 8006a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a9c:	0711      	lsls	r1, r2, #28
 8006a9e:	bf44      	itt	mi
 8006aa0:	232b      	movmi	r3, #43	; 0x2b
 8006aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8006aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8006aac:	d015      	beq.n	8006ada <_svfiprintf_r+0xf6>
 8006aae:	4654      	mov	r4, sl
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	f04f 0c0a 	mov.w	ip, #10
 8006ab6:	9a07      	ldr	r2, [sp, #28]
 8006ab8:	4621      	mov	r1, r4
 8006aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006abe:	3b30      	subs	r3, #48	; 0x30
 8006ac0:	2b09      	cmp	r3, #9
 8006ac2:	d94d      	bls.n	8006b60 <_svfiprintf_r+0x17c>
 8006ac4:	b1b0      	cbz	r0, 8006af4 <_svfiprintf_r+0x110>
 8006ac6:	9207      	str	r2, [sp, #28]
 8006ac8:	e014      	b.n	8006af4 <_svfiprintf_r+0x110>
 8006aca:	eba0 0308 	sub.w	r3, r0, r8
 8006ace:	fa09 f303 	lsl.w	r3, r9, r3
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	46a2      	mov	sl, r4
 8006ad6:	9304      	str	r3, [sp, #16]
 8006ad8:	e7d2      	b.n	8006a80 <_svfiprintf_r+0x9c>
 8006ada:	9b03      	ldr	r3, [sp, #12]
 8006adc:	1d19      	adds	r1, r3, #4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	9103      	str	r1, [sp, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	bfbb      	ittet	lt
 8006ae6:	425b      	neglt	r3, r3
 8006ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8006aec:	9307      	strge	r3, [sp, #28]
 8006aee:	9307      	strlt	r3, [sp, #28]
 8006af0:	bfb8      	it	lt
 8006af2:	9204      	strlt	r2, [sp, #16]
 8006af4:	7823      	ldrb	r3, [r4, #0]
 8006af6:	2b2e      	cmp	r3, #46	; 0x2e
 8006af8:	d10c      	bne.n	8006b14 <_svfiprintf_r+0x130>
 8006afa:	7863      	ldrb	r3, [r4, #1]
 8006afc:	2b2a      	cmp	r3, #42	; 0x2a
 8006afe:	d134      	bne.n	8006b6a <_svfiprintf_r+0x186>
 8006b00:	9b03      	ldr	r3, [sp, #12]
 8006b02:	3402      	adds	r4, #2
 8006b04:	1d1a      	adds	r2, r3, #4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	9203      	str	r2, [sp, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bfb8      	it	lt
 8006b0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006bd0 <_svfiprintf_r+0x1ec>
 8006b18:	2203      	movs	r2, #3
 8006b1a:	4650      	mov	r0, sl
 8006b1c:	7821      	ldrb	r1, [r4, #0]
 8006b1e:	f000 fa0d 	bl	8006f3c <memchr>
 8006b22:	b138      	cbz	r0, 8006b34 <_svfiprintf_r+0x150>
 8006b24:	2240      	movs	r2, #64	; 0x40
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	eba0 000a 	sub.w	r0, r0, sl
 8006b2c:	4082      	lsls	r2, r0
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	3401      	adds	r4, #1
 8006b32:	9304      	str	r3, [sp, #16]
 8006b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b38:	2206      	movs	r2, #6
 8006b3a:	4826      	ldr	r0, [pc, #152]	; (8006bd4 <_svfiprintf_r+0x1f0>)
 8006b3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b40:	f000 f9fc 	bl	8006f3c <memchr>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d038      	beq.n	8006bba <_svfiprintf_r+0x1d6>
 8006b48:	4b23      	ldr	r3, [pc, #140]	; (8006bd8 <_svfiprintf_r+0x1f4>)
 8006b4a:	bb1b      	cbnz	r3, 8006b94 <_svfiprintf_r+0x1b0>
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	3307      	adds	r3, #7
 8006b50:	f023 0307 	bic.w	r3, r3, #7
 8006b54:	3308      	adds	r3, #8
 8006b56:	9303      	str	r3, [sp, #12]
 8006b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5a:	4433      	add	r3, r6
 8006b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b5e:	e768      	b.n	8006a32 <_svfiprintf_r+0x4e>
 8006b60:	460c      	mov	r4, r1
 8006b62:	2001      	movs	r0, #1
 8006b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b68:	e7a6      	b.n	8006ab8 <_svfiprintf_r+0xd4>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f04f 0c0a 	mov.w	ip, #10
 8006b70:	4619      	mov	r1, r3
 8006b72:	3401      	adds	r4, #1
 8006b74:	9305      	str	r3, [sp, #20]
 8006b76:	4620      	mov	r0, r4
 8006b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b7c:	3a30      	subs	r2, #48	; 0x30
 8006b7e:	2a09      	cmp	r2, #9
 8006b80:	d903      	bls.n	8006b8a <_svfiprintf_r+0x1a6>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0c6      	beq.n	8006b14 <_svfiprintf_r+0x130>
 8006b86:	9105      	str	r1, [sp, #20]
 8006b88:	e7c4      	b.n	8006b14 <_svfiprintf_r+0x130>
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b92:	e7f0      	b.n	8006b76 <_svfiprintf_r+0x192>
 8006b94:	ab03      	add	r3, sp, #12
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	462a      	mov	r2, r5
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <_svfiprintf_r+0x1f8>)
 8006b9e:	a904      	add	r1, sp, #16
 8006ba0:	f3af 8000 	nop.w
 8006ba4:	1c42      	adds	r2, r0, #1
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	d1d6      	bne.n	8006b58 <_svfiprintf_r+0x174>
 8006baa:	89ab      	ldrh	r3, [r5, #12]
 8006bac:	065b      	lsls	r3, r3, #25
 8006bae:	f53f af2d 	bmi.w	8006a0c <_svfiprintf_r+0x28>
 8006bb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bb4:	b01d      	add	sp, #116	; 0x74
 8006bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bba:	ab03      	add	r3, sp, #12
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	462a      	mov	r2, r5
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <_svfiprintf_r+0x1f8>)
 8006bc4:	a904      	add	r1, sp, #16
 8006bc6:	f000 f87d 	bl	8006cc4 <_printf_i>
 8006bca:	e7eb      	b.n	8006ba4 <_svfiprintf_r+0x1c0>
 8006bcc:	080071d2 	.word	0x080071d2
 8006bd0:	080071d8 	.word	0x080071d8
 8006bd4:	080071dc 	.word	0x080071dc
 8006bd8:	00000000 	.word	0x00000000
 8006bdc:	08006931 	.word	0x08006931

08006be0 <_printf_common>:
 8006be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be4:	4616      	mov	r6, r2
 8006be6:	4699      	mov	r9, r3
 8006be8:	688a      	ldr	r2, [r1, #8]
 8006bea:	690b      	ldr	r3, [r1, #16]
 8006bec:	4607      	mov	r7, r0
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	bfb8      	it	lt
 8006bf2:	4613      	movlt	r3, r2
 8006bf4:	6033      	str	r3, [r6, #0]
 8006bf6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c00:	b10a      	cbz	r2, 8006c06 <_printf_common+0x26>
 8006c02:	3301      	adds	r3, #1
 8006c04:	6033      	str	r3, [r6, #0]
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	0699      	lsls	r1, r3, #26
 8006c0a:	bf42      	ittt	mi
 8006c0c:	6833      	ldrmi	r3, [r6, #0]
 8006c0e:	3302      	addmi	r3, #2
 8006c10:	6033      	strmi	r3, [r6, #0]
 8006c12:	6825      	ldr	r5, [r4, #0]
 8006c14:	f015 0506 	ands.w	r5, r5, #6
 8006c18:	d106      	bne.n	8006c28 <_printf_common+0x48>
 8006c1a:	f104 0a19 	add.w	sl, r4, #25
 8006c1e:	68e3      	ldr	r3, [r4, #12]
 8006c20:	6832      	ldr	r2, [r6, #0]
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	42ab      	cmp	r3, r5
 8006c26:	dc2b      	bgt.n	8006c80 <_printf_common+0xa0>
 8006c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c2c:	1e13      	subs	r3, r2, #0
 8006c2e:	6822      	ldr	r2, [r4, #0]
 8006c30:	bf18      	it	ne
 8006c32:	2301      	movne	r3, #1
 8006c34:	0692      	lsls	r2, r2, #26
 8006c36:	d430      	bmi.n	8006c9a <_printf_common+0xba>
 8006c38:	4649      	mov	r1, r9
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c40:	47c0      	blx	r8
 8006c42:	3001      	adds	r0, #1
 8006c44:	d023      	beq.n	8006c8e <_printf_common+0xae>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	6922      	ldr	r2, [r4, #16]
 8006c4a:	f003 0306 	and.w	r3, r3, #6
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	bf14      	ite	ne
 8006c52:	2500      	movne	r5, #0
 8006c54:	6833      	ldreq	r3, [r6, #0]
 8006c56:	f04f 0600 	mov.w	r6, #0
 8006c5a:	bf08      	it	eq
 8006c5c:	68e5      	ldreq	r5, [r4, #12]
 8006c5e:	f104 041a 	add.w	r4, r4, #26
 8006c62:	bf08      	it	eq
 8006c64:	1aed      	subeq	r5, r5, r3
 8006c66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006c6a:	bf08      	it	eq
 8006c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c70:	4293      	cmp	r3, r2
 8006c72:	bfc4      	itt	gt
 8006c74:	1a9b      	subgt	r3, r3, r2
 8006c76:	18ed      	addgt	r5, r5, r3
 8006c78:	42b5      	cmp	r5, r6
 8006c7a:	d11a      	bne.n	8006cb2 <_printf_common+0xd2>
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	e008      	b.n	8006c92 <_printf_common+0xb2>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4652      	mov	r2, sl
 8006c84:	4649      	mov	r1, r9
 8006c86:	4638      	mov	r0, r7
 8006c88:	47c0      	blx	r8
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d103      	bne.n	8006c96 <_printf_common+0xb6>
 8006c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c96:	3501      	adds	r5, #1
 8006c98:	e7c1      	b.n	8006c1e <_printf_common+0x3e>
 8006c9a:	2030      	movs	r0, #48	; 0x30
 8006c9c:	18e1      	adds	r1, r4, r3
 8006c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ca8:	4422      	add	r2, r4
 8006caa:	3302      	adds	r3, #2
 8006cac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cb0:	e7c2      	b.n	8006c38 <_printf_common+0x58>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	4638      	mov	r0, r7
 8006cba:	47c0      	blx	r8
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d0e6      	beq.n	8006c8e <_printf_common+0xae>
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	e7d9      	b.n	8006c78 <_printf_common+0x98>

08006cc4 <_printf_i>:
 8006cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc8:	7e0f      	ldrb	r7, [r1, #24]
 8006cca:	4691      	mov	r9, r2
 8006ccc:	2f78      	cmp	r7, #120	; 0x78
 8006cce:	4680      	mov	r8, r0
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	469a      	mov	sl, r3
 8006cd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cda:	d807      	bhi.n	8006cec <_printf_i+0x28>
 8006cdc:	2f62      	cmp	r7, #98	; 0x62
 8006cde:	d80a      	bhi.n	8006cf6 <_printf_i+0x32>
 8006ce0:	2f00      	cmp	r7, #0
 8006ce2:	f000 80d5 	beq.w	8006e90 <_printf_i+0x1cc>
 8006ce6:	2f58      	cmp	r7, #88	; 0x58
 8006ce8:	f000 80c1 	beq.w	8006e6e <_printf_i+0x1aa>
 8006cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cf4:	e03a      	b.n	8006d6c <_printf_i+0xa8>
 8006cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cfa:	2b15      	cmp	r3, #21
 8006cfc:	d8f6      	bhi.n	8006cec <_printf_i+0x28>
 8006cfe:	a101      	add	r1, pc, #4	; (adr r1, 8006d04 <_printf_i+0x40>)
 8006d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d04:	08006d5d 	.word	0x08006d5d
 8006d08:	08006d71 	.word	0x08006d71
 8006d0c:	08006ced 	.word	0x08006ced
 8006d10:	08006ced 	.word	0x08006ced
 8006d14:	08006ced 	.word	0x08006ced
 8006d18:	08006ced 	.word	0x08006ced
 8006d1c:	08006d71 	.word	0x08006d71
 8006d20:	08006ced 	.word	0x08006ced
 8006d24:	08006ced 	.word	0x08006ced
 8006d28:	08006ced 	.word	0x08006ced
 8006d2c:	08006ced 	.word	0x08006ced
 8006d30:	08006e77 	.word	0x08006e77
 8006d34:	08006d9d 	.word	0x08006d9d
 8006d38:	08006e31 	.word	0x08006e31
 8006d3c:	08006ced 	.word	0x08006ced
 8006d40:	08006ced 	.word	0x08006ced
 8006d44:	08006e99 	.word	0x08006e99
 8006d48:	08006ced 	.word	0x08006ced
 8006d4c:	08006d9d 	.word	0x08006d9d
 8006d50:	08006ced 	.word	0x08006ced
 8006d54:	08006ced 	.word	0x08006ced
 8006d58:	08006e39 	.word	0x08006e39
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	1d1a      	adds	r2, r3, #4
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	602a      	str	r2, [r5, #0]
 8006d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0a0      	b.n	8006eb2 <_printf_i+0x1ee>
 8006d70:	6820      	ldr	r0, [r4, #0]
 8006d72:	682b      	ldr	r3, [r5, #0]
 8006d74:	0607      	lsls	r7, r0, #24
 8006d76:	f103 0104 	add.w	r1, r3, #4
 8006d7a:	6029      	str	r1, [r5, #0]
 8006d7c:	d501      	bpl.n	8006d82 <_printf_i+0xbe>
 8006d7e:	681e      	ldr	r6, [r3, #0]
 8006d80:	e003      	b.n	8006d8a <_printf_i+0xc6>
 8006d82:	0646      	lsls	r6, r0, #25
 8006d84:	d5fb      	bpl.n	8006d7e <_printf_i+0xba>
 8006d86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006d8a:	2e00      	cmp	r6, #0
 8006d8c:	da03      	bge.n	8006d96 <_printf_i+0xd2>
 8006d8e:	232d      	movs	r3, #45	; 0x2d
 8006d90:	4276      	negs	r6, r6
 8006d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d96:	230a      	movs	r3, #10
 8006d98:	4859      	ldr	r0, [pc, #356]	; (8006f00 <_printf_i+0x23c>)
 8006d9a:	e012      	b.n	8006dc2 <_printf_i+0xfe>
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	6820      	ldr	r0, [r4, #0]
 8006da0:	1d19      	adds	r1, r3, #4
 8006da2:	6029      	str	r1, [r5, #0]
 8006da4:	0605      	lsls	r5, r0, #24
 8006da6:	d501      	bpl.n	8006dac <_printf_i+0xe8>
 8006da8:	681e      	ldr	r6, [r3, #0]
 8006daa:	e002      	b.n	8006db2 <_printf_i+0xee>
 8006dac:	0641      	lsls	r1, r0, #25
 8006dae:	d5fb      	bpl.n	8006da8 <_printf_i+0xe4>
 8006db0:	881e      	ldrh	r6, [r3, #0]
 8006db2:	2f6f      	cmp	r7, #111	; 0x6f
 8006db4:	bf0c      	ite	eq
 8006db6:	2308      	moveq	r3, #8
 8006db8:	230a      	movne	r3, #10
 8006dba:	4851      	ldr	r0, [pc, #324]	; (8006f00 <_printf_i+0x23c>)
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dc2:	6865      	ldr	r5, [r4, #4]
 8006dc4:	2d00      	cmp	r5, #0
 8006dc6:	bfa8      	it	ge
 8006dc8:	6821      	ldrge	r1, [r4, #0]
 8006dca:	60a5      	str	r5, [r4, #8]
 8006dcc:	bfa4      	itt	ge
 8006dce:	f021 0104 	bicge.w	r1, r1, #4
 8006dd2:	6021      	strge	r1, [r4, #0]
 8006dd4:	b90e      	cbnz	r6, 8006dda <_printf_i+0x116>
 8006dd6:	2d00      	cmp	r5, #0
 8006dd8:	d04b      	beq.n	8006e72 <_printf_i+0x1ae>
 8006dda:	4615      	mov	r5, r2
 8006ddc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006de0:	fb03 6711 	mls	r7, r3, r1, r6
 8006de4:	5dc7      	ldrb	r7, [r0, r7]
 8006de6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dea:	4637      	mov	r7, r6
 8006dec:	42bb      	cmp	r3, r7
 8006dee:	460e      	mov	r6, r1
 8006df0:	d9f4      	bls.n	8006ddc <_printf_i+0x118>
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d10b      	bne.n	8006e0e <_printf_i+0x14a>
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	07de      	lsls	r6, r3, #31
 8006dfa:	d508      	bpl.n	8006e0e <_printf_i+0x14a>
 8006dfc:	6923      	ldr	r3, [r4, #16]
 8006dfe:	6861      	ldr	r1, [r4, #4]
 8006e00:	4299      	cmp	r1, r3
 8006e02:	bfde      	ittt	le
 8006e04:	2330      	movle	r3, #48	; 0x30
 8006e06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e0e:	1b52      	subs	r2, r2, r5
 8006e10:	6122      	str	r2, [r4, #16]
 8006e12:	464b      	mov	r3, r9
 8006e14:	4621      	mov	r1, r4
 8006e16:	4640      	mov	r0, r8
 8006e18:	f8cd a000 	str.w	sl, [sp]
 8006e1c:	aa03      	add	r2, sp, #12
 8006e1e:	f7ff fedf 	bl	8006be0 <_printf_common>
 8006e22:	3001      	adds	r0, #1
 8006e24:	d14a      	bne.n	8006ebc <_printf_i+0x1f8>
 8006e26:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2a:	b004      	add	sp, #16
 8006e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	f043 0320 	orr.w	r3, r3, #32
 8006e36:	6023      	str	r3, [r4, #0]
 8006e38:	2778      	movs	r7, #120	; 0x78
 8006e3a:	4832      	ldr	r0, [pc, #200]	; (8006f04 <_printf_i+0x240>)
 8006e3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	6829      	ldr	r1, [r5, #0]
 8006e44:	061f      	lsls	r7, r3, #24
 8006e46:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e4a:	d402      	bmi.n	8006e52 <_printf_i+0x18e>
 8006e4c:	065f      	lsls	r7, r3, #25
 8006e4e:	bf48      	it	mi
 8006e50:	b2b6      	uxthmi	r6, r6
 8006e52:	07df      	lsls	r7, r3, #31
 8006e54:	bf48      	it	mi
 8006e56:	f043 0320 	orrmi.w	r3, r3, #32
 8006e5a:	6029      	str	r1, [r5, #0]
 8006e5c:	bf48      	it	mi
 8006e5e:	6023      	strmi	r3, [r4, #0]
 8006e60:	b91e      	cbnz	r6, 8006e6a <_printf_i+0x1a6>
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	f023 0320 	bic.w	r3, r3, #32
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	2310      	movs	r3, #16
 8006e6c:	e7a6      	b.n	8006dbc <_printf_i+0xf8>
 8006e6e:	4824      	ldr	r0, [pc, #144]	; (8006f00 <_printf_i+0x23c>)
 8006e70:	e7e4      	b.n	8006e3c <_printf_i+0x178>
 8006e72:	4615      	mov	r5, r2
 8006e74:	e7bd      	b.n	8006df2 <_printf_i+0x12e>
 8006e76:	682b      	ldr	r3, [r5, #0]
 8006e78:	6826      	ldr	r6, [r4, #0]
 8006e7a:	1d18      	adds	r0, r3, #4
 8006e7c:	6961      	ldr	r1, [r4, #20]
 8006e7e:	6028      	str	r0, [r5, #0]
 8006e80:	0635      	lsls	r5, r6, #24
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	d501      	bpl.n	8006e8a <_printf_i+0x1c6>
 8006e86:	6019      	str	r1, [r3, #0]
 8006e88:	e002      	b.n	8006e90 <_printf_i+0x1cc>
 8006e8a:	0670      	lsls	r0, r6, #25
 8006e8c:	d5fb      	bpl.n	8006e86 <_printf_i+0x1c2>
 8006e8e:	8019      	strh	r1, [r3, #0]
 8006e90:	2300      	movs	r3, #0
 8006e92:	4615      	mov	r5, r2
 8006e94:	6123      	str	r3, [r4, #16]
 8006e96:	e7bc      	b.n	8006e12 <_printf_i+0x14e>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	1d1a      	adds	r2, r3, #4
 8006e9e:	602a      	str	r2, [r5, #0]
 8006ea0:	681d      	ldr	r5, [r3, #0]
 8006ea2:	6862      	ldr	r2, [r4, #4]
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f000 f849 	bl	8006f3c <memchr>
 8006eaa:	b108      	cbz	r0, 8006eb0 <_printf_i+0x1ec>
 8006eac:	1b40      	subs	r0, r0, r5
 8006eae:	6060      	str	r0, [r4, #4]
 8006eb0:	6863      	ldr	r3, [r4, #4]
 8006eb2:	6123      	str	r3, [r4, #16]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eba:	e7aa      	b.n	8006e12 <_printf_i+0x14e>
 8006ebc:	462a      	mov	r2, r5
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	6923      	ldr	r3, [r4, #16]
 8006ec4:	47d0      	blx	sl
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d0ad      	beq.n	8006e26 <_printf_i+0x162>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	079b      	lsls	r3, r3, #30
 8006ece:	d413      	bmi.n	8006ef8 <_printf_i+0x234>
 8006ed0:	68e0      	ldr	r0, [r4, #12]
 8006ed2:	9b03      	ldr	r3, [sp, #12]
 8006ed4:	4298      	cmp	r0, r3
 8006ed6:	bfb8      	it	lt
 8006ed8:	4618      	movlt	r0, r3
 8006eda:	e7a6      	b.n	8006e2a <_printf_i+0x166>
 8006edc:	2301      	movs	r3, #1
 8006ede:	4632      	mov	r2, r6
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	47d0      	blx	sl
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d09d      	beq.n	8006e26 <_printf_i+0x162>
 8006eea:	3501      	adds	r5, #1
 8006eec:	68e3      	ldr	r3, [r4, #12]
 8006eee:	9903      	ldr	r1, [sp, #12]
 8006ef0:	1a5b      	subs	r3, r3, r1
 8006ef2:	42ab      	cmp	r3, r5
 8006ef4:	dcf2      	bgt.n	8006edc <_printf_i+0x218>
 8006ef6:	e7eb      	b.n	8006ed0 <_printf_i+0x20c>
 8006ef8:	2500      	movs	r5, #0
 8006efa:	f104 0619 	add.w	r6, r4, #25
 8006efe:	e7f5      	b.n	8006eec <_printf_i+0x228>
 8006f00:	080071e3 	.word	0x080071e3
 8006f04:	080071f4 	.word	0x080071f4

08006f08 <memmove>:
 8006f08:	4288      	cmp	r0, r1
 8006f0a:	b510      	push	{r4, lr}
 8006f0c:	eb01 0402 	add.w	r4, r1, r2
 8006f10:	d902      	bls.n	8006f18 <memmove+0x10>
 8006f12:	4284      	cmp	r4, r0
 8006f14:	4623      	mov	r3, r4
 8006f16:	d807      	bhi.n	8006f28 <memmove+0x20>
 8006f18:	1e43      	subs	r3, r0, #1
 8006f1a:	42a1      	cmp	r1, r4
 8006f1c:	d008      	beq.n	8006f30 <memmove+0x28>
 8006f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f26:	e7f8      	b.n	8006f1a <memmove+0x12>
 8006f28:	4601      	mov	r1, r0
 8006f2a:	4402      	add	r2, r0
 8006f2c:	428a      	cmp	r2, r1
 8006f2e:	d100      	bne.n	8006f32 <memmove+0x2a>
 8006f30:	bd10      	pop	{r4, pc}
 8006f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f3a:	e7f7      	b.n	8006f2c <memmove+0x24>

08006f3c <memchr>:
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	b510      	push	{r4, lr}
 8006f40:	b2c9      	uxtb	r1, r1
 8006f42:	4402      	add	r2, r0
 8006f44:	4293      	cmp	r3, r2
 8006f46:	4618      	mov	r0, r3
 8006f48:	d101      	bne.n	8006f4e <memchr+0x12>
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	e003      	b.n	8006f56 <memchr+0x1a>
 8006f4e:	7804      	ldrb	r4, [r0, #0]
 8006f50:	3301      	adds	r3, #1
 8006f52:	428c      	cmp	r4, r1
 8006f54:	d1f6      	bne.n	8006f44 <memchr+0x8>
 8006f56:	bd10      	pop	{r4, pc}

08006f58 <memcpy>:
 8006f58:	440a      	add	r2, r1
 8006f5a:	4291      	cmp	r1, r2
 8006f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f60:	d100      	bne.n	8006f64 <memcpy+0xc>
 8006f62:	4770      	bx	lr
 8006f64:	b510      	push	{r4, lr}
 8006f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f6a:	4291      	cmp	r1, r2
 8006f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f70:	d1f9      	bne.n	8006f66 <memcpy+0xe>
 8006f72:	bd10      	pop	{r4, pc}

08006f74 <_realloc_r>:
 8006f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f78:	4680      	mov	r8, r0
 8006f7a:	4614      	mov	r4, r2
 8006f7c:	460e      	mov	r6, r1
 8006f7e:	b921      	cbnz	r1, 8006f8a <_realloc_r+0x16>
 8006f80:	4611      	mov	r1, r2
 8006f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f86:	f7ff bb83 	b.w	8006690 <_malloc_r>
 8006f8a:	b92a      	cbnz	r2, 8006f98 <_realloc_r+0x24>
 8006f8c:	f7ff fc88 	bl	80068a0 <_free_r>
 8006f90:	4625      	mov	r5, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f98:	f000 f81b 	bl	8006fd2 <_malloc_usable_size_r>
 8006f9c:	4284      	cmp	r4, r0
 8006f9e:	4607      	mov	r7, r0
 8006fa0:	d802      	bhi.n	8006fa8 <_realloc_r+0x34>
 8006fa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fa6:	d812      	bhi.n	8006fce <_realloc_r+0x5a>
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4640      	mov	r0, r8
 8006fac:	f7ff fb70 	bl	8006690 <_malloc_r>
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d0ed      	beq.n	8006f92 <_realloc_r+0x1e>
 8006fb6:	42bc      	cmp	r4, r7
 8006fb8:	4622      	mov	r2, r4
 8006fba:	4631      	mov	r1, r6
 8006fbc:	bf28      	it	cs
 8006fbe:	463a      	movcs	r2, r7
 8006fc0:	f7ff ffca 	bl	8006f58 <memcpy>
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	f7ff fc6a 	bl	80068a0 <_free_r>
 8006fcc:	e7e1      	b.n	8006f92 <_realloc_r+0x1e>
 8006fce:	4635      	mov	r5, r6
 8006fd0:	e7df      	b.n	8006f92 <_realloc_r+0x1e>

08006fd2 <_malloc_usable_size_r>:
 8006fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd6:	1f18      	subs	r0, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bfbc      	itt	lt
 8006fdc:	580b      	ldrlt	r3, [r1, r0]
 8006fde:	18c0      	addlt	r0, r0, r3
 8006fe0:	4770      	bx	lr
	...

08006fe4 <_init>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	bf00      	nop
 8006fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fea:	bc08      	pop	{r3}
 8006fec:	469e      	mov	lr, r3
 8006fee:	4770      	bx	lr

08006ff0 <_fini>:
 8006ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff2:	bf00      	nop
 8006ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff6:	bc08      	pop	{r3}
 8006ff8:	469e      	mov	lr, r3
 8006ffa:	4770      	bx	lr
