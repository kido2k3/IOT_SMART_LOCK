
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003edc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004060  08004060  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004060  08004060  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004060  08004060  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000068  080040d0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  080040d0  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff47  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002818  00000000  00000000  0003001b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00032838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca8  00000000  00000000  00033860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191e1  00000000  00000000  00034508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014efe  00000000  00000000  0004d6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d011  00000000  00000000  000625e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004824  00000000  00000000  000ef5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f3e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fd0 	.word	0x08003fd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003fd0 	.word	0x08003fd0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 ff00 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80f 	bl	8000176 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f916 	bl	8000388 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f874 	bl	8000248 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000160:	f000 f844 	bl	80001ec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f8bc 	bl	80002e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000168:	f000 f8e4 	bl	8000334 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init();
 800016c:	f000 fcce 	bl	8000b0c <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000170:	f000 fcda 	bl	8000b28 <loop>
 8000174:	e7fc      	b.n	8000170 <main+0x24>

08000176 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	b090      	sub	sp, #64	; 0x40
 800017a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017c:	f107 0318 	add.w	r3, r7, #24
 8000180:	2228      	movs	r2, #40	; 0x28
 8000182:	2100      	movs	r1, #0
 8000184:	4618      	mov	r0, r3
 8000186:	f003 fb3d 	bl	8003804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]
 8000196:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000198:	2302      	movs	r3, #2
 800019a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019c:	2301      	movs	r3, #1
 800019e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a0:	2310      	movs	r3, #16
 80001a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001a4:	2300      	movs	r3, #0
 80001a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001a8:	f107 0318 	add.w	r3, r7, #24
 80001ac:	4618      	mov	r0, r3
 80001ae:	f001 fc1b 	bl	80019e8 <HAL_RCC_OscConfig>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001b8:	f000 f976 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001bc:	230f      	movs	r3, #15
 80001be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001c0:	2300      	movs	r3, #0
 80001c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001c8:	2300      	movs	r3, #0
 80001ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2100      	movs	r1, #0
 80001d4:	4618      	mov	r0, r3
 80001d6:	f001 fe89 	bl	8001eec <HAL_RCC_ClockConfig>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d001      	beq.n	80001e4 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001e0:	f000 f962 	bl	80004a8 <Error_Handler>
  }
}
 80001e4:	bf00      	nop
 80001e6:	3740      	adds	r7, #64	; 0x40
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}

080001ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001f0:	4b12      	ldr	r3, [pc, #72]	; (800023c <MX_I2C1_Init+0x50>)
 80001f2:	4a13      	ldr	r2, [pc, #76]	; (8000240 <MX_I2C1_Init+0x54>)
 80001f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001f6:	4b11      	ldr	r3, [pc, #68]	; (800023c <MX_I2C1_Init+0x50>)
 80001f8:	4a12      	ldr	r2, [pc, #72]	; (8000244 <MX_I2C1_Init+0x58>)
 80001fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <MX_I2C1_Init+0x50>)
 80001fe:	2200      	movs	r2, #0
 8000200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <MX_I2C1_Init+0x50>)
 8000204:	2200      	movs	r2, #0
 8000206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <MX_I2C1_Init+0x50>)
 800020a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800020e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <MX_I2C1_Init+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000216:	4b09      	ldr	r3, [pc, #36]	; (800023c <MX_I2C1_Init+0x50>)
 8000218:	2200      	movs	r2, #0
 800021a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <MX_I2C1_Init+0x50>)
 800021e:	2200      	movs	r2, #0
 8000220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000222:	4b06      	ldr	r3, [pc, #24]	; (800023c <MX_I2C1_Init+0x50>)
 8000224:	2200      	movs	r2, #0
 8000226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000228:	4804      	ldr	r0, [pc, #16]	; (800023c <MX_I2C1_Init+0x50>)
 800022a:	f001 fa99 	bl	8001760 <HAL_I2C_Init>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000234:	f000 f938 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000084 	.word	0x20000084
 8000240:	40005400 	.word	0x40005400
 8000244:	000186a0 	.word	0x000186a0

08000248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800024e:	f107 0308 	add.w	r3, r7, #8
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800025c:	463b      	mov	r3, r7
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000264:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <MX_TIM2_Init+0x94>)
 8000266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <MX_TIM2_Init+0x94>)
 800026e:	2207      	movs	r2, #7
 8000270:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000272:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <MX_TIM2_Init+0x94>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_TIM2_Init+0x94>)
 800027a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800027e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <MX_TIM2_Init+0x94>)
 8000282:	2200      	movs	r2, #0
 8000284:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <MX_TIM2_Init+0x94>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800028c:	4813      	ldr	r0, [pc, #76]	; (80002dc <MX_TIM2_Init+0x94>)
 800028e:	f001 ffbb 	bl	8002208 <HAL_TIM_Base_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000298:	f000 f906 	bl	80004a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800029c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002a2:	f107 0308 	add.w	r3, r7, #8
 80002a6:	4619      	mov	r1, r3
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <MX_TIM2_Init+0x94>)
 80002aa:	f002 f957 	bl	800255c <HAL_TIM_ConfigClockSource>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002b4:	f000 f8f8 	bl	80004a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002b8:	2300      	movs	r3, #0
 80002ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002bc:	2300      	movs	r3, #0
 80002be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002c0:	463b      	mov	r3, r7
 80002c2:	4619      	mov	r1, r3
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_TIM2_Init+0x94>)
 80002c6:	f002 fb2d 	bl	8002924 <HAL_TIMEx_MasterConfigSynchronization>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002d0:	f000 f8ea 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200000d8 	.word	0x200000d8

080002e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002e6:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_USART1_UART_Init+0x50>)
 80002e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000306:	220c      	movs	r2, #12
 8000308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000318:	f002 fb74 	bl	8002a04 <HAL_UART_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000322:	f000 f8c1 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000120 	.word	0x20000120
 8000330:	40013800 	.word	0x40013800

08000334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <MX_USART2_UART_Init+0x50>)
 800033c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800036c:	f002 fb4a 	bl	8002a04 <HAL_UART_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000376:	f000 f897 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000168 	.word	0x20000168
 8000384:	40004400 	.word	0x40004400

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b3d      	ldr	r3, [pc, #244]	; (8000494 <MX_GPIO_Init+0x10c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <MX_GPIO_Init+0x10c>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b3a      	ldr	r3, [pc, #232]	; (8000494 <MX_GPIO_Init+0x10c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b37      	ldr	r3, [pc, #220]	; (8000494 <MX_GPIO_Init+0x10c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a36      	ldr	r2, [pc, #216]	; (8000494 <MX_GPIO_Init+0x10c>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b34      	ldr	r3, [pc, #208]	; (8000494 <MX_GPIO_Init+0x10c>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003cc:	4b31      	ldr	r3, [pc, #196]	; (8000494 <MX_GPIO_Init+0x10c>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a30      	ldr	r2, [pc, #192]	; (8000494 <MX_GPIO_Init+0x10c>)
 80003d2:	f043 0308 	orr.w	r3, r3, #8
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <MX_GPIO_Init+0x10c>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0308 	and.w	r3, r3, #8
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ea:	482b      	ldr	r0, [pc, #172]	; (8000498 <MX_GPIO_Init+0x110>)
 80003ec:	f001 f96f 	bl	80016ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80003f0:	2200      	movs	r2, #0
 80003f2:	f640 411b 	movw	r1, #3099	; 0xc1b
 80003f6:	4829      	ldr	r0, [pc, #164]	; (800049c <MX_GPIO_Init+0x114>)
 80003f8:	f001 f969 	bl	80016ce <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000402:	2301      	movs	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040a:	2302      	movs	r3, #2
 800040c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	4619      	mov	r1, r3
 8000414:	4820      	ldr	r0, [pc, #128]	; (8000498 <MX_GPIO_Init+0x110>)
 8000416:	f000 ffbf 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800041a:	2310      	movs	r3, #16
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	481c      	ldr	r0, [pc, #112]	; (80004a0 <MX_GPIO_Init+0x118>)
 800042e:	f000 ffb3 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12;
 8000432:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000438:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <MX_GPIO_Init+0x11c>)
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800043c:	2301      	movs	r3, #1
 800043e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	4816      	ldr	r0, [pc, #88]	; (80004a0 <MX_GPIO_Init+0x118>)
 8000448:	f000 ffa6 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800044c:	f640 431b 	movw	r3, #3099	; 0xc1b
 8000450:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	2301      	movs	r3, #1
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	2302      	movs	r3, #2
 800045c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	4619      	mov	r1, r3
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <MX_GPIO_Init+0x114>)
 8000466:	f000 ff97 	bl	8001398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	2017      	movs	r0, #23
 8000470:	f000 fea9 	bl	80011c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000474:	2017      	movs	r0, #23
 8000476:	f000 fec2 	bl	80011fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	2028      	movs	r0, #40	; 0x28
 8000480:	f000 fea1 	bl	80011c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000484:	2028      	movs	r0, #40	; 0x28
 8000486:	f000 feba 	bl	80011fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800048a:	bf00      	nop
 800048c:	3720      	adds	r7, #32
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	40011000 	.word	0x40011000
 800049c:	40010c00 	.word	0x40010c00
 80004a0:	40010800 	.word	0x40010800
 80004a4:	10210000 	.word	0x10210000

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <Error_Handler+0x8>
	...

080004b4 <keypad_scan>:
GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
uint8_t keyPressed = UNPRESSED;

static void keypad_scan(uint16_t GPIO_Pin) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 80004be:	f000 fda1 	bl	8001004 <HAL_GetTick>
 80004c2:	4603      	mov	r3, r0
 80004c4:	4aa1      	ldr	r2, [pc, #644]	; (800074c <keypad_scan+0x298>)
 80004c6:	6013      	str	r3, [r2, #0]
	if (currentMillis - previousMillis > 1000) {
 80004c8:	4ba0      	ldr	r3, [pc, #640]	; (800074c <keypad_scan+0x298>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4ba0      	ldr	r3, [pc, #640]	; (8000750 <keypad_scan+0x29c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004d6:	f240 8174 	bls.w	80007c2 <keypad_scan+0x30e>
		/*Configure GPIO pins :  to GPIO_INPUT*/
		GPIO_InitStructPrivate.Pin = KEYPAD_R1_PIN | KEYPAD_R2_PIN
 80004da:	4b9e      	ldr	r3, [pc, #632]	; (8000754 <keypad_scan+0x2a0>)
 80004dc:	f44f 5287 	mov.w	r2, #4320	; 0x10e0
 80004e0:	601a      	str	r2, [r3, #0]
				| KEYPAD_R3_PIN | KEYPAD_R4_PIN;
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80004e2:	4b9c      	ldr	r3, [pc, #624]	; (8000754 <keypad_scan+0x2a0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80004e8:	4b9a      	ldr	r3, [pc, #616]	; (8000754 <keypad_scan+0x2a0>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	4b99      	ldr	r3, [pc, #612]	; (8000754 <keypad_scan+0x2a0>)
 80004f0:	2202      	movs	r2, #2
 80004f2:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(KEYPAD_R_PORT, &GPIO_InitStructPrivate);
 80004f4:	4997      	ldr	r1, [pc, #604]	; (8000754 <keypad_scan+0x2a0>)
 80004f6:	4898      	ldr	r0, [pc, #608]	; (8000758 <keypad_scan+0x2a4>)
 80004f8:	f000 ff4e 	bl	8001398 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C4_PIN, 0);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2110      	movs	r1, #16
 8000500:	4896      	ldr	r0, [pc, #600]	; (800075c <keypad_scan+0x2a8>)
 8000502:	f001 f8e4 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C3_PIN, 1);
 8000506:	2201      	movs	r2, #1
 8000508:	2108      	movs	r1, #8
 800050a:	4894      	ldr	r0, [pc, #592]	; (800075c <keypad_scan+0x2a8>)
 800050c:	f001 f8df 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C2_PIN, 1);
 8000510:	2201      	movs	r2, #1
 8000512:	2102      	movs	r1, #2
 8000514:	4891      	ldr	r0, [pc, #580]	; (800075c <keypad_scan+0x2a8>)
 8000516:	f001 f8da 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C1_PIN, 1);
 800051a:	2201      	movs	r2, #1
 800051c:	2101      	movs	r1, #1
 800051e:	488f      	ldr	r0, [pc, #572]	; (800075c <keypad_scan+0x2a8>)
 8000520:	f001 f8d5 	bl	80016ce <HAL_GPIO_WritePin>
		if (GPIO_Pin == KEYPAD_R4_PIN
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800052a:	d10b      	bne.n	8000544 <keypad_scan+0x90>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R4_PIN)) {
 800052c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000530:	4889      	ldr	r0, [pc, #548]	; (8000758 <keypad_scan+0x2a4>)
 8000532:	f001 f8b5 	bl	80016a0 <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d103      	bne.n	8000544 <keypad_scan+0x90>
			keyPressed = 15; //ASCII value of D
 800053c:	4b88      	ldr	r3, [pc, #544]	; (8000760 <keypad_scan+0x2ac>)
 800053e:	220f      	movs	r2, #15
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	e028      	b.n	8000596 <keypad_scan+0xe2>
		} else if (GPIO_Pin == KEYPAD_R3_PIN
 8000544:	88fb      	ldrh	r3, [r7, #6]
 8000546:	2b80      	cmp	r3, #128	; 0x80
 8000548:	d10a      	bne.n	8000560 <keypad_scan+0xac>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R3_PIN)) {
 800054a:	2180      	movs	r1, #128	; 0x80
 800054c:	4882      	ldr	r0, [pc, #520]	; (8000758 <keypad_scan+0x2a4>)
 800054e:	f001 f8a7 	bl	80016a0 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d103      	bne.n	8000560 <keypad_scan+0xac>
			keyPressed = 11; //ASCII value of C
 8000558:	4b81      	ldr	r3, [pc, #516]	; (8000760 <keypad_scan+0x2ac>)
 800055a:	220b      	movs	r2, #11
 800055c:	701a      	strb	r2, [r3, #0]
 800055e:	e01a      	b.n	8000596 <keypad_scan+0xe2>
		} else if (GPIO_Pin == KEYPAD_R2_PIN
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	2b40      	cmp	r3, #64	; 0x40
 8000564:	d10a      	bne.n	800057c <keypad_scan+0xc8>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R2_PIN)) {
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	487b      	ldr	r0, [pc, #492]	; (8000758 <keypad_scan+0x2a4>)
 800056a:	f001 f899 	bl	80016a0 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d103      	bne.n	800057c <keypad_scan+0xc8>
			keyPressed = 7; //ASCII value of B
 8000574:	4b7a      	ldr	r3, [pc, #488]	; (8000760 <keypad_scan+0x2ac>)
 8000576:	2207      	movs	r2, #7
 8000578:	701a      	strb	r2, [r3, #0]
 800057a:	e00c      	b.n	8000596 <keypad_scan+0xe2>
		} else if (GPIO_Pin == KEYPAD_R1_PIN
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	2b20      	cmp	r3, #32
 8000580:	d109      	bne.n	8000596 <keypad_scan+0xe2>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R1_PIN)) {
 8000582:	2120      	movs	r1, #32
 8000584:	4874      	ldr	r0, [pc, #464]	; (8000758 <keypad_scan+0x2a4>)
 8000586:	f001 f88b 	bl	80016a0 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d102      	bne.n	8000596 <keypad_scan+0xe2>
			keyPressed = 3; //ASCII value of A
 8000590:	4b73      	ldr	r3, [pc, #460]	; (8000760 <keypad_scan+0x2ac>)
 8000592:	2203      	movs	r2, #3
 8000594:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C4_PIN, 1);
 8000596:	2201      	movs	r2, #1
 8000598:	2110      	movs	r1, #16
 800059a:	4870      	ldr	r0, [pc, #448]	; (800075c <keypad_scan+0x2a8>)
 800059c:	f001 f897 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C3_PIN, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2108      	movs	r1, #8
 80005a4:	486d      	ldr	r0, [pc, #436]	; (800075c <keypad_scan+0x2a8>)
 80005a6:	f001 f892 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C2_PIN, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2102      	movs	r1, #2
 80005ae:	486b      	ldr	r0, [pc, #428]	; (800075c <keypad_scan+0x2a8>)
 80005b0:	f001 f88d 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C1_PIN, 1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2101      	movs	r1, #1
 80005b8:	4868      	ldr	r0, [pc, #416]	; (800075c <keypad_scan+0x2a8>)
 80005ba:	f001 f888 	bl	80016ce <HAL_GPIO_WritePin>
		if (GPIO_Pin == KEYPAD_R4_PIN
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005c4:	d10b      	bne.n	80005de <keypad_scan+0x12a>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R4_PIN)) {
 80005c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ca:	4863      	ldr	r0, [pc, #396]	; (8000758 <keypad_scan+0x2a4>)
 80005cc:	f001 f868 	bl	80016a0 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d103      	bne.n	80005de <keypad_scan+0x12a>
			keyPressed = 14; //ASCII value of #
 80005d6:	4b62      	ldr	r3, [pc, #392]	; (8000760 <keypad_scan+0x2ac>)
 80005d8:	220e      	movs	r2, #14
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e028      	b.n	8000630 <keypad_scan+0x17c>
		} else if (GPIO_Pin == KEYPAD_R3_PIN
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	2b80      	cmp	r3, #128	; 0x80
 80005e2:	d10a      	bne.n	80005fa <keypad_scan+0x146>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R3_PIN)) {
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	485c      	ldr	r0, [pc, #368]	; (8000758 <keypad_scan+0x2a4>)
 80005e8:	f001 f85a 	bl	80016a0 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d103      	bne.n	80005fa <keypad_scan+0x146>
			keyPressed = 10; //ASCII value of 9
 80005f2:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <keypad_scan+0x2ac>)
 80005f4:	220a      	movs	r2, #10
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	e01a      	b.n	8000630 <keypad_scan+0x17c>
		} else if (GPIO_Pin == KEYPAD_R2_PIN
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	2b40      	cmp	r3, #64	; 0x40
 80005fe:	d10a      	bne.n	8000616 <keypad_scan+0x162>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R2_PIN)) {
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	4855      	ldr	r0, [pc, #340]	; (8000758 <keypad_scan+0x2a4>)
 8000604:	f001 f84c 	bl	80016a0 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d103      	bne.n	8000616 <keypad_scan+0x162>
			keyPressed = 6; //ASCII value of 6
 800060e:	4b54      	ldr	r3, [pc, #336]	; (8000760 <keypad_scan+0x2ac>)
 8000610:	2206      	movs	r2, #6
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	e00c      	b.n	8000630 <keypad_scan+0x17c>
		} else if (GPIO_Pin == KEYPAD_R1_PIN
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	2b20      	cmp	r3, #32
 800061a:	d109      	bne.n	8000630 <keypad_scan+0x17c>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R1_PIN)) {
 800061c:	2120      	movs	r1, #32
 800061e:	484e      	ldr	r0, [pc, #312]	; (8000758 <keypad_scan+0x2a4>)
 8000620:	f001 f83e 	bl	80016a0 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d102      	bne.n	8000630 <keypad_scan+0x17c>
			keyPressed = 2; //ASCII value of 3
 800062a:	4b4d      	ldr	r3, [pc, #308]	; (8000760 <keypad_scan+0x2ac>)
 800062c:	2202      	movs	r2, #2
 800062e:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C4_PIN, 1);
 8000630:	2201      	movs	r2, #1
 8000632:	2110      	movs	r1, #16
 8000634:	4849      	ldr	r0, [pc, #292]	; (800075c <keypad_scan+0x2a8>)
 8000636:	f001 f84a 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C3_PIN, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	2108      	movs	r1, #8
 800063e:	4847      	ldr	r0, [pc, #284]	; (800075c <keypad_scan+0x2a8>)
 8000640:	f001 f845 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C2_PIN, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	2102      	movs	r1, #2
 8000648:	4844      	ldr	r0, [pc, #272]	; (800075c <keypad_scan+0x2a8>)
 800064a:	f001 f840 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C1_PIN, 1);
 800064e:	2201      	movs	r2, #1
 8000650:	2101      	movs	r1, #1
 8000652:	4842      	ldr	r0, [pc, #264]	; (800075c <keypad_scan+0x2a8>)
 8000654:	f001 f83b 	bl	80016ce <HAL_GPIO_WritePin>
		if (GPIO_Pin == KEYPAD_R4_PIN
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800065e:	d10b      	bne.n	8000678 <keypad_scan+0x1c4>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R4_PIN)) {
 8000660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000664:	483c      	ldr	r0, [pc, #240]	; (8000758 <keypad_scan+0x2a4>)
 8000666:	f001 f81b 	bl	80016a0 <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d103      	bne.n	8000678 <keypad_scan+0x1c4>
			keyPressed = 13; //ASCII value of 0
 8000670:	4b3b      	ldr	r3, [pc, #236]	; (8000760 <keypad_scan+0x2ac>)
 8000672:	220d      	movs	r2, #13
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	e028      	b.n	80006ca <keypad_scan+0x216>
		} else if (GPIO_Pin == KEYPAD_R3_PIN
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	2b80      	cmp	r3, #128	; 0x80
 800067c:	d10a      	bne.n	8000694 <keypad_scan+0x1e0>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R3_PIN)) {
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	4835      	ldr	r0, [pc, #212]	; (8000758 <keypad_scan+0x2a4>)
 8000682:	f001 f80d 	bl	80016a0 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d103      	bne.n	8000694 <keypad_scan+0x1e0>
			keyPressed = 9; //ASCII value of 8
 800068c:	4b34      	ldr	r3, [pc, #208]	; (8000760 <keypad_scan+0x2ac>)
 800068e:	2209      	movs	r2, #9
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	e01a      	b.n	80006ca <keypad_scan+0x216>
		} else if (GPIO_Pin == KEYPAD_R2_PIN
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	2b40      	cmp	r3, #64	; 0x40
 8000698:	d10a      	bne.n	80006b0 <keypad_scan+0x1fc>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R2_PIN)) {
 800069a:	2140      	movs	r1, #64	; 0x40
 800069c:	482e      	ldr	r0, [pc, #184]	; (8000758 <keypad_scan+0x2a4>)
 800069e:	f000 ffff 	bl	80016a0 <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d103      	bne.n	80006b0 <keypad_scan+0x1fc>
			keyPressed = 5; //ASCII value of 5
 80006a8:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <keypad_scan+0x2ac>)
 80006aa:	2205      	movs	r2, #5
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	e00c      	b.n	80006ca <keypad_scan+0x216>
		} else if (GPIO_Pin == KEYPAD_R1_PIN
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	2b20      	cmp	r3, #32
 80006b4:	d109      	bne.n	80006ca <keypad_scan+0x216>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R1_PIN)) {
 80006b6:	2120      	movs	r1, #32
 80006b8:	4827      	ldr	r0, [pc, #156]	; (8000758 <keypad_scan+0x2a4>)
 80006ba:	f000 fff1 	bl	80016a0 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d102      	bne.n	80006ca <keypad_scan+0x216>
			keyPressed = 1; //ASCII value of 2
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <keypad_scan+0x2ac>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C4_PIN, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2110      	movs	r1, #16
 80006ce:	4823      	ldr	r0, [pc, #140]	; (800075c <keypad_scan+0x2a8>)
 80006d0:	f000 fffd 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C3_PIN, 1);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2108      	movs	r1, #8
 80006d8:	4820      	ldr	r0, [pc, #128]	; (800075c <keypad_scan+0x2a8>)
 80006da:	f000 fff8 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C2_PIN, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	2102      	movs	r1, #2
 80006e2:	481e      	ldr	r0, [pc, #120]	; (800075c <keypad_scan+0x2a8>)
 80006e4:	f000 fff3 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C1_PIN, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2101      	movs	r1, #1
 80006ec:	481b      	ldr	r0, [pc, #108]	; (800075c <keypad_scan+0x2a8>)
 80006ee:	f000 ffee 	bl	80016ce <HAL_GPIO_WritePin>
		if (GPIO_Pin == KEYPAD_R4_PIN
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006f8:	d10b      	bne.n	8000712 <keypad_scan+0x25e>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R4_PIN)) {
 80006fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fe:	4816      	ldr	r0, [pc, #88]	; (8000758 <keypad_scan+0x2a4>)
 8000700:	f000 ffce 	bl	80016a0 <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d103      	bne.n	8000712 <keypad_scan+0x25e>
			keyPressed = 12; //ASCII value of *
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <keypad_scan+0x2ac>)
 800070c:	220c      	movs	r2, #12
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	e035      	b.n	800077e <keypad_scan+0x2ca>
		} else if (GPIO_Pin == KEYPAD_R3_PIN
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	2b80      	cmp	r3, #128	; 0x80
 8000716:	d10a      	bne.n	800072e <keypad_scan+0x27a>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R3_PIN)) {
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	480f      	ldr	r0, [pc, #60]	; (8000758 <keypad_scan+0x2a4>)
 800071c:	f000 ffc0 	bl	80016a0 <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d103      	bne.n	800072e <keypad_scan+0x27a>
			keyPressed = 8; //ASCII value of 7
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <keypad_scan+0x2ac>)
 8000728:	2208      	movs	r2, #8
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	e027      	b.n	800077e <keypad_scan+0x2ca>
		} else if (GPIO_Pin == KEYPAD_R2_PIN
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	2b40      	cmp	r3, #64	; 0x40
 8000732:	d117      	bne.n	8000764 <keypad_scan+0x2b0>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R2_PIN)) {
 8000734:	2140      	movs	r1, #64	; 0x40
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <keypad_scan+0x2a4>)
 8000738:	f000 ffb2 	bl	80016a0 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d110      	bne.n	8000764 <keypad_scan+0x2b0>
			keyPressed = 4; //ASCII value of 4
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <keypad_scan+0x2ac>)
 8000744:	2204      	movs	r2, #4
 8000746:	701a      	strb	r2, [r3, #0]
 8000748:	e019      	b.n	800077e <keypad_scan+0x2ca>
 800074a:	bf00      	nop
 800074c:	200001c4 	.word	0x200001c4
 8000750:	200001c0 	.word	0x200001c0
 8000754:	200001b0 	.word	0x200001b0
 8000758:	40010800 	.word	0x40010800
 800075c:	40010c00 	.word	0x40010c00
 8000760:	20000000 	.word	0x20000000
		} else if (GPIO_Pin == KEYPAD_R1_PIN
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	2b20      	cmp	r3, #32
 8000768:	d109      	bne.n	800077e <keypad_scan+0x2ca>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R1_PIN)) {
 800076a:	2120      	movs	r1, #32
 800076c:	4817      	ldr	r0, [pc, #92]	; (80007cc <keypad_scan+0x318>)
 800076e:	f000 ff97 	bl	80016a0 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d102      	bne.n	800077e <keypad_scan+0x2ca>
			keyPressed = 0; //ASCII value of 1
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <keypad_scan+0x31c>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C4_PIN, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2110      	movs	r1, #16
 8000782:	4814      	ldr	r0, [pc, #80]	; (80007d4 <keypad_scan+0x320>)
 8000784:	f000 ffa3 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C3_PIN, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2108      	movs	r1, #8
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <keypad_scan+0x320>)
 800078e:	f000 ff9e 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C2_PIN, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2102      	movs	r1, #2
 8000796:	480f      	ldr	r0, [pc, #60]	; (80007d4 <keypad_scan+0x320>)
 8000798:	f000 ff99 	bl	80016ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C1_PIN, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2101      	movs	r1, #1
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <keypad_scan+0x320>)
 80007a2:	f000 ff94 	bl	80016ce <HAL_GPIO_WritePin>
		/*Configure GPIO pins : back to EXTI*/
		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_FALLING;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <keypad_scan+0x324>)
 80007a8:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <keypad_scan+0x328>)
 80007aa:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <keypad_scan+0x324>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(KEYPAD_R_PORT, &GPIO_InitStructPrivate);
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <keypad_scan+0x324>)
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <keypad_scan+0x318>)
 80007b6:	f000 fdef 	bl	8001398 <HAL_GPIO_Init>
		previousMillis = currentMillis;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <keypad_scan+0x32c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <keypad_scan+0x330>)
 80007c0:	6013      	str	r3, [r2, #0]
	}
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40010800 	.word	0x40010800
 80007d0:	20000000 	.word	0x20000000
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	200001b0 	.word	0x200001b0
 80007dc:	10210000 	.word	0x10210000
 80007e0:	200001c4 	.word	0x200001c4
 80007e4:	200001c0 	.word	0x200001c0

080007e8 <keypad_init>:
void keypad_init(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C4_PIN, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2110      	movs	r1, #16
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <keypad_init+0x30>)
 80007f2:	f000 ff6c 	bl	80016ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C3_PIN, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2108      	movs	r1, #8
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <keypad_init+0x30>)
 80007fc:	f000 ff67 	bl	80016ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C2_PIN, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2102      	movs	r1, #2
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <keypad_init+0x30>)
 8000806:	f000 ff62 	bl	80016ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C1_PIN, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	4802      	ldr	r0, [pc, #8]	; (8000818 <keypad_init+0x30>)
 8000810:	f000 ff5d 	bl	80016ce <HAL_GPIO_WritePin>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40010c00 	.word	0x40010c00

0800081c <keypad_ReadFlag>:
uint8_t keypad_ReadFlag(void) {
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
	return keyPressed;
 8000820:	4b02      	ldr	r3, [pc, #8]	; (800082c <keypad_ReadFlag+0x10>)
 8000822:	781b      	ldrb	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000000 	.word	0x20000000

08000830 <keypad_ResetFlag>:
void keypad_ResetFlag(void) {
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	keyPressed = UNPRESSED;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <keypad_ResetFlag+0x14>)
 8000836:	22ff      	movs	r2, #255	; 0xff
 8000838:	701a      	strb	r2, [r3, #0]
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000000 	.word	0x20000000

08000848 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
	keypad_scan(GPIO_Pin);
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fe2d 	bl	80004b4 <keypad_scan>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <lock_open>:
 */

#include "my_lock.h"


void lock_open(void){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LOCK_PORT, LOCK_PIN, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086e:	4802      	ldr	r0, [pc, #8]	; (8000878 <lock_open+0x14>)
 8000870:	f000 ff2d 	bl	80016ce <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40010c00 	.word	0x40010c00

0800087c <lock_close>:

void lock_close(void){
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LOCK_PORT, LOCK_PIN, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000886:	4802      	ldr	r0, [pc, #8]	; (8000890 <lock_close+0x14>)
 8000888:	f000 ff21 	bl	80016ce <HAL_GPIO_WritePin>
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40010c00 	.word	0x40010c00

08000894 <pw_ReturnInput>:
	return 1;
}
uint8_t pw_idxGet(void) {
	return pw_idx;
}
char* pw_ReturnInput(void) {
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
	return password_buf;
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <pw_ReturnInput+0x10>)
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000004 	.word	0x20000004

080008a8 <sch_init>:
    // struct task *bottom;
    // uint32_t time_length;
} stack_task;
//******************START TIMER*********************
extern TIM_HandleTypeDef htim2;
void sch_init(void){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <sch_init+0x14>)
 80008ae:	f001 fcfb 	bl	80022a8 <HAL_TIM_Base_Start_IT>
	keypad_init();
 80008b2:	f7ff ff99 	bl	80007e8 <keypad_init>
	//LCD_Init();
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000d8 	.word	0x200000d8

080008c0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d101      	bne.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0x18>
		sch_update();
 80008d4:	f000 f868 	bl	80009a8 <sch_update>
	}
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200000d8 	.word	0x200000d8

080008e4 <sch_add_task>:
			period - the amount of cycle time to run task
 * @retval:	1 - add successfully
 * 			0 - add badly
 * */
bool sch_add_task(void (*pTask)(), uint16_t delay, uint16_t period)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	807b      	strh	r3, [r7, #2]
 80008f0:	4613      	mov	r3, r2
 80008f2:	803b      	strh	r3, [r7, #0]
    struct task *my_task = (struct task *)malloc(sizeof(struct task));
 80008f4:	200c      	movs	r0, #12
 80008f6:	f002 fea9 	bl	800364c <malloc>
 80008fa:	4603      	mov	r3, r0
 80008fc:	60fb      	str	r3, [r7, #12]
    my_task->pTask = pTask;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	601a      	str	r2, [r3, #0]
    my_task->counter = delay *FREQ_OF_TIM/1000;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	887a      	ldrh	r2, [r7, #2]
 8000908:	809a      	strh	r2, [r3, #4]
    my_task->period = period;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	883a      	ldrh	r2, [r7, #0]
 800090e:	80da      	strh	r2, [r3, #6]
    my_task->next_task = 0;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
    if (stack_task.top == 0)
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <sch_add_task+0xc0>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d104      	bne.n	8000928 <sch_add_task+0x44>
    {
        stack_task.top = my_task;
 800091e:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <sch_add_task+0xc0>)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6013      	str	r3, [r2, #0]
        // stack_task.bottom = stack_task.top;
        // stack_task.time_length = stack_task.top->counter;
        return 1;
 8000924:	2301      	movs	r3, #1
 8000926:	e039      	b.n	800099c <sch_add_task+0xb8>
    //     stack_task.bottom->next_task = my_task;
    //     stack_task.bottom = stack_task.bottom->next_task;
    //     stack_task.time_length += my_task->counter;
    //     return 1;
    // }
    struct task *pre = stack_task.top;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <sch_add_task+0xc0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	617b      	str	r3, [r7, #20]
    struct task *cur = stack_task.top;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <sch_add_task+0xc0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	613b      	str	r3, [r7, #16]
    while (cur && my_task->counter >= cur->counter)
 8000934:	e00c      	b.n	8000950 <sch_add_task+0x6c>
    {
        my_task->counter = my_task->counter - cur->counter;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	889a      	ldrh	r2, [r3, #4]
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	b29a      	uxth	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	809a      	strh	r2, [r3, #4]
        pre = cur;
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	617b      	str	r3, [r7, #20]
        cur = cur->next_task;
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	613b      	str	r3, [r7, #16]
    while (cur && my_task->counter >= cur->counter)
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d005      	beq.n	8000962 <sch_add_task+0x7e>
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	889a      	ldrh	r2, [r3, #4]
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	429a      	cmp	r2, r3
 8000960:	d2e9      	bcs.n	8000936 <sch_add_task+0x52>
    }
    if (pre != cur)
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	429a      	cmp	r2, r3
 8000968:	d006      	beq.n	8000978 <sch_add_task+0x94>
    {
        pre->next_task = my_task;
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	609a      	str	r2, [r3, #8]
        my_task->next_task = cur;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	e005      	b.n	8000984 <sch_add_task+0xa0>
    }
    else
    {
        my_task->next_task = cur;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	609a      	str	r2, [r3, #8]
        stack_task.top = my_task;
 800097e:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <sch_add_task+0xc0>)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	6013      	str	r3, [r2, #0]
    }
    if (cur)
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d007      	beq.n	800099a <sch_add_task+0xb6>
        cur->counter -= my_task->counter;
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	889a      	ldrh	r2, [r3, #4]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	889b      	ldrh	r3, [r3, #4]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	b29a      	uxth	r2, r3
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	809a      	strh	r2, [r3, #4]
    return 1;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200001c8 	.word	0x200001c8

080009a8 <sch_update>:
 * @brief:	decrease the remaining time of the top task
 * @para:	none
 * @retval:	none
 * */
void sch_update(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
    if (stack_task.top == 0)
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <sch_update+0x2c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00b      	beq.n	80009cc <sch_update+0x24>
        return;
    if (stack_task.top->counter > 0)
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <sch_update+0x2c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	889b      	ldrh	r3, [r3, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d007      	beq.n	80009ce <sch_update+0x26>
    {
        stack_task.top->counter--;
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <sch_update+0x2c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	889a      	ldrh	r2, [r3, #4]
 80009c4:	3a01      	subs	r2, #1
 80009c6:	b292      	uxth	r2, r2
 80009c8:	809a      	strh	r2, [r3, #4]
 80009ca:	e000      	b.n	80009ce <sch_update+0x26>
        return;
 80009cc:	bf00      	nop
    }
}
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	200001c8 	.word	0x200001c8

080009d8 <sch_delete_task>:
 * @brief:	delete a task in the stack and release the memory
 * @para:	del_task - the task need to be deleted
 * @retval:	none
 * */
void sch_delete_task(struct task *del_task)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    if (del_task == 0)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <sch_delete_task+0x16>
    {
        return;
    }
    free(del_task);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f002 fe38 	bl	800365c <free>
 80009ec:	e000      	b.n	80009f0 <sch_delete_task+0x18>
        return;
 80009ee:	bf00      	nop
}
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <sch_dispatch>:
 * @para:	none
 * @retval:	1 - run successfully
 *			0 - run badly
 * */
bool sch_dispatch(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
    if (stack_task.top == 0)
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <sch_dispatch+0x68>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d101      	bne.n	8000a0a <sch_dispatch+0x12>
        return 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e026      	b.n	8000a58 <sch_dispatch+0x60>
    if (stack_task.top->counter == 0)
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <sch_dispatch+0x68>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d120      	bne.n	8000a56 <sch_dispatch+0x5e>
    {
        (*stack_task.top->pTask)();
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <sch_dispatch+0x68>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4798      	blx	r3
        struct task *temp = stack_task.top;
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <sch_dispatch+0x68>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	607b      	str	r3, [r7, #4]
        stack_task.top = stack_task.top->next_task;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <sch_dispatch+0x68>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <sch_dispatch+0x68>)
 8000a2a:	6013      	str	r3, [r2, #0]
        temp->next_task = 0;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
        if (temp->period != 0)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	88db      	ldrh	r3, [r3, #6]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d008      	beq.n	8000a4c <sch_dispatch+0x54>
        {
            sch_add_task(temp->pTask, temp->period, temp->period);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	88d9      	ldrh	r1, [r3, #6]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	88db      	ldrh	r3, [r3, #6]
 8000a46:	461a      	mov	r2, r3
 8000a48:	f7ff ff4c 	bl	80008e4 <sch_add_task>
        }
        sch_delete_task(temp);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ffc3 	bl	80009d8 <sch_delete_task>
        return 1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e000      	b.n	8000a58 <sch_dispatch+0x60>
    }
    return 0;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200001c8 	.word	0x200001c8

08000a64 <toggle_led>:
 *      Author: HP
 */

#include"my_system.h"

static void toggle_led(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(DEBUG_LED_PORT, DEBUG_LED_PIN);
 8000a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <toggle_led+0x14>)
 8000a6e:	f000 fe46 	bl	80016fe <HAL_GPIO_TogglePin>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40011000 	.word	0x40011000

08000a7c <test_lcd>:
static void test_lcd(uint8_t key) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]

}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <test_uart>:
static void test_uart(uint8_t key) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
	uart_SendPressedKey(key);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f867 	bl	8000b70 <uart_SendPressedKey>
	uart_SendInPW();
 8000aa2:	f000 f849 	bl	8000b38 <uart_SendInPW>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <test_keypad>:
static void test_keypad(void) {
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
	uint8_t key = keypad_ReadFlag();
 8000ab4:	f7ff feb2 	bl	800081c <keypad_ReadFlag>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	71fb      	strb	r3, [r7, #7]
	if (key != UNPRESSED) {
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2bff      	cmp	r3, #255	; 0xff
 8000ac0:	d00b      	beq.n	8000ada <test_keypad+0x2c>
		toggle_led();
 8000ac2:	f7ff ffcf 	bl	8000a64 <toggle_led>
		test_lcd(key);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ffd7 	bl	8000a7c <test_lcd>
		test_uart(key);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ffdd 	bl	8000a90 <test_uart>
		keypad_ResetFlag();
 8000ad6:	f7ff feab 	bl	8000830 <keypad_ResetFlag>
	}
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <test_lock>:
static void test_lock(void) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	sch_add_task(lock_open, 0, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <test_lock+0x20>)
 8000aee:	f7ff fef9 	bl	80008e4 <sch_add_task>
	sch_add_task(lock_close, 5000, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f241 3188 	movw	r1, #5000	; 0x1388
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <test_lock+0x24>)
 8000afa:	f7ff fef3 	bl	80008e4 <sch_add_task>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	08000865 	.word	0x08000865
 8000b08:	0800087d 	.word	0x0800087d

08000b0c <init>:
void init(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	sch_init();
 8000b10:	f7ff feca 	bl	80008a8 <sch_init>
	//sch_add_task(toggle_led, 0, 1000);
	sch_add_task(test_lock, 0, 7000);
 8000b14:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4802      	ldr	r0, [pc, #8]	; (8000b24 <init+0x18>)
 8000b1c:	f7ff fee2 	bl	80008e4 <sch_add_task>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	08000ae5 	.word	0x08000ae5

08000b28 <loop>:

void loop(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	sch_dispatch();
 8000b2c:	f7ff ff64 	bl	80009f8 <sch_dispatch>
	test_keypad();
 8000b30:	f7ff ffbd 	bl	8000aae <test_keypad>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <uart_SendInPW>:
#include"my_uart.h"

extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;

void uart_SendInPW(void) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
	char str[30];
	uint8_t len = sprintf(str,"#InPW:%s!\n",pw_ReturnInput());
 8000b3e:	f7ff fea9 	bl	8000894 <pw_ReturnInput>
 8000b42:	4602      	mov	r2, r0
 8000b44:	463b      	mov	r3, r7
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <uart_SendInPW+0x30>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fe3b 	bl	80037c4 <siprintf>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	77fb      	strb	r3, [r7, #31]
	HAL_UART_Transmit(&huart2, (void*)str, len, 10);
 8000b52:	7ffb      	ldrb	r3, [r7, #31]
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	4639      	mov	r1, r7
 8000b58:	230a      	movs	r3, #10
 8000b5a:	4804      	ldr	r0, [pc, #16]	; (8000b6c <uart_SendInPW+0x34>)
 8000b5c:	f001 ffa2 	bl	8002aa4 <HAL_UART_Transmit>
}
 8000b60:	bf00      	nop
 8000b62:	3720      	adds	r7, #32
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	08003fe8 	.word	0x08003fe8
 8000b6c:	20000168 	.word	0x20000168

08000b70 <uart_SendPressedKey>:

void uart_SendPressedKey(uint8_t key) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	char str[30];
	uint8_t len = sprintf(str,"#Key:%u!\n",&key);
 8000b7a:	1dfa      	adds	r2, r7, #7
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <uart_SendPressedKey+0x38>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fe1e 	bl	80037c4 <siprintf>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_UART_Transmit(&huart2, (void*)str, len, 10);
 8000b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	f107 0108 	add.w	r1, r7, #8
 8000b98:	230a      	movs	r3, #10
 8000b9a:	4804      	ldr	r0, [pc, #16]	; (8000bac <uart_SendPressedKey+0x3c>)
 8000b9c:	f001 ff82 	bl	8002aa4 <HAL_UART_Transmit>
}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	08003ff4 	.word	0x08003ff4
 8000bac:	20000168 	.word	0x20000168

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6193      	str	r3, [r2, #24]
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	61d3      	str	r3, [r2, #28]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_MspInit+0x60>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_MspInit+0x60>)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010000 	.word	0x40010000

08000c14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <HAL_I2C_MspInit+0x70>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d123      	bne.n	8000c7c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_I2C_MspInit+0x74>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a13      	ldr	r2, [pc, #76]	; (8000c88 <HAL_I2C_MspInit+0x74>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_I2C_MspInit+0x74>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c4c:	23c0      	movs	r3, #192	; 0xc0
 8000c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480b      	ldr	r0, [pc, #44]	; (8000c8c <HAL_I2C_MspInit+0x78>)
 8000c60:	f000 fb9a 	bl	8001398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_I2C_MspInit+0x74>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_I2C_MspInit+0x74>)
 8000c6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c6e:	61d3      	str	r3, [r2, #28]
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_I2C_MspInit+0x74>)
 8000c72:	69db      	ldr	r3, [r3, #28]
 8000c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40005400 	.word	0x40005400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010c00 	.word	0x40010c00

08000c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca0:	d113      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_TIM_Base_MspInit+0x44>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <HAL_TIM_Base_MspInit+0x44>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_TIM_Base_MspInit+0x44>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	201c      	movs	r0, #28
 8000cc0:	f000 fa81 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cc4:	201c      	movs	r0, #28
 8000cc6:	f000 fa9a 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a3b      	ldr	r2, [pc, #236]	; (8000de0 <HAL_UART_MspInit+0x108>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d13a      	bne.n	8000d6e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf8:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <HAL_UART_MspInit+0x10c>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a39      	ldr	r2, [pc, #228]	; (8000de4 <HAL_UART_MspInit+0x10c>)
 8000cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <HAL_UART_MspInit+0x10c>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <HAL_UART_MspInit+0x10c>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a33      	ldr	r2, [pc, #204]	; (8000de4 <HAL_UART_MspInit+0x10c>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <HAL_UART_MspInit+0x10c>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	482a      	ldr	r0, [pc, #168]	; (8000de8 <HAL_UART_MspInit+0x110>)
 8000d3e:	f000 fb2b 	bl	8001398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	4619      	mov	r1, r3
 8000d56:	4824      	ldr	r0, [pc, #144]	; (8000de8 <HAL_UART_MspInit+0x110>)
 8000d58:	f000 fb1e 	bl	8001398 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2025      	movs	r0, #37	; 0x25
 8000d62:	f000 fa30 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d66:	2025      	movs	r0, #37	; 0x25
 8000d68:	f000 fa49 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d6c:	e034      	b.n	8000dd8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <HAL_UART_MspInit+0x114>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d12f      	bne.n	8000dd8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <HAL_UART_MspInit+0x10c>)
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_UART_MspInit+0x10c>)
 8000d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d82:	61d3      	str	r3, [r2, #28]
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_UART_MspInit+0x10c>)
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_UART_MspInit+0x10c>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <HAL_UART_MspInit+0x10c>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_UART_MspInit+0x10c>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000da8:	2304      	movs	r3, #4
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	4619      	mov	r1, r3
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <HAL_UART_MspInit+0x110>)
 8000dbc:	f000 faec 	bl	8001398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_UART_MspInit+0x110>)
 8000dd4:	f000 fae0 	bl	8001398 <HAL_GPIO_Init>
}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40013800 	.word	0x40013800
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010800 	.word	0x40010800
 8000dec:	40004400 	.word	0x40004400

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e36:	f000 f8d3 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e42:	2020      	movs	r0, #32
 8000e44:	f000 fc74 	bl	8001730 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000e48:	2040      	movs	r0, #64	; 0x40
 8000e4a:	f000 fc71 	bl	8001730 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000e4e:	2080      	movs	r0, #128	; 0x80
 8000e50:	f000 fc6e 	bl	8001730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <TIM2_IRQHandler+0x10>)
 8000e5e:	f001 fa75 	bl	800234c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000d8 	.word	0x200000d8

08000e6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <USART1_IRQHandler+0x10>)
 8000e72:	f001 fe9b 	bl	8002bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000120 	.word	0x20000120

08000e80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000e84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e88:	f000 fc52 	bl	8001730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f002 fcb8 	bl	8003834 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20005000 	.word	0x20005000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	200001cc 	.word	0x200001cc
 8000ef8:	20000320 	.word	0x20000320

08000efc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f08:	f7ff fff8 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f0e:	490c      	ldr	r1, [pc, #48]	; (8000f40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f10:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a09      	ldr	r2, [pc, #36]	; (8000f48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f24:	4c09      	ldr	r4, [pc, #36]	; (8000f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f32:	f002 fc85 	bl	8003840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f36:	f7ff f909 	bl	800014c <main>
  bx lr
 8000f3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f44:	08004068 	.word	0x08004068
  ldr r2, =_sbss
 8000f48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f4c:	2000031c 	.word	0x2000031c

08000f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_2_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_Init+0x28>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_Init+0x28>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f923 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f000 f808 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fe1e 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40022000 	.word	0x40022000

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f93b 	bl	800121a <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f903 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000000c 	.word	0x2000000c
 8000fd8:	20000014 	.word	0x20000014
 8000fdc:	20000010 	.word	0x20000010

08000fe0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_IncTick+0x1c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_IncTick+0x20>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a03      	ldr	r2, [pc, #12]	; (8001000 <HAL_IncTick+0x20>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	20000014 	.word	0x20000014
 8001000:	200001d0 	.word	0x200001d0

08001004 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b02      	ldr	r3, [pc, #8]	; (8001014 <HAL_GetTick+0x10>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	200001d0 	.word	0x200001d0

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4906      	ldr	r1, [pc, #24]	; (80010b0 <__NVIC_EnableIRQ+0x34>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff90 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff2d 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff42 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff90 	bl	8001108 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5f 	bl	80010b4 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff35 	bl	800107c <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa2 	bl	800116c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001232:	b480      	push	{r7}
 8001234:	b085      	sub	sp, #20
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d008      	beq.n	800125c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2204      	movs	r2, #4
 800124e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e020      	b.n	800129e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 020e 	bic.w	r2, r2, #14
 800126a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001284:	2101      	movs	r1, #1
 8001286:	fa01 f202 	lsl.w	r2, r1, r2
 800128a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d005      	beq.n	80012cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2204      	movs	r2, #4
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	e051      	b.n	8001370 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 020e 	bic.w	r2, r2, #14
 80012da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a22      	ldr	r2, [pc, #136]	; (800137c <HAL_DMA_Abort_IT+0xd4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d029      	beq.n	800134a <HAL_DMA_Abort_IT+0xa2>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a21      	ldr	r2, [pc, #132]	; (8001380 <HAL_DMA_Abort_IT+0xd8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d022      	beq.n	8001346 <HAL_DMA_Abort_IT+0x9e>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_DMA_Abort_IT+0xdc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01a      	beq.n	8001340 <HAL_DMA_Abort_IT+0x98>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <HAL_DMA_Abort_IT+0xe0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d012      	beq.n	800133a <HAL_DMA_Abort_IT+0x92>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a1c      	ldr	r2, [pc, #112]	; (800138c <HAL_DMA_Abort_IT+0xe4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00a      	beq.n	8001334 <HAL_DMA_Abort_IT+0x8c>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <HAL_DMA_Abort_IT+0xe8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d102      	bne.n	800132e <HAL_DMA_Abort_IT+0x86>
 8001328:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800132c:	e00e      	b.n	800134c <HAL_DMA_Abort_IT+0xa4>
 800132e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001332:	e00b      	b.n	800134c <HAL_DMA_Abort_IT+0xa4>
 8001334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001338:	e008      	b.n	800134c <HAL_DMA_Abort_IT+0xa4>
 800133a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133e:	e005      	b.n	800134c <HAL_DMA_Abort_IT+0xa4>
 8001340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001344:	e002      	b.n	800134c <HAL_DMA_Abort_IT+0xa4>
 8001346:	2310      	movs	r3, #16
 8001348:	e000      	b.n	800134c <HAL_DMA_Abort_IT+0xa4>
 800134a:	2301      	movs	r3, #1
 800134c:	4a11      	ldr	r2, [pc, #68]	; (8001394 <HAL_DMA_Abort_IT+0xec>)
 800134e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	4798      	blx	r3
    } 
  }
  return status;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40020008 	.word	0x40020008
 8001380:	4002001c 	.word	0x4002001c
 8001384:	40020030 	.word	0x40020030
 8001388:	40020044 	.word	0x40020044
 800138c:	40020058 	.word	0x40020058
 8001390:	4002006c 	.word	0x4002006c
 8001394:	40020000 	.word	0x40020000

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b08b      	sub	sp, #44	; 0x2c
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e169      	b.n	8001680 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013ac:	2201      	movs	r2, #1
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8158 	bne.w	800167a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a9a      	ldr	r2, [pc, #616]	; (8001638 <HAL_GPIO_Init+0x2a0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d05e      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013d4:	4a98      	ldr	r2, [pc, #608]	; (8001638 <HAL_GPIO_Init+0x2a0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d875      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013da:	4a98      	ldr	r2, [pc, #608]	; (800163c <HAL_GPIO_Init+0x2a4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d058      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013e0:	4a96      	ldr	r2, [pc, #600]	; (800163c <HAL_GPIO_Init+0x2a4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d86f      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013e6:	4a96      	ldr	r2, [pc, #600]	; (8001640 <HAL_GPIO_Init+0x2a8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d052      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013ec:	4a94      	ldr	r2, [pc, #592]	; (8001640 <HAL_GPIO_Init+0x2a8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d869      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013f2:	4a94      	ldr	r2, [pc, #592]	; (8001644 <HAL_GPIO_Init+0x2ac>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d04c      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013f8:	4a92      	ldr	r2, [pc, #584]	; (8001644 <HAL_GPIO_Init+0x2ac>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d863      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013fe:	4a92      	ldr	r2, [pc, #584]	; (8001648 <HAL_GPIO_Init+0x2b0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d046      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 8001404:	4a90      	ldr	r2, [pc, #576]	; (8001648 <HAL_GPIO_Init+0x2b0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d85d      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 800140a:	2b12      	cmp	r3, #18
 800140c:	d82a      	bhi.n	8001464 <HAL_GPIO_Init+0xcc>
 800140e:	2b12      	cmp	r3, #18
 8001410:	d859      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 8001412:	a201      	add	r2, pc, #4	; (adr r2, 8001418 <HAL_GPIO_Init+0x80>)
 8001414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001418:	08001493 	.word	0x08001493
 800141c:	0800146d 	.word	0x0800146d
 8001420:	0800147f 	.word	0x0800147f
 8001424:	080014c1 	.word	0x080014c1
 8001428:	080014c7 	.word	0x080014c7
 800142c:	080014c7 	.word	0x080014c7
 8001430:	080014c7 	.word	0x080014c7
 8001434:	080014c7 	.word	0x080014c7
 8001438:	080014c7 	.word	0x080014c7
 800143c:	080014c7 	.word	0x080014c7
 8001440:	080014c7 	.word	0x080014c7
 8001444:	080014c7 	.word	0x080014c7
 8001448:	080014c7 	.word	0x080014c7
 800144c:	080014c7 	.word	0x080014c7
 8001450:	080014c7 	.word	0x080014c7
 8001454:	080014c7 	.word	0x080014c7
 8001458:	080014c7 	.word	0x080014c7
 800145c:	08001475 	.word	0x08001475
 8001460:	08001489 	.word	0x08001489
 8001464:	4a79      	ldr	r2, [pc, #484]	; (800164c <HAL_GPIO_Init+0x2b4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800146a:	e02c      	b.n	80014c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	623b      	str	r3, [r7, #32]
          break;
 8001472:	e029      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	3304      	adds	r3, #4
 800147a:	623b      	str	r3, [r7, #32]
          break;
 800147c:	e024      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	3308      	adds	r3, #8
 8001484:	623b      	str	r3, [r7, #32]
          break;
 8001486:	e01f      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	330c      	adds	r3, #12
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	e01a      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800149a:	2304      	movs	r3, #4
 800149c:	623b      	str	r3, [r7, #32]
          break;
 800149e:	e013      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a8:	2308      	movs	r3, #8
 80014aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	611a      	str	r2, [r3, #16]
          break;
 80014b2:	e009      	b.n	80014c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b4:	2308      	movs	r3, #8
 80014b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	615a      	str	r2, [r3, #20]
          break;
 80014be:	e003      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
          break;
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          break;
 80014c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2bff      	cmp	r3, #255	; 0xff
 80014cc:	d801      	bhi.n	80014d2 <HAL_GPIO_Init+0x13a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	e001      	b.n	80014d6 <HAL_GPIO_Init+0x13e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3304      	adds	r3, #4
 80014d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2bff      	cmp	r3, #255	; 0xff
 80014dc:	d802      	bhi.n	80014e4 <HAL_GPIO_Init+0x14c>
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	e002      	b.n	80014ea <HAL_GPIO_Init+0x152>
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	3b08      	subs	r3, #8
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	210f      	movs	r1, #15
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	401a      	ands	r2, r3
 80014fc:	6a39      	ldr	r1, [r7, #32]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	431a      	orrs	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 80b1 	beq.w	800167a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001518:	4b4d      	ldr	r3, [pc, #308]	; (8001650 <HAL_GPIO_Init+0x2b8>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a4c      	ldr	r2, [pc, #304]	; (8001650 <HAL_GPIO_Init+0x2b8>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <HAL_GPIO_Init+0x2b8>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001530:	4a48      	ldr	r2, [pc, #288]	; (8001654 <HAL_GPIO_Init+0x2bc>)
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a40      	ldr	r2, [pc, #256]	; (8001658 <HAL_GPIO_Init+0x2c0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d013      	beq.n	8001584 <HAL_GPIO_Init+0x1ec>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a3f      	ldr	r2, [pc, #252]	; (800165c <HAL_GPIO_Init+0x2c4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00d      	beq.n	8001580 <HAL_GPIO_Init+0x1e8>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a3e      	ldr	r2, [pc, #248]	; (8001660 <HAL_GPIO_Init+0x2c8>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d007      	beq.n	800157c <HAL_GPIO_Init+0x1e4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a3d      	ldr	r2, [pc, #244]	; (8001664 <HAL_GPIO_Init+0x2cc>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d101      	bne.n	8001578 <HAL_GPIO_Init+0x1e0>
 8001574:	2303      	movs	r3, #3
 8001576:	e006      	b.n	8001586 <HAL_GPIO_Init+0x1ee>
 8001578:	2304      	movs	r3, #4
 800157a:	e004      	b.n	8001586 <HAL_GPIO_Init+0x1ee>
 800157c:	2302      	movs	r3, #2
 800157e:	e002      	b.n	8001586 <HAL_GPIO_Init+0x1ee>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_GPIO_Init+0x1ee>
 8001584:	2300      	movs	r3, #0
 8001586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001588:	f002 0203 	and.w	r2, r2, #3
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	4093      	lsls	r3, r2
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001596:	492f      	ldr	r1, [pc, #188]	; (8001654 <HAL_GPIO_Init+0x2bc>)
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	492c      	ldr	r1, [pc, #176]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4928      	ldr	r1, [pc, #160]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	4922      	ldr	r1, [pc, #136]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	60cb      	str	r3, [r1, #12]
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	491e      	ldr	r1, [pc, #120]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	4918      	ldr	r1, [pc, #96]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	4914      	ldr	r1, [pc, #80]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 8001618:	4013      	ands	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d021      	beq.n	800166c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	490e      	ldr	r1, [pc, #56]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
 8001634:	e021      	b.n	800167a <HAL_GPIO_Init+0x2e2>
 8001636:	bf00      	nop
 8001638:	10320000 	.word	0x10320000
 800163c:	10310000 	.word	0x10310000
 8001640:	10220000 	.word	0x10220000
 8001644:	10210000 	.word	0x10210000
 8001648:	10120000 	.word	0x10120000
 800164c:	10110000 	.word	0x10110000
 8001650:	40021000 	.word	0x40021000
 8001654:	40010000 	.word	0x40010000
 8001658:	40010800 	.word	0x40010800
 800165c:	40010c00 	.word	0x40010c00
 8001660:	40011000 	.word	0x40011000
 8001664:	40011400 	.word	0x40011400
 8001668:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_GPIO_Init+0x304>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	43db      	mvns	r3, r3
 8001674:	4909      	ldr	r1, [pc, #36]	; (800169c <HAL_GPIO_Init+0x304>)
 8001676:	4013      	ands	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	3301      	adds	r3, #1
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	fa22 f303 	lsr.w	r3, r2, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	f47f ae8e 	bne.w	80013ac <HAL_GPIO_Init+0x14>
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	372c      	adds	r7, #44	; 0x2c
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	40010400 	.word	0x40010400

080016a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e001      	b.n	80016c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	807b      	strh	r3, [r7, #2]
 80016da:	4613      	mov	r3, r2
 80016dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016de:	787b      	ldrb	r3, [r7, #1]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e4:	887a      	ldrh	r2, [r7, #2]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016ea:	e003      	b.n	80016f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	041a      	lsls	r2, r3, #16
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	611a      	str	r2, [r3, #16]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016fe:	b480      	push	{r7}
 8001700:	b085      	sub	sp, #20
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001710:	887a      	ldrh	r2, [r7, #2]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	041a      	lsls	r2, r3, #16
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43d9      	mvns	r1, r3
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	400b      	ands	r3, r1
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	611a      	str	r2, [r3, #16]
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f87a 	bl	8000848 <HAL_GPIO_EXTI_Callback>
  }
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e12b      	b.n	80019ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d106      	bne.n	800178c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fa44 	bl	8000c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2224      	movs	r2, #36	; 0x24
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017c4:	f000 fcda 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 80017c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4a81      	ldr	r2, [pc, #516]	; (80019d4 <HAL_I2C_Init+0x274>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d807      	bhi.n	80017e4 <HAL_I2C_Init+0x84>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4a80      	ldr	r2, [pc, #512]	; (80019d8 <HAL_I2C_Init+0x278>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	bf94      	ite	ls
 80017dc:	2301      	movls	r3, #1
 80017de:	2300      	movhi	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	e006      	b.n	80017f2 <HAL_I2C_Init+0x92>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4a7d      	ldr	r2, [pc, #500]	; (80019dc <HAL_I2C_Init+0x27c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	bf94      	ite	ls
 80017ec:	2301      	movls	r3, #1
 80017ee:	2300      	movhi	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0e7      	b.n	80019ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4a78      	ldr	r2, [pc, #480]	; (80019e0 <HAL_I2C_Init+0x280>)
 80017fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001802:	0c9b      	lsrs	r3, r3, #18
 8001804:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	430a      	orrs	r2, r1
 8001818:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a6a      	ldr	r2, [pc, #424]	; (80019d4 <HAL_I2C_Init+0x274>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d802      	bhi.n	8001834 <HAL_I2C_Init+0xd4>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	3301      	adds	r3, #1
 8001832:	e009      	b.n	8001848 <HAL_I2C_Init+0xe8>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	4a69      	ldr	r2, [pc, #420]	; (80019e4 <HAL_I2C_Init+0x284>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	099b      	lsrs	r3, r3, #6
 8001846:	3301      	adds	r3, #1
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	430b      	orrs	r3, r1
 800184e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800185a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	495c      	ldr	r1, [pc, #368]	; (80019d4 <HAL_I2C_Init+0x274>)
 8001864:	428b      	cmp	r3, r1
 8001866:	d819      	bhi.n	800189c <HAL_I2C_Init+0x13c>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1e59      	subs	r1, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fbb1 f3f3 	udiv	r3, r1, r3
 8001876:	1c59      	adds	r1, r3, #1
 8001878:	f640 73fc 	movw	r3, #4092	; 0xffc
 800187c:	400b      	ands	r3, r1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00a      	beq.n	8001898 <HAL_I2C_Init+0x138>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1e59      	subs	r1, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001890:	3301      	adds	r3, #1
 8001892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001896:	e051      	b.n	800193c <HAL_I2C_Init+0x1dc>
 8001898:	2304      	movs	r3, #4
 800189a:	e04f      	b.n	800193c <HAL_I2C_Init+0x1dc>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d111      	bne.n	80018c8 <HAL_I2C_Init+0x168>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1e58      	subs	r0, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	440b      	add	r3, r1
 80018b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf0c      	ite	eq
 80018c0:	2301      	moveq	r3, #1
 80018c2:	2300      	movne	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	e012      	b.n	80018ee <HAL_I2C_Init+0x18e>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1e58      	subs	r0, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	0099      	lsls	r1, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	fbb0 f3f3 	udiv	r3, r0, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf0c      	ite	eq
 80018e8:	2301      	moveq	r3, #1
 80018ea:	2300      	movne	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2C_Init+0x196>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e022      	b.n	800193c <HAL_I2C_Init+0x1dc>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10e      	bne.n	800191c <HAL_I2C_Init+0x1bc>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1e58      	subs	r0, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6859      	ldr	r1, [r3, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	440b      	add	r3, r1
 800190c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001910:	3301      	adds	r3, #1
 8001912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800191a:	e00f      	b.n	800193c <HAL_I2C_Init+0x1dc>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e58      	subs	r0, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	0099      	lsls	r1, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001932:	3301      	adds	r3, #1
 8001934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001938:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	6809      	ldr	r1, [r1, #0]
 8001940:	4313      	orrs	r3, r2
 8001942:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800196a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6911      	ldr	r1, [r2, #16]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68d2      	ldr	r2, [r2, #12]
 8001976:	4311      	orrs	r1, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	430b      	orrs	r3, r1
 800197e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2220      	movs	r2, #32
 80019b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	000186a0 	.word	0x000186a0
 80019d8:	001e847f 	.word	0x001e847f
 80019dc:	003d08ff 	.word	0x003d08ff
 80019e0:	431bde83 	.word	0x431bde83
 80019e4:	10624dd3 	.word	0x10624dd3

080019e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e272      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8087 	beq.w	8001b16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a08:	4b92      	ldr	r3, [pc, #584]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d00c      	beq.n	8001a2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a14:	4b8f      	ldr	r3, [pc, #572]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d112      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5e>
 8001a20:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d10b      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2e:	4b89      	ldr	r3, [pc, #548]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d06c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x12c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d168      	bne.n	8001b14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e24c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x76>
 8001a50:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a7f      	ldr	r2, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e02e      	b.n	8001abc <HAL_RCC_OscConfig+0xd4>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x98>
 8001a66:	4b7b      	ldr	r3, [pc, #492]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7a      	ldr	r2, [pc, #488]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b78      	ldr	r3, [pc, #480]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a77      	ldr	r2, [pc, #476]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e01d      	b.n	8001abc <HAL_RCC_OscConfig+0xd4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0xbc>
 8001a8a:	4b72      	ldr	r3, [pc, #456]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a71      	ldr	r2, [pc, #452]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6e      	ldr	r2, [pc, #440]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0xd4>
 8001aa4:	4b6b      	ldr	r3, [pc, #428]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6a      	ldr	r2, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a67      	ldr	r2, [pc, #412]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fa9e 	bl	8001004 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff fa9a 	bl	8001004 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e200      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0xe4>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fa8a 	bl	8001004 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff fa86 	bl	8001004 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1ec      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x10c>
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d063      	beq.n	8001bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b22:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00b      	beq.n	8001b46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b2e:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d11c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x18c>
 8001b3a:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d116      	bne.n	8001b74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x176>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1c0      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4939      	ldr	r1, [pc, #228]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	e03a      	b.n	8001bea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b7c:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff fa3f 	bl	8001004 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fa3b 	bl	8001004 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e1a1      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4927      	ldr	r1, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
 8001bbc:	e015      	b.n	8001bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fa1e 	bl	8001004 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fa1a 	bl	8001004 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e180      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d03a      	beq.n	8001c6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d019      	beq.n	8001c32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7ff f9fe 	bl	8001004 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f9fa 	bl	8001004 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e160      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f000 face 	bl	80021cc <RCC_Delay>
 8001c30:	e01c      	b.n	8001c6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c38:	f7ff f9e4 	bl	8001004 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3e:	e00f      	b.n	8001c60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c40:	f7ff f9e0 	bl	8001004 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d908      	bls.n	8001c60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e146      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	42420000 	.word	0x42420000
 8001c5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c60:	4b92      	ldr	r3, [pc, #584]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1e9      	bne.n	8001c40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a6 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7e:	4b8b      	ldr	r3, [pc, #556]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10d      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4a87      	ldr	r2, [pc, #540]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	61d3      	str	r3, [r2, #28]
 8001c96:	4b85      	ldr	r3, [pc, #532]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4b82      	ldr	r3, [pc, #520]	; (8001eb0 <HAL_RCC_OscConfig+0x4c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d118      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <HAL_RCC_OscConfig+0x4c8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7e      	ldr	r2, [pc, #504]	; (8001eb0 <HAL_RCC_OscConfig+0x4c8>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f9a1 	bl	8001004 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc6:	f7ff f99d 	bl	8001004 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b64      	cmp	r3, #100	; 0x64
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e103      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	4b75      	ldr	r3, [pc, #468]	; (8001eb0 <HAL_RCC_OscConfig+0x4c8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x312>
 8001cec:	4b6f      	ldr	r3, [pc, #444]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a6e      	ldr	r2, [pc, #440]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e02d      	b.n	8001d56 <HAL_RCC_OscConfig+0x36e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x334>
 8001d02:	4b6a      	ldr	r3, [pc, #424]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a69      	ldr	r2, [pc, #420]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	4b67      	ldr	r3, [pc, #412]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a66      	ldr	r2, [pc, #408]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
 8001d1a:	e01c      	b.n	8001d56 <HAL_RCC_OscConfig+0x36e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	d10c      	bne.n	8001d3e <HAL_RCC_OscConfig+0x356>
 8001d24:	4b61      	ldr	r3, [pc, #388]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4a60      	ldr	r2, [pc, #384]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	6213      	str	r3, [r2, #32]
 8001d30:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a5d      	ldr	r2, [pc, #372]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	e00b      	b.n	8001d56 <HAL_RCC_OscConfig+0x36e>
 8001d3e:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4a5a      	ldr	r2, [pc, #360]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	4b58      	ldr	r3, [pc, #352]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a57      	ldr	r2, [pc, #348]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	f023 0304 	bic.w	r3, r3, #4
 8001d54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d015      	beq.n	8001d8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f951 	bl	8001004 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7ff f94d 	bl	8001004 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0b1      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0ee      	beq.n	8001d66 <HAL_RCC_OscConfig+0x37e>
 8001d88:	e014      	b.n	8001db4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7ff f93b 	bl	8001004 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7ff f937 	bl	8001004 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e09b      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	4b40      	ldr	r3, [pc, #256]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ee      	bne.n	8001d92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d105      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dba:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a3b      	ldr	r2, [pc, #236]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8087 	beq.w	8001ede <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd0:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d061      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d146      	bne.n	8001e72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de4:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <HAL_RCC_OscConfig+0x4cc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff f90b 	bl	8001004 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f907 	bl	8001004 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e06d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d108      	bne.n	8001e2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	4921      	ldr	r1, [pc, #132]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a19      	ldr	r1, [r3, #32]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	491b      	ldr	r1, [pc, #108]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x4cc>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f8db 	bl	8001004 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f8d7 	bl	8001004 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e03d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x46a>
 8001e70:	e035      	b.n	8001ede <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_RCC_OscConfig+0x4cc>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff f8c4 	bl	8001004 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff f8c0 	bl	8001004 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e026      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x498>
 8001e9e:	e01e      	b.n	8001ede <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e019      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_OscConfig+0x500>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000

08001eec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0d0      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f00:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d910      	bls.n	8001f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 0207 	bic.w	r2, r3, #7
 8001f16:	4965      	ldr	r1, [pc, #404]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b63      	ldr	r3, [pc, #396]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0b8      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f48:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a58      	ldr	r2, [pc, #352]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f60:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a52      	ldr	r2, [pc, #328]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	494d      	ldr	r1, [pc, #308]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d040      	beq.n	800200c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d115      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e07f      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e073      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e06b      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4936      	ldr	r1, [pc, #216]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7ff f812 	bl	8001004 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7ff f80e 	bl	8001004 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e053      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b27      	ldr	r3, [pc, #156]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d210      	bcs.n	800203c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 0207 	bic.w	r2, r3, #7
 8002022:	4922      	ldr	r1, [pc, #136]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e032      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4916      	ldr	r1, [pc, #88]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800207a:	f000 f821 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 800207e:	4602      	mov	r2, r0
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	490a      	ldr	r1, [pc, #40]	; (80020b4 <HAL_RCC_ClockConfig+0x1c8>)
 800208c:	5ccb      	ldrb	r3, [r1, r3]
 800208e:	fa22 f303 	lsr.w	r3, r2, r3
 8002092:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1d0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe ff70 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40022000 	.word	0x40022000
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08004000 	.word	0x08004000
 80020b8:	2000000c 	.word	0x2000000c
 80020bc:	20000010 	.word	0x20000010

080020c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_RCC_GetSysClockFreq+0x94>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d002      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x30>
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d003      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x36>
 80020ee:	e027      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCC_GetSysClockFreq+0x98>)
 80020f2:	613b      	str	r3, [r7, #16]
      break;
 80020f4:	e027      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	0c9b      	lsrs	r3, r3, #18
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d010      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_RCC_GetSysClockFreq+0x94>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	0c5b      	lsrs	r3, r3, #17
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	4a11      	ldr	r2, [pc, #68]	; (8002160 <HAL_RCC_GetSysClockFreq+0xa0>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <HAL_RCC_GetSysClockFreq+0x98>)
 8002122:	fb03 f202 	mul.w	r2, r3, r2
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e004      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	613b      	str	r3, [r7, #16]
      break;
 800213e:	e002      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_RCC_GetSysClockFreq+0x98>)
 8002142:	613b      	str	r3, [r7, #16]
      break;
 8002144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002146:	693b      	ldr	r3, [r7, #16]
}
 8002148:	4618      	mov	r0, r3
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	007a1200 	.word	0x007a1200
 800215c:	08004018 	.word	0x08004018
 8002160:	08004028 	.word	0x08004028
 8002164:	003d0900 	.word	0x003d0900

08002168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b02      	ldr	r3, [pc, #8]	; (8002178 <HAL_RCC_GetHCLKFreq+0x10>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	2000000c 	.word	0x2000000c

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002180:	f7ff fff2 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4903      	ldr	r1, [pc, #12]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	08004010 	.word	0x08004010

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a8:	f7ff ffde 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	0adb      	lsrs	r3, r3, #11
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4903      	ldr	r1, [pc, #12]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08004010 	.word	0x08004010

080021cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <RCC_Delay+0x34>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <RCC_Delay+0x38>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0a5b      	lsrs	r3, r3, #9
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021e8:	bf00      	nop
  }
  while (Delay --);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1e5a      	subs	r2, r3, #1
 80021ee:	60fa      	str	r2, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f9      	bne.n	80021e8 <RCC_Delay+0x1c>
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	2000000c 	.word	0x2000000c
 8002204:	10624dd3 	.word	0x10624dd3

08002208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e041      	b.n	800229e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fd2e 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3304      	adds	r3, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f000 fa74 	bl	8002734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d001      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e03a      	b.n	8002336 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a18      	ldr	r2, [pc, #96]	; (8002340 <HAL_TIM_Base_Start_IT+0x98>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00e      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x58>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ea:	d009      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x58>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_TIM_Base_Start_IT+0x9c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d004      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x58>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a13      	ldr	r2, [pc, #76]	; (8002348 <HAL_TIM_Base_Start_IT+0xa0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d111      	bne.n	8002324 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b06      	cmp	r3, #6
 8002310:	d010      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002322:	e007      	b.n	8002334 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40000400 	.word	0x40000400
 8002348:	40000800 	.word	0x40000800

0800234c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d122      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d11b      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0202 	mvn.w	r2, #2
 8002378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f9b4 	bl	80026fc <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f9a7 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f9b6 	bl	800270e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d122      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d11b      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0204 	mvn.w	r2, #4
 80023cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f98a 	bl	80026fc <HAL_TIM_IC_CaptureCallback>
 80023e8:	e005      	b.n	80023f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f97d 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f98c 	bl	800270e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b08      	cmp	r3, #8
 8002408:	d122      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b08      	cmp	r3, #8
 8002416:	d11b      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0208 	mvn.w	r2, #8
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2204      	movs	r2, #4
 8002426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f960 	bl	80026fc <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f953 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f962 	bl	800270e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b10      	cmp	r3, #16
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b10      	cmp	r3, #16
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0210 	mvn.w	r2, #16
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2208      	movs	r2, #8
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f936 	bl	80026fc <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f929 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f938 	bl	800270e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0201 	mvn.w	r2, #1
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe f9f8 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa7b 	bl	80029f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d10e      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d107      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8fc 	bl	8002720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b20      	cmp	r3, #32
 8002534:	d10e      	bne.n	8002554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b20      	cmp	r3, #32
 8002542:	d107      	bne.n	8002554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0220 	mvn.w	r2, #32
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa46 	bl	80029e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_TIM_ConfigClockSource+0x1c>
 8002574:	2302      	movs	r3, #2
 8002576:	e0b4      	b.n	80026e2 <HAL_TIM_ConfigClockSource+0x186>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800259e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b0:	d03e      	beq.n	8002630 <HAL_TIM_ConfigClockSource+0xd4>
 80025b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b6:	f200 8087 	bhi.w	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025be:	f000 8086 	beq.w	80026ce <HAL_TIM_ConfigClockSource+0x172>
 80025c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c6:	d87f      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025c8:	2b70      	cmp	r3, #112	; 0x70
 80025ca:	d01a      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0xa6>
 80025cc:	2b70      	cmp	r3, #112	; 0x70
 80025ce:	d87b      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d0:	2b60      	cmp	r3, #96	; 0x60
 80025d2:	d050      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x11a>
 80025d4:	2b60      	cmp	r3, #96	; 0x60
 80025d6:	d877      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	2b50      	cmp	r3, #80	; 0x50
 80025da:	d03c      	beq.n	8002656 <HAL_TIM_ConfigClockSource+0xfa>
 80025dc:	2b50      	cmp	r3, #80	; 0x50
 80025de:	d873      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d058      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x13a>
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d86f      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b30      	cmp	r3, #48	; 0x30
 80025ea:	d064      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x15a>
 80025ec:	2b30      	cmp	r3, #48	; 0x30
 80025ee:	d86b      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d060      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x15a>
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d867      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d05c      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x15a>
 80025fc:	2b10      	cmp	r3, #16
 80025fe:	d05a      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002600:	e062      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002612:	f000 f968 	bl	80028e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	609a      	str	r2, [r3, #8]
      break;
 800262e:	e04f      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002640:	f000 f951 	bl	80028e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002652:	609a      	str	r2, [r3, #8]
      break;
 8002654:	e03c      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002662:	461a      	mov	r2, r3
 8002664:	f000 f8c8 	bl	80027f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2150      	movs	r1, #80	; 0x50
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f91f 	bl	80028b2 <TIM_ITRx_SetConfig>
      break;
 8002674:	e02c      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002682:	461a      	mov	r2, r3
 8002684:	f000 f8e6 	bl	8002854 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2160      	movs	r1, #96	; 0x60
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f90f 	bl	80028b2 <TIM_ITRx_SetConfig>
      break;
 8002694:	e01c      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	461a      	mov	r2, r3
 80026a4:	f000 f8a8 	bl	80027f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2140      	movs	r1, #64	; 0x40
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f8ff 	bl	80028b2 <TIM_ITRx_SetConfig>
      break;
 80026b4:	e00c      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f000 f8f6 	bl	80028b2 <TIM_ITRx_SetConfig>
      break;
 80026c6:	e003      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      break;
 80026cc:	e000      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
	...

08002734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a29      	ldr	r2, [pc, #164]	; (80027ec <TIM_Base_SetConfig+0xb8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00b      	beq.n	8002764 <TIM_Base_SetConfig+0x30>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002752:	d007      	beq.n	8002764 <TIM_Base_SetConfig+0x30>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <TIM_Base_SetConfig+0xbc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d003      	beq.n	8002764 <TIM_Base_SetConfig+0x30>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a25      	ldr	r2, [pc, #148]	; (80027f4 <TIM_Base_SetConfig+0xc0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d108      	bne.n	8002776 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <TIM_Base_SetConfig+0xb8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00b      	beq.n	8002796 <TIM_Base_SetConfig+0x62>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002784:	d007      	beq.n	8002796 <TIM_Base_SetConfig+0x62>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <TIM_Base_SetConfig+0xbc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d003      	beq.n	8002796 <TIM_Base_SetConfig+0x62>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <TIM_Base_SetConfig+0xc0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d108      	bne.n	80027a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a07      	ldr	r2, [pc, #28]	; (80027ec <TIM_Base_SetConfig+0xb8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d103      	bne.n	80027dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	615a      	str	r2, [r3, #20]
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40000800 	.word	0x40000800

080027f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f023 0201 	bic.w	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f023 030a 	bic.w	r3, r3, #10
 8002834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	621a      	str	r2, [r3, #32]
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0210 	bic.w	r2, r3, #16
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800287e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	031b      	lsls	r3, r3, #12
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002890:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	621a      	str	r2, [r3, #32]
}
 80028a8:	bf00      	nop
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f043 0307 	orr.w	r3, r3, #7
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002900:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	021a      	lsls	r2, r3, #8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	431a      	orrs	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	4313      	orrs	r3, r2
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	609a      	str	r2, [r3, #8]
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002938:	2302      	movs	r3, #2
 800293a:	e046      	b.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d009      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10c      	bne.n	80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800

080029e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e042      	b.n	8002a9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe f954 	bl	8000cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fd71 	bl	8003530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d16d      	bne.n	8002ba0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_UART_Transmit+0x2c>
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e066      	b.n	8002ba2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2221      	movs	r2, #33	; 0x21
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ae2:	f7fe fa8f 	bl	8001004 <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	88fa      	ldrh	r2, [r7, #6]
 8002af2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afc:	d108      	bne.n	8002b10 <HAL_UART_Transmit+0x6c>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	e003      	b.n	8002b18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b18:	e02a      	b.n	8002b70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2200      	movs	r2, #0
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 faf9 	bl	800311c <UART_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e036      	b.n	8002ba2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10b      	bne.n	8002b52 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	e007      	b.n	8002b62 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1cf      	bne.n	8002b1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2200      	movs	r2, #0
 8002b82:	2140      	movs	r1, #64	; 0x40
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fac9 	bl	800311c <UART_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e006      	b.n	8002ba2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e000      	b.n	8002ba2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
  }
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b0ba      	sub	sp, #232	; 0xe8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10f      	bne.n	8002c12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_UART_IRQHandler+0x66>
 8002bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fbd1 	bl	80033b2 <UART_Receive_IT>
      return;
 8002c10:	e25b      	b.n	80030ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80de 	beq.w	8002dd8 <HAL_UART_IRQHandler+0x22c>
 8002c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d106      	bne.n	8002c36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80d1 	beq.w	8002dd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_UART_IRQHandler+0xae>
 8002c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_UART_IRQHandler+0xd2>
 8002c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f043 0202 	orr.w	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_UART_IRQHandler+0xf6>
 8002c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f043 0204 	orr.w	r2, r3, #4
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d011      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x126>
 8002cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d105      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f043 0208 	orr.w	r2, r3, #8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 81f2 	beq.w	80030c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_UART_IRQHandler+0x14e>
 8002ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fb5c 	bl	80033b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d103      	bne.n	8002d26 <HAL_UART_IRQHandler+0x17a>
 8002d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d04f      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fa66 	bl	80031f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d041      	beq.n	8002dbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3314      	adds	r3, #20
 8002d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d48:	e853 3f00 	ldrex	r3, [r3]
 8002d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3314      	adds	r3, #20
 8002d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d76:	e841 2300 	strex	r3, r2, [r1]
 8002d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1d9      	bne.n	8002d3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d013      	beq.n	8002db6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	4a7e      	ldr	r2, [pc, #504]	; (8002f8c <HAL_UART_IRQHandler+0x3e0>)
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe fa84 	bl	80012a8 <HAL_DMA_Abort_IT>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002db0:	4610      	mov	r0, r2
 8002db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db4:	e00e      	b.n	8002dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f99c 	bl	80030f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbc:	e00a      	b.n	8002dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f998 	bl	80030f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc4:	e006      	b.n	8002dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f994 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002dd2:	e175      	b.n	80030c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd4:	bf00      	nop
    return;
 8002dd6:	e173      	b.n	80030c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	f040 814f 	bne.w	8003080 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8148 	beq.w	8003080 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8141 	beq.w	8003080 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80b6 	beq.w	8002f90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8145 	beq.w	80030c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e42:	429a      	cmp	r2, r3
 8002e44:	f080 813e 	bcs.w	80030c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	f000 8088 	beq.w	8002f6c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	330c      	adds	r3, #12
 8002e62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e6a:	e853 3f00 	ldrex	r3, [r3]
 8002e6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e88:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1d9      	bne.n	8002e5c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3314      	adds	r3, #20
 8002eae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb2:	e853 3f00 	ldrex	r3, [r3]
 8002eb6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002eb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3314      	adds	r3, #20
 8002ec8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ecc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ed4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e1      	bne.n	8002ea8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3314      	adds	r3, #20
 8002eea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eee:	e853 3f00 	ldrex	r3, [r3]
 8002ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3314      	adds	r3, #20
 8002f04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f10:	e841 2300 	strex	r3, r2, [r1]
 8002f14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e3      	bne.n	8002ee4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	330c      	adds	r3, #12
 8002f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f34:	e853 3f00 	ldrex	r3, [r3]
 8002f38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f3c:	f023 0310 	bic.w	r3, r3, #16
 8002f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f50:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e3      	bne.n	8002f2a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe f963 	bl	8001232 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	4619      	mov	r1, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f8bf 	bl	8003106 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f88:	e09c      	b.n	80030c4 <HAL_UART_IRQHandler+0x518>
 8002f8a:	bf00      	nop
 8002f8c:	080032bd 	.word	0x080032bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 808e 	beq.w	80030c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8089 	beq.w	80030c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002fda:	647a      	str	r2, [r7, #68]	; 0x44
 8002fdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fe2:	e841 2300 	strex	r3, r2, [r1]
 8002fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1e3      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3314      	adds	r3, #20
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	e853 3f00 	ldrex	r3, [r3]
 8002ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3314      	adds	r3, #20
 800300e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003012:	633a      	str	r2, [r7, #48]	; 0x30
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800301a:	e841 2300 	strex	r3, r2, [r1]
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1e3      	bne.n	8002fee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	e853 3f00 	ldrex	r3, [r3]
 8003042:	60fb      	str	r3, [r7, #12]
   return(result);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0310 	bic.w	r3, r3, #16
 800304a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	330c      	adds	r3, #12
 8003054:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003058:	61fa      	str	r2, [r7, #28]
 800305a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	69b9      	ldr	r1, [r7, #24]
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	617b      	str	r3, [r7, #20]
   return(result);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e3      	bne.n	8003034 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003072:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003076:	4619      	mov	r1, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f844 	bl	8003106 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800307e:	e023      	b.n	80030c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003088:	2b00      	cmp	r3, #0
 800308a:	d009      	beq.n	80030a0 <HAL_UART_IRQHandler+0x4f4>
 800308c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f923 	bl	80032e4 <UART_Transmit_IT>
    return;
 800309e:	e014      	b.n	80030ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00e      	beq.n	80030ca <HAL_UART_IRQHandler+0x51e>
 80030ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f962 	bl	8003382 <UART_EndTransmit_IT>
    return;
 80030be:	e004      	b.n	80030ca <HAL_UART_IRQHandler+0x51e>
    return;
 80030c0:	bf00      	nop
 80030c2:	e002      	b.n	80030ca <HAL_UART_IRQHandler+0x51e>
      return;
 80030c4:	bf00      	nop
 80030c6:	e000      	b.n	80030ca <HAL_UART_IRQHandler+0x51e>
      return;
 80030c8:	bf00      	nop
  }
}
 80030ca:	37e8      	adds	r7, #232	; 0xe8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b090      	sub	sp, #64	; 0x40
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800312c:	e050      	b.n	80031d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d04c      	beq.n	80031d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <UART_WaitOnFlagUntilTimeout+0x30>
 800313c:	f7fd ff62 	bl	8001004 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003148:	429a      	cmp	r2, r3
 800314a:	d241      	bcs.n	80031d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	e853 3f00 	ldrex	r3, [r3]
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800316c:	637a      	str	r2, [r7, #52]	; 0x34
 800316e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e5      	bne.n	800314c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3314      	adds	r3, #20
 8003186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	613b      	str	r3, [r7, #16]
   return(result);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	63bb      	str	r3, [r7, #56]	; 0x38
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3314      	adds	r3, #20
 800319e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031a0:	623a      	str	r2, [r7, #32]
 80031a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	69f9      	ldr	r1, [r7, #28]
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	e841 2300 	strex	r3, r2, [r1]
 80031ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e5      	bne.n	8003180 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e00f      	b.n	80031f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4013      	ands	r3, r2
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	429a      	cmp	r2, r3
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d09f      	beq.n	800312e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3740      	adds	r7, #64	; 0x40
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b095      	sub	sp, #84	; 0x54
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003220:	643a      	str	r2, [r7, #64]	; 0x40
 8003222:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003226:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003228:	e841 2300 	strex	r3, r2, [r1]
 800322c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e5      	bne.n	8003200 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3314      	adds	r3, #20
 800323a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	61fb      	str	r3, [r7, #28]
   return(result);
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	64bb      	str	r3, [r7, #72]	; 0x48
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3314      	adds	r3, #20
 8003252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003254:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800325a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e5      	bne.n	8003234 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	2b01      	cmp	r3, #1
 800326e:	d119      	bne.n	80032a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	330c      	adds	r3, #12
 8003276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f023 0310 	bic.w	r3, r3, #16
 8003286:	647b      	str	r3, [r7, #68]	; 0x44
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003290:	61ba      	str	r2, [r7, #24]
 8003292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	6979      	ldr	r1, [r7, #20]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	613b      	str	r3, [r7, #16]
   return(result);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e5      	bne.n	8003270 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032b2:	bf00      	nop
 80032b4:	3754      	adds	r7, #84	; 0x54
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff ff0c 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b21      	cmp	r3, #33	; 0x21
 80032f6:	d13e      	bne.n	8003376 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003300:	d114      	bne.n	800332c <UART_Transmit_IT+0x48>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d110      	bne.n	800332c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800331e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	1c9a      	adds	r2, r3, #2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	621a      	str	r2, [r3, #32]
 800332a:	e008      	b.n	800333e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	1c59      	adds	r1, r3, #1
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6211      	str	r1, [r2, #32]
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29b      	uxth	r3, r3
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4619      	mov	r1, r3
 800334c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003360:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003370:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003376:	2302      	movs	r3, #2
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr

08003382 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003398:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fe94 	bl	80030d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b08c      	sub	sp, #48	; 0x30
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b22      	cmp	r3, #34	; 0x22
 80033c4:	f040 80ae 	bne.w	8003524 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	d117      	bne.n	8003402 <UART_Receive_IT+0x50>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d113      	bne.n	8003402 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	1c9a      	adds	r2, r3, #2
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003400:	e026      	b.n	8003450 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003408:	2300      	movs	r3, #0
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003414:	d007      	beq.n	8003426 <UART_Receive_IT+0x74>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <UART_Receive_IT+0x82>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	e008      	b.n	8003446 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003440:	b2da      	uxtb	r2, r3
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29b      	uxth	r3, r3
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4619      	mov	r1, r3
 800345e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003460:	2b00      	cmp	r3, #0
 8003462:	d15d      	bne.n	8003520 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0220 	bic.w	r2, r2, #32
 8003472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003482:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d135      	bne.n	8003516 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	613b      	str	r3, [r7, #16]
   return(result);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f023 0310 	bic.w	r3, r3, #16
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d0:	623a      	str	r2, [r7, #32]
 80034d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	69f9      	ldr	r1, [r7, #28]
 80034d6:	6a3a      	ldr	r2, [r7, #32]
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e5      	bne.n	80034b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b10      	cmp	r3, #16
 80034f0:	d10a      	bne.n	8003508 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800350c:	4619      	mov	r1, r3
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fdf9 	bl	8003106 <HAL_UARTEx_RxEventCallback>
 8003514:	e002      	b.n	800351c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff fde3 	bl	80030e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	e002      	b.n	8003526 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	3730      	adds	r7, #48	; 0x30
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800356a:	f023 030c 	bic.w	r3, r3, #12
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	430b      	orrs	r3, r1
 8003576:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2c      	ldr	r2, [pc, #176]	; (8003644 <UART_SetConfig+0x114>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d103      	bne.n	80035a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003598:	f7fe fe04 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	e002      	b.n	80035a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035a0:	f7fe fdec 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 80035a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009a      	lsls	r2, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	4a22      	ldr	r2, [pc, #136]	; (8003648 <UART_SetConfig+0x118>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	0119      	lsls	r1, r3, #4
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009a      	lsls	r2, r3, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035dc:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <UART_SetConfig+0x118>)
 80035de:	fba3 0302 	umull	r0, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2064      	movs	r0, #100	; 0x64
 80035e6:	fb00 f303 	mul.w	r3, r0, r3
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	3332      	adds	r3, #50	; 0x32
 80035f0:	4a15      	ldr	r2, [pc, #84]	; (8003648 <UART_SetConfig+0x118>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035fc:	4419      	add	r1, r3
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009a      	lsls	r2, r3, #2
 8003608:	441a      	add	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	fbb2 f2f3 	udiv	r2, r2, r3
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <UART_SetConfig+0x118>)
 8003616:	fba3 0302 	umull	r0, r3, r3, r2
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2064      	movs	r0, #100	; 0x64
 800361e:	fb00 f303 	mul.w	r3, r0, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	3332      	adds	r3, #50	; 0x32
 8003628:	4a07      	ldr	r2, [pc, #28]	; (8003648 <UART_SetConfig+0x118>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	f003 020f 	and.w	r2, r3, #15
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	440a      	add	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800363c:	bf00      	nop
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40013800 	.word	0x40013800
 8003648:	51eb851f 	.word	0x51eb851f

0800364c <malloc>:
 800364c:	4b02      	ldr	r3, [pc, #8]	; (8003658 <malloc+0xc>)
 800364e:	4601      	mov	r1, r0
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	f000 b82b 	b.w	80036ac <_malloc_r>
 8003656:	bf00      	nop
 8003658:	20000064 	.word	0x20000064

0800365c <free>:
 800365c:	4b02      	ldr	r3, [pc, #8]	; (8003668 <free+0xc>)
 800365e:	4601      	mov	r1, r0
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	f000 b913 	b.w	800388c <_free_r>
 8003666:	bf00      	nop
 8003668:	20000064 	.word	0x20000064

0800366c <sbrk_aligned>:
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	4e0e      	ldr	r6, [pc, #56]	; (80036a8 <sbrk_aligned+0x3c>)
 8003670:	460c      	mov	r4, r1
 8003672:	6831      	ldr	r1, [r6, #0]
 8003674:	4605      	mov	r5, r0
 8003676:	b911      	cbnz	r1, 800367e <sbrk_aligned+0x12>
 8003678:	f000 f8cc 	bl	8003814 <_sbrk_r>
 800367c:	6030      	str	r0, [r6, #0]
 800367e:	4621      	mov	r1, r4
 8003680:	4628      	mov	r0, r5
 8003682:	f000 f8c7 	bl	8003814 <_sbrk_r>
 8003686:	1c43      	adds	r3, r0, #1
 8003688:	d00a      	beq.n	80036a0 <sbrk_aligned+0x34>
 800368a:	1cc4      	adds	r4, r0, #3
 800368c:	f024 0403 	bic.w	r4, r4, #3
 8003690:	42a0      	cmp	r0, r4
 8003692:	d007      	beq.n	80036a4 <sbrk_aligned+0x38>
 8003694:	1a21      	subs	r1, r4, r0
 8003696:	4628      	mov	r0, r5
 8003698:	f000 f8bc 	bl	8003814 <_sbrk_r>
 800369c:	3001      	adds	r0, #1
 800369e:	d101      	bne.n	80036a4 <sbrk_aligned+0x38>
 80036a0:	f04f 34ff 	mov.w	r4, #4294967295
 80036a4:	4620      	mov	r0, r4
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	200001d8 	.word	0x200001d8

080036ac <_malloc_r>:
 80036ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036b0:	1ccd      	adds	r5, r1, #3
 80036b2:	f025 0503 	bic.w	r5, r5, #3
 80036b6:	3508      	adds	r5, #8
 80036b8:	2d0c      	cmp	r5, #12
 80036ba:	bf38      	it	cc
 80036bc:	250c      	movcc	r5, #12
 80036be:	2d00      	cmp	r5, #0
 80036c0:	4607      	mov	r7, r0
 80036c2:	db01      	blt.n	80036c8 <_malloc_r+0x1c>
 80036c4:	42a9      	cmp	r1, r5
 80036c6:	d905      	bls.n	80036d4 <_malloc_r+0x28>
 80036c8:	230c      	movs	r3, #12
 80036ca:	2600      	movs	r6, #0
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4630      	mov	r0, r6
 80036d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037a8 <_malloc_r+0xfc>
 80036d8:	f000 f868 	bl	80037ac <__malloc_lock>
 80036dc:	f8d8 3000 	ldr.w	r3, [r8]
 80036e0:	461c      	mov	r4, r3
 80036e2:	bb5c      	cbnz	r4, 800373c <_malloc_r+0x90>
 80036e4:	4629      	mov	r1, r5
 80036e6:	4638      	mov	r0, r7
 80036e8:	f7ff ffc0 	bl	800366c <sbrk_aligned>
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	4604      	mov	r4, r0
 80036f0:	d155      	bne.n	800379e <_malloc_r+0xf2>
 80036f2:	f8d8 4000 	ldr.w	r4, [r8]
 80036f6:	4626      	mov	r6, r4
 80036f8:	2e00      	cmp	r6, #0
 80036fa:	d145      	bne.n	8003788 <_malloc_r+0xdc>
 80036fc:	2c00      	cmp	r4, #0
 80036fe:	d048      	beq.n	8003792 <_malloc_r+0xe6>
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	4631      	mov	r1, r6
 8003704:	4638      	mov	r0, r7
 8003706:	eb04 0903 	add.w	r9, r4, r3
 800370a:	f000 f883 	bl	8003814 <_sbrk_r>
 800370e:	4581      	cmp	r9, r0
 8003710:	d13f      	bne.n	8003792 <_malloc_r+0xe6>
 8003712:	6821      	ldr	r1, [r4, #0]
 8003714:	4638      	mov	r0, r7
 8003716:	1a6d      	subs	r5, r5, r1
 8003718:	4629      	mov	r1, r5
 800371a:	f7ff ffa7 	bl	800366c <sbrk_aligned>
 800371e:	3001      	adds	r0, #1
 8003720:	d037      	beq.n	8003792 <_malloc_r+0xe6>
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	442b      	add	r3, r5
 8003726:	6023      	str	r3, [r4, #0]
 8003728:	f8d8 3000 	ldr.w	r3, [r8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d038      	beq.n	80037a2 <_malloc_r+0xf6>
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	42a2      	cmp	r2, r4
 8003734:	d12b      	bne.n	800378e <_malloc_r+0xe2>
 8003736:	2200      	movs	r2, #0
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	e00f      	b.n	800375c <_malloc_r+0xb0>
 800373c:	6822      	ldr	r2, [r4, #0]
 800373e:	1b52      	subs	r2, r2, r5
 8003740:	d41f      	bmi.n	8003782 <_malloc_r+0xd6>
 8003742:	2a0b      	cmp	r2, #11
 8003744:	d917      	bls.n	8003776 <_malloc_r+0xca>
 8003746:	1961      	adds	r1, r4, r5
 8003748:	42a3      	cmp	r3, r4
 800374a:	6025      	str	r5, [r4, #0]
 800374c:	bf18      	it	ne
 800374e:	6059      	strne	r1, [r3, #4]
 8003750:	6863      	ldr	r3, [r4, #4]
 8003752:	bf08      	it	eq
 8003754:	f8c8 1000 	streq.w	r1, [r8]
 8003758:	5162      	str	r2, [r4, r5]
 800375a:	604b      	str	r3, [r1, #4]
 800375c:	4638      	mov	r0, r7
 800375e:	f104 060b 	add.w	r6, r4, #11
 8003762:	f000 f829 	bl	80037b8 <__malloc_unlock>
 8003766:	f026 0607 	bic.w	r6, r6, #7
 800376a:	1d23      	adds	r3, r4, #4
 800376c:	1af2      	subs	r2, r6, r3
 800376e:	d0ae      	beq.n	80036ce <_malloc_r+0x22>
 8003770:	1b9b      	subs	r3, r3, r6
 8003772:	50a3      	str	r3, [r4, r2]
 8003774:	e7ab      	b.n	80036ce <_malloc_r+0x22>
 8003776:	42a3      	cmp	r3, r4
 8003778:	6862      	ldr	r2, [r4, #4]
 800377a:	d1dd      	bne.n	8003738 <_malloc_r+0x8c>
 800377c:	f8c8 2000 	str.w	r2, [r8]
 8003780:	e7ec      	b.n	800375c <_malloc_r+0xb0>
 8003782:	4623      	mov	r3, r4
 8003784:	6864      	ldr	r4, [r4, #4]
 8003786:	e7ac      	b.n	80036e2 <_malloc_r+0x36>
 8003788:	4634      	mov	r4, r6
 800378a:	6876      	ldr	r6, [r6, #4]
 800378c:	e7b4      	b.n	80036f8 <_malloc_r+0x4c>
 800378e:	4613      	mov	r3, r2
 8003790:	e7cc      	b.n	800372c <_malloc_r+0x80>
 8003792:	230c      	movs	r3, #12
 8003794:	4638      	mov	r0, r7
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	f000 f80e 	bl	80037b8 <__malloc_unlock>
 800379c:	e797      	b.n	80036ce <_malloc_r+0x22>
 800379e:	6025      	str	r5, [r4, #0]
 80037a0:	e7dc      	b.n	800375c <_malloc_r+0xb0>
 80037a2:	605b      	str	r3, [r3, #4]
 80037a4:	deff      	udf	#255	; 0xff
 80037a6:	bf00      	nop
 80037a8:	200001d4 	.word	0x200001d4

080037ac <__malloc_lock>:
 80037ac:	4801      	ldr	r0, [pc, #4]	; (80037b4 <__malloc_lock+0x8>)
 80037ae:	f000 b86b 	b.w	8003888 <__retarget_lock_acquire_recursive>
 80037b2:	bf00      	nop
 80037b4:	20000318 	.word	0x20000318

080037b8 <__malloc_unlock>:
 80037b8:	4801      	ldr	r0, [pc, #4]	; (80037c0 <__malloc_unlock+0x8>)
 80037ba:	f000 b866 	b.w	800388a <__retarget_lock_release_recursive>
 80037be:	bf00      	nop
 80037c0:	20000318 	.word	0x20000318

080037c4 <siprintf>:
 80037c4:	b40e      	push	{r1, r2, r3}
 80037c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037ca:	b500      	push	{lr}
 80037cc:	b09c      	sub	sp, #112	; 0x70
 80037ce:	ab1d      	add	r3, sp, #116	; 0x74
 80037d0:	9002      	str	r0, [sp, #8]
 80037d2:	9006      	str	r0, [sp, #24]
 80037d4:	9107      	str	r1, [sp, #28]
 80037d6:	9104      	str	r1, [sp, #16]
 80037d8:	4808      	ldr	r0, [pc, #32]	; (80037fc <siprintf+0x38>)
 80037da:	4909      	ldr	r1, [pc, #36]	; (8003800 <siprintf+0x3c>)
 80037dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80037e0:	9105      	str	r1, [sp, #20]
 80037e2:	6800      	ldr	r0, [r0, #0]
 80037e4:	a902      	add	r1, sp, #8
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	f000 f8f2 	bl	80039d0 <_svfiprintf_r>
 80037ec:	2200      	movs	r2, #0
 80037ee:	9b02      	ldr	r3, [sp, #8]
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	b01c      	add	sp, #112	; 0x70
 80037f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037f8:	b003      	add	sp, #12
 80037fa:	4770      	bx	lr
 80037fc:	20000064 	.word	0x20000064
 8003800:	ffff0208 	.word	0xffff0208

08003804 <memset>:
 8003804:	4603      	mov	r3, r0
 8003806:	4402      	add	r2, r0
 8003808:	4293      	cmp	r3, r2
 800380a:	d100      	bne.n	800380e <memset+0xa>
 800380c:	4770      	bx	lr
 800380e:	f803 1b01 	strb.w	r1, [r3], #1
 8003812:	e7f9      	b.n	8003808 <memset+0x4>

08003814 <_sbrk_r>:
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	2300      	movs	r3, #0
 8003818:	4d05      	ldr	r5, [pc, #20]	; (8003830 <_sbrk_r+0x1c>)
 800381a:	4604      	mov	r4, r0
 800381c:	4608      	mov	r0, r1
 800381e:	602b      	str	r3, [r5, #0]
 8003820:	f7fd fb36 	bl	8000e90 <_sbrk>
 8003824:	1c43      	adds	r3, r0, #1
 8003826:	d102      	bne.n	800382e <_sbrk_r+0x1a>
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	b103      	cbz	r3, 800382e <_sbrk_r+0x1a>
 800382c:	6023      	str	r3, [r4, #0]
 800382e:	bd38      	pop	{r3, r4, r5, pc}
 8003830:	20000314 	.word	0x20000314

08003834 <__errno>:
 8003834:	4b01      	ldr	r3, [pc, #4]	; (800383c <__errno+0x8>)
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000064 	.word	0x20000064

08003840 <__libc_init_array>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	2600      	movs	r6, #0
 8003844:	4d0c      	ldr	r5, [pc, #48]	; (8003878 <__libc_init_array+0x38>)
 8003846:	4c0d      	ldr	r4, [pc, #52]	; (800387c <__libc_init_array+0x3c>)
 8003848:	1b64      	subs	r4, r4, r5
 800384a:	10a4      	asrs	r4, r4, #2
 800384c:	42a6      	cmp	r6, r4
 800384e:	d109      	bne.n	8003864 <__libc_init_array+0x24>
 8003850:	f000 fbbe 	bl	8003fd0 <_init>
 8003854:	2600      	movs	r6, #0
 8003856:	4d0a      	ldr	r5, [pc, #40]	; (8003880 <__libc_init_array+0x40>)
 8003858:	4c0a      	ldr	r4, [pc, #40]	; (8003884 <__libc_init_array+0x44>)
 800385a:	1b64      	subs	r4, r4, r5
 800385c:	10a4      	asrs	r4, r4, #2
 800385e:	42a6      	cmp	r6, r4
 8003860:	d105      	bne.n	800386e <__libc_init_array+0x2e>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	f855 3b04 	ldr.w	r3, [r5], #4
 8003868:	4798      	blx	r3
 800386a:	3601      	adds	r6, #1
 800386c:	e7ee      	b.n	800384c <__libc_init_array+0xc>
 800386e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003872:	4798      	blx	r3
 8003874:	3601      	adds	r6, #1
 8003876:	e7f2      	b.n	800385e <__libc_init_array+0x1e>
 8003878:	08004060 	.word	0x08004060
 800387c:	08004060 	.word	0x08004060
 8003880:	08004060 	.word	0x08004060
 8003884:	08004064 	.word	0x08004064

08003888 <__retarget_lock_acquire_recursive>:
 8003888:	4770      	bx	lr

0800388a <__retarget_lock_release_recursive>:
 800388a:	4770      	bx	lr

0800388c <_free_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4605      	mov	r5, r0
 8003890:	2900      	cmp	r1, #0
 8003892:	d040      	beq.n	8003916 <_free_r+0x8a>
 8003894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003898:	1f0c      	subs	r4, r1, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	bfb8      	it	lt
 800389e:	18e4      	addlt	r4, r4, r3
 80038a0:	f7ff ff84 	bl	80037ac <__malloc_lock>
 80038a4:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <_free_r+0x8c>)
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	b933      	cbnz	r3, 80038b8 <_free_r+0x2c>
 80038aa:	6063      	str	r3, [r4, #4]
 80038ac:	6014      	str	r4, [r2, #0]
 80038ae:	4628      	mov	r0, r5
 80038b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038b4:	f7ff bf80 	b.w	80037b8 <__malloc_unlock>
 80038b8:	42a3      	cmp	r3, r4
 80038ba:	d908      	bls.n	80038ce <_free_r+0x42>
 80038bc:	6820      	ldr	r0, [r4, #0]
 80038be:	1821      	adds	r1, r4, r0
 80038c0:	428b      	cmp	r3, r1
 80038c2:	bf01      	itttt	eq
 80038c4:	6819      	ldreq	r1, [r3, #0]
 80038c6:	685b      	ldreq	r3, [r3, #4]
 80038c8:	1809      	addeq	r1, r1, r0
 80038ca:	6021      	streq	r1, [r4, #0]
 80038cc:	e7ed      	b.n	80038aa <_free_r+0x1e>
 80038ce:	461a      	mov	r2, r3
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	b10b      	cbz	r3, 80038d8 <_free_r+0x4c>
 80038d4:	42a3      	cmp	r3, r4
 80038d6:	d9fa      	bls.n	80038ce <_free_r+0x42>
 80038d8:	6811      	ldr	r1, [r2, #0]
 80038da:	1850      	adds	r0, r2, r1
 80038dc:	42a0      	cmp	r0, r4
 80038de:	d10b      	bne.n	80038f8 <_free_r+0x6c>
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	4401      	add	r1, r0
 80038e4:	1850      	adds	r0, r2, r1
 80038e6:	4283      	cmp	r3, r0
 80038e8:	6011      	str	r1, [r2, #0]
 80038ea:	d1e0      	bne.n	80038ae <_free_r+0x22>
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4408      	add	r0, r1
 80038f2:	6010      	str	r0, [r2, #0]
 80038f4:	6053      	str	r3, [r2, #4]
 80038f6:	e7da      	b.n	80038ae <_free_r+0x22>
 80038f8:	d902      	bls.n	8003900 <_free_r+0x74>
 80038fa:	230c      	movs	r3, #12
 80038fc:	602b      	str	r3, [r5, #0]
 80038fe:	e7d6      	b.n	80038ae <_free_r+0x22>
 8003900:	6820      	ldr	r0, [r4, #0]
 8003902:	1821      	adds	r1, r4, r0
 8003904:	428b      	cmp	r3, r1
 8003906:	bf01      	itttt	eq
 8003908:	6819      	ldreq	r1, [r3, #0]
 800390a:	685b      	ldreq	r3, [r3, #4]
 800390c:	1809      	addeq	r1, r1, r0
 800390e:	6021      	streq	r1, [r4, #0]
 8003910:	6063      	str	r3, [r4, #4]
 8003912:	6054      	str	r4, [r2, #4]
 8003914:	e7cb      	b.n	80038ae <_free_r+0x22>
 8003916:	bd38      	pop	{r3, r4, r5, pc}
 8003918:	200001d4 	.word	0x200001d4

0800391c <__ssputs_r>:
 800391c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003920:	461f      	mov	r7, r3
 8003922:	688e      	ldr	r6, [r1, #8]
 8003924:	4682      	mov	sl, r0
 8003926:	42be      	cmp	r6, r7
 8003928:	460c      	mov	r4, r1
 800392a:	4690      	mov	r8, r2
 800392c:	680b      	ldr	r3, [r1, #0]
 800392e:	d82c      	bhi.n	800398a <__ssputs_r+0x6e>
 8003930:	898a      	ldrh	r2, [r1, #12]
 8003932:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003936:	d026      	beq.n	8003986 <__ssputs_r+0x6a>
 8003938:	6965      	ldr	r5, [r4, #20]
 800393a:	6909      	ldr	r1, [r1, #16]
 800393c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003940:	eba3 0901 	sub.w	r9, r3, r1
 8003944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003948:	1c7b      	adds	r3, r7, #1
 800394a:	444b      	add	r3, r9
 800394c:	106d      	asrs	r5, r5, #1
 800394e:	429d      	cmp	r5, r3
 8003950:	bf38      	it	cc
 8003952:	461d      	movcc	r5, r3
 8003954:	0553      	lsls	r3, r2, #21
 8003956:	d527      	bpl.n	80039a8 <__ssputs_r+0x8c>
 8003958:	4629      	mov	r1, r5
 800395a:	f7ff fea7 	bl	80036ac <_malloc_r>
 800395e:	4606      	mov	r6, r0
 8003960:	b360      	cbz	r0, 80039bc <__ssputs_r+0xa0>
 8003962:	464a      	mov	r2, r9
 8003964:	6921      	ldr	r1, [r4, #16]
 8003966:	f000 faed 	bl	8003f44 <memcpy>
 800396a:	89a3      	ldrh	r3, [r4, #12]
 800396c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003974:	81a3      	strh	r3, [r4, #12]
 8003976:	6126      	str	r6, [r4, #16]
 8003978:	444e      	add	r6, r9
 800397a:	6026      	str	r6, [r4, #0]
 800397c:	463e      	mov	r6, r7
 800397e:	6165      	str	r5, [r4, #20]
 8003980:	eba5 0509 	sub.w	r5, r5, r9
 8003984:	60a5      	str	r5, [r4, #8]
 8003986:	42be      	cmp	r6, r7
 8003988:	d900      	bls.n	800398c <__ssputs_r+0x70>
 800398a:	463e      	mov	r6, r7
 800398c:	4632      	mov	r2, r6
 800398e:	4641      	mov	r1, r8
 8003990:	6820      	ldr	r0, [r4, #0]
 8003992:	f000 faaf 	bl	8003ef4 <memmove>
 8003996:	2000      	movs	r0, #0
 8003998:	68a3      	ldr	r3, [r4, #8]
 800399a:	1b9b      	subs	r3, r3, r6
 800399c:	60a3      	str	r3, [r4, #8]
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	4433      	add	r3, r6
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a8:	462a      	mov	r2, r5
 80039aa:	f000 fad9 	bl	8003f60 <_realloc_r>
 80039ae:	4606      	mov	r6, r0
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d1e0      	bne.n	8003976 <__ssputs_r+0x5a>
 80039b4:	4650      	mov	r0, sl
 80039b6:	6921      	ldr	r1, [r4, #16]
 80039b8:	f7ff ff68 	bl	800388c <_free_r>
 80039bc:	230c      	movs	r3, #12
 80039be:	f8ca 3000 	str.w	r3, [sl]
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295
 80039c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039cc:	81a3      	strh	r3, [r4, #12]
 80039ce:	e7e9      	b.n	80039a4 <__ssputs_r+0x88>

080039d0 <_svfiprintf_r>:
 80039d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d4:	4698      	mov	r8, r3
 80039d6:	898b      	ldrh	r3, [r1, #12]
 80039d8:	4607      	mov	r7, r0
 80039da:	061b      	lsls	r3, r3, #24
 80039dc:	460d      	mov	r5, r1
 80039de:	4614      	mov	r4, r2
 80039e0:	b09d      	sub	sp, #116	; 0x74
 80039e2:	d50e      	bpl.n	8003a02 <_svfiprintf_r+0x32>
 80039e4:	690b      	ldr	r3, [r1, #16]
 80039e6:	b963      	cbnz	r3, 8003a02 <_svfiprintf_r+0x32>
 80039e8:	2140      	movs	r1, #64	; 0x40
 80039ea:	f7ff fe5f 	bl	80036ac <_malloc_r>
 80039ee:	6028      	str	r0, [r5, #0]
 80039f0:	6128      	str	r0, [r5, #16]
 80039f2:	b920      	cbnz	r0, 80039fe <_svfiprintf_r+0x2e>
 80039f4:	230c      	movs	r3, #12
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	e0d0      	b.n	8003ba0 <_svfiprintf_r+0x1d0>
 80039fe:	2340      	movs	r3, #64	; 0x40
 8003a00:	616b      	str	r3, [r5, #20]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9309      	str	r3, [sp, #36]	; 0x24
 8003a06:	2320      	movs	r3, #32
 8003a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a0c:	2330      	movs	r3, #48	; 0x30
 8003a0e:	f04f 0901 	mov.w	r9, #1
 8003a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a16:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003bb8 <_svfiprintf_r+0x1e8>
 8003a1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a1e:	4623      	mov	r3, r4
 8003a20:	469a      	mov	sl, r3
 8003a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a26:	b10a      	cbz	r2, 8003a2c <_svfiprintf_r+0x5c>
 8003a28:	2a25      	cmp	r2, #37	; 0x25
 8003a2a:	d1f9      	bne.n	8003a20 <_svfiprintf_r+0x50>
 8003a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a30:	d00b      	beq.n	8003a4a <_svfiprintf_r+0x7a>
 8003a32:	465b      	mov	r3, fp
 8003a34:	4622      	mov	r2, r4
 8003a36:	4629      	mov	r1, r5
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f7ff ff6f 	bl	800391c <__ssputs_r>
 8003a3e:	3001      	adds	r0, #1
 8003a40:	f000 80a9 	beq.w	8003b96 <_svfiprintf_r+0x1c6>
 8003a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a46:	445a      	add	r2, fp
 8003a48:	9209      	str	r2, [sp, #36]	; 0x24
 8003a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80a1 	beq.w	8003b96 <_svfiprintf_r+0x1c6>
 8003a54:	2300      	movs	r3, #0
 8003a56:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a5e:	f10a 0a01 	add.w	sl, sl, #1
 8003a62:	9304      	str	r3, [sp, #16]
 8003a64:	9307      	str	r3, [sp, #28]
 8003a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a6c:	4654      	mov	r4, sl
 8003a6e:	2205      	movs	r2, #5
 8003a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a74:	4850      	ldr	r0, [pc, #320]	; (8003bb8 <_svfiprintf_r+0x1e8>)
 8003a76:	f000 fa57 	bl	8003f28 <memchr>
 8003a7a:	9a04      	ldr	r2, [sp, #16]
 8003a7c:	b9d8      	cbnz	r0, 8003ab6 <_svfiprintf_r+0xe6>
 8003a7e:	06d0      	lsls	r0, r2, #27
 8003a80:	bf44      	itt	mi
 8003a82:	2320      	movmi	r3, #32
 8003a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a88:	0711      	lsls	r1, r2, #28
 8003a8a:	bf44      	itt	mi
 8003a8c:	232b      	movmi	r3, #43	; 0x2b
 8003a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a92:	f89a 3000 	ldrb.w	r3, [sl]
 8003a96:	2b2a      	cmp	r3, #42	; 0x2a
 8003a98:	d015      	beq.n	8003ac6 <_svfiprintf_r+0xf6>
 8003a9a:	4654      	mov	r4, sl
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f04f 0c0a 	mov.w	ip, #10
 8003aa2:	9a07      	ldr	r2, [sp, #28]
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aaa:	3b30      	subs	r3, #48	; 0x30
 8003aac:	2b09      	cmp	r3, #9
 8003aae:	d94d      	bls.n	8003b4c <_svfiprintf_r+0x17c>
 8003ab0:	b1b0      	cbz	r0, 8003ae0 <_svfiprintf_r+0x110>
 8003ab2:	9207      	str	r2, [sp, #28]
 8003ab4:	e014      	b.n	8003ae0 <_svfiprintf_r+0x110>
 8003ab6:	eba0 0308 	sub.w	r3, r0, r8
 8003aba:	fa09 f303 	lsl.w	r3, r9, r3
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	46a2      	mov	sl, r4
 8003ac2:	9304      	str	r3, [sp, #16]
 8003ac4:	e7d2      	b.n	8003a6c <_svfiprintf_r+0x9c>
 8003ac6:	9b03      	ldr	r3, [sp, #12]
 8003ac8:	1d19      	adds	r1, r3, #4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	9103      	str	r1, [sp, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bfbb      	ittet	lt
 8003ad2:	425b      	neglt	r3, r3
 8003ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ad8:	9307      	strge	r3, [sp, #28]
 8003ada:	9307      	strlt	r3, [sp, #28]
 8003adc:	bfb8      	it	lt
 8003ade:	9204      	strlt	r2, [sp, #16]
 8003ae0:	7823      	ldrb	r3, [r4, #0]
 8003ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ae4:	d10c      	bne.n	8003b00 <_svfiprintf_r+0x130>
 8003ae6:	7863      	ldrb	r3, [r4, #1]
 8003ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8003aea:	d134      	bne.n	8003b56 <_svfiprintf_r+0x186>
 8003aec:	9b03      	ldr	r3, [sp, #12]
 8003aee:	3402      	adds	r4, #2
 8003af0:	1d1a      	adds	r2, r3, #4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	9203      	str	r2, [sp, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bfb8      	it	lt
 8003afa:	f04f 33ff 	movlt.w	r3, #4294967295
 8003afe:	9305      	str	r3, [sp, #20]
 8003b00:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003bbc <_svfiprintf_r+0x1ec>
 8003b04:	2203      	movs	r2, #3
 8003b06:	4650      	mov	r0, sl
 8003b08:	7821      	ldrb	r1, [r4, #0]
 8003b0a:	f000 fa0d 	bl	8003f28 <memchr>
 8003b0e:	b138      	cbz	r0, 8003b20 <_svfiprintf_r+0x150>
 8003b10:	2240      	movs	r2, #64	; 0x40
 8003b12:	9b04      	ldr	r3, [sp, #16]
 8003b14:	eba0 000a 	sub.w	r0, r0, sl
 8003b18:	4082      	lsls	r2, r0
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	3401      	adds	r4, #1
 8003b1e:	9304      	str	r3, [sp, #16]
 8003b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b24:	2206      	movs	r2, #6
 8003b26:	4826      	ldr	r0, [pc, #152]	; (8003bc0 <_svfiprintf_r+0x1f0>)
 8003b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b2c:	f000 f9fc 	bl	8003f28 <memchr>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d038      	beq.n	8003ba6 <_svfiprintf_r+0x1d6>
 8003b34:	4b23      	ldr	r3, [pc, #140]	; (8003bc4 <_svfiprintf_r+0x1f4>)
 8003b36:	bb1b      	cbnz	r3, 8003b80 <_svfiprintf_r+0x1b0>
 8003b38:	9b03      	ldr	r3, [sp, #12]
 8003b3a:	3307      	adds	r3, #7
 8003b3c:	f023 0307 	bic.w	r3, r3, #7
 8003b40:	3308      	adds	r3, #8
 8003b42:	9303      	str	r3, [sp, #12]
 8003b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b46:	4433      	add	r3, r6
 8003b48:	9309      	str	r3, [sp, #36]	; 0x24
 8003b4a:	e768      	b.n	8003a1e <_svfiprintf_r+0x4e>
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	2001      	movs	r0, #1
 8003b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b54:	e7a6      	b.n	8003aa4 <_svfiprintf_r+0xd4>
 8003b56:	2300      	movs	r3, #0
 8003b58:	f04f 0c0a 	mov.w	ip, #10
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	3401      	adds	r4, #1
 8003b60:	9305      	str	r3, [sp, #20]
 8003b62:	4620      	mov	r0, r4
 8003b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b68:	3a30      	subs	r2, #48	; 0x30
 8003b6a:	2a09      	cmp	r2, #9
 8003b6c:	d903      	bls.n	8003b76 <_svfiprintf_r+0x1a6>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0c6      	beq.n	8003b00 <_svfiprintf_r+0x130>
 8003b72:	9105      	str	r1, [sp, #20]
 8003b74:	e7c4      	b.n	8003b00 <_svfiprintf_r+0x130>
 8003b76:	4604      	mov	r4, r0
 8003b78:	2301      	movs	r3, #1
 8003b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b7e:	e7f0      	b.n	8003b62 <_svfiprintf_r+0x192>
 8003b80:	ab03      	add	r3, sp, #12
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	462a      	mov	r2, r5
 8003b86:	4638      	mov	r0, r7
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <_svfiprintf_r+0x1f8>)
 8003b8a:	a904      	add	r1, sp, #16
 8003b8c:	f3af 8000 	nop.w
 8003b90:	1c42      	adds	r2, r0, #1
 8003b92:	4606      	mov	r6, r0
 8003b94:	d1d6      	bne.n	8003b44 <_svfiprintf_r+0x174>
 8003b96:	89ab      	ldrh	r3, [r5, #12]
 8003b98:	065b      	lsls	r3, r3, #25
 8003b9a:	f53f af2d 	bmi.w	80039f8 <_svfiprintf_r+0x28>
 8003b9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ba0:	b01d      	add	sp, #116	; 0x74
 8003ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba6:	ab03      	add	r3, sp, #12
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	462a      	mov	r2, r5
 8003bac:	4638      	mov	r0, r7
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <_svfiprintf_r+0x1f8>)
 8003bb0:	a904      	add	r1, sp, #16
 8003bb2:	f000 f87d 	bl	8003cb0 <_printf_i>
 8003bb6:	e7eb      	b.n	8003b90 <_svfiprintf_r+0x1c0>
 8003bb8:	0800402a 	.word	0x0800402a
 8003bbc:	08004030 	.word	0x08004030
 8003bc0:	08004034 	.word	0x08004034
 8003bc4:	00000000 	.word	0x00000000
 8003bc8:	0800391d 	.word	0x0800391d

08003bcc <_printf_common>:
 8003bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd0:	4616      	mov	r6, r2
 8003bd2:	4699      	mov	r9, r3
 8003bd4:	688a      	ldr	r2, [r1, #8]
 8003bd6:	690b      	ldr	r3, [r1, #16]
 8003bd8:	4607      	mov	r7, r0
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	bfb8      	it	lt
 8003bde:	4613      	movlt	r3, r2
 8003be0:	6033      	str	r3, [r6, #0]
 8003be2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003be6:	460c      	mov	r4, r1
 8003be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bec:	b10a      	cbz	r2, 8003bf2 <_printf_common+0x26>
 8003bee:	3301      	adds	r3, #1
 8003bf0:	6033      	str	r3, [r6, #0]
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	0699      	lsls	r1, r3, #26
 8003bf6:	bf42      	ittt	mi
 8003bf8:	6833      	ldrmi	r3, [r6, #0]
 8003bfa:	3302      	addmi	r3, #2
 8003bfc:	6033      	strmi	r3, [r6, #0]
 8003bfe:	6825      	ldr	r5, [r4, #0]
 8003c00:	f015 0506 	ands.w	r5, r5, #6
 8003c04:	d106      	bne.n	8003c14 <_printf_common+0x48>
 8003c06:	f104 0a19 	add.w	sl, r4, #25
 8003c0a:	68e3      	ldr	r3, [r4, #12]
 8003c0c:	6832      	ldr	r2, [r6, #0]
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	42ab      	cmp	r3, r5
 8003c12:	dc2b      	bgt.n	8003c6c <_printf_common+0xa0>
 8003c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c18:	1e13      	subs	r3, r2, #0
 8003c1a:	6822      	ldr	r2, [r4, #0]
 8003c1c:	bf18      	it	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	0692      	lsls	r2, r2, #26
 8003c22:	d430      	bmi.n	8003c86 <_printf_common+0xba>
 8003c24:	4649      	mov	r1, r9
 8003c26:	4638      	mov	r0, r7
 8003c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c2c:	47c0      	blx	r8
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d023      	beq.n	8003c7a <_printf_common+0xae>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	6922      	ldr	r2, [r4, #16]
 8003c36:	f003 0306 	and.w	r3, r3, #6
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	bf14      	ite	ne
 8003c3e:	2500      	movne	r5, #0
 8003c40:	6833      	ldreq	r3, [r6, #0]
 8003c42:	f04f 0600 	mov.w	r6, #0
 8003c46:	bf08      	it	eq
 8003c48:	68e5      	ldreq	r5, [r4, #12]
 8003c4a:	f104 041a 	add.w	r4, r4, #26
 8003c4e:	bf08      	it	eq
 8003c50:	1aed      	subeq	r5, r5, r3
 8003c52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003c56:	bf08      	it	eq
 8003c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	bfc4      	itt	gt
 8003c60:	1a9b      	subgt	r3, r3, r2
 8003c62:	18ed      	addgt	r5, r5, r3
 8003c64:	42b5      	cmp	r5, r6
 8003c66:	d11a      	bne.n	8003c9e <_printf_common+0xd2>
 8003c68:	2000      	movs	r0, #0
 8003c6a:	e008      	b.n	8003c7e <_printf_common+0xb2>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	4652      	mov	r2, sl
 8003c70:	4649      	mov	r1, r9
 8003c72:	4638      	mov	r0, r7
 8003c74:	47c0      	blx	r8
 8003c76:	3001      	adds	r0, #1
 8003c78:	d103      	bne.n	8003c82 <_printf_common+0xb6>
 8003c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c82:	3501      	adds	r5, #1
 8003c84:	e7c1      	b.n	8003c0a <_printf_common+0x3e>
 8003c86:	2030      	movs	r0, #48	; 0x30
 8003c88:	18e1      	adds	r1, r4, r3
 8003c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c94:	4422      	add	r2, r4
 8003c96:	3302      	adds	r3, #2
 8003c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c9c:	e7c2      	b.n	8003c24 <_printf_common+0x58>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4622      	mov	r2, r4
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	47c0      	blx	r8
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d0e6      	beq.n	8003c7a <_printf_common+0xae>
 8003cac:	3601      	adds	r6, #1
 8003cae:	e7d9      	b.n	8003c64 <_printf_common+0x98>

08003cb0 <_printf_i>:
 8003cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb4:	7e0f      	ldrb	r7, [r1, #24]
 8003cb6:	4691      	mov	r9, r2
 8003cb8:	2f78      	cmp	r7, #120	; 0x78
 8003cba:	4680      	mov	r8, r0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	469a      	mov	sl, r3
 8003cc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cc6:	d807      	bhi.n	8003cd8 <_printf_i+0x28>
 8003cc8:	2f62      	cmp	r7, #98	; 0x62
 8003cca:	d80a      	bhi.n	8003ce2 <_printf_i+0x32>
 8003ccc:	2f00      	cmp	r7, #0
 8003cce:	f000 80d5 	beq.w	8003e7c <_printf_i+0x1cc>
 8003cd2:	2f58      	cmp	r7, #88	; 0x58
 8003cd4:	f000 80c1 	beq.w	8003e5a <_printf_i+0x1aa>
 8003cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ce0:	e03a      	b.n	8003d58 <_printf_i+0xa8>
 8003ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ce6:	2b15      	cmp	r3, #21
 8003ce8:	d8f6      	bhi.n	8003cd8 <_printf_i+0x28>
 8003cea:	a101      	add	r1, pc, #4	; (adr r1, 8003cf0 <_printf_i+0x40>)
 8003cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cf0:	08003d49 	.word	0x08003d49
 8003cf4:	08003d5d 	.word	0x08003d5d
 8003cf8:	08003cd9 	.word	0x08003cd9
 8003cfc:	08003cd9 	.word	0x08003cd9
 8003d00:	08003cd9 	.word	0x08003cd9
 8003d04:	08003cd9 	.word	0x08003cd9
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003cd9 	.word	0x08003cd9
 8003d10:	08003cd9 	.word	0x08003cd9
 8003d14:	08003cd9 	.word	0x08003cd9
 8003d18:	08003cd9 	.word	0x08003cd9
 8003d1c:	08003e63 	.word	0x08003e63
 8003d20:	08003d89 	.word	0x08003d89
 8003d24:	08003e1d 	.word	0x08003e1d
 8003d28:	08003cd9 	.word	0x08003cd9
 8003d2c:	08003cd9 	.word	0x08003cd9
 8003d30:	08003e85 	.word	0x08003e85
 8003d34:	08003cd9 	.word	0x08003cd9
 8003d38:	08003d89 	.word	0x08003d89
 8003d3c:	08003cd9 	.word	0x08003cd9
 8003d40:	08003cd9 	.word	0x08003cd9
 8003d44:	08003e25 	.word	0x08003e25
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	602a      	str	r2, [r5, #0]
 8003d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0a0      	b.n	8003e9e <_printf_i+0x1ee>
 8003d5c:	6820      	ldr	r0, [r4, #0]
 8003d5e:	682b      	ldr	r3, [r5, #0]
 8003d60:	0607      	lsls	r7, r0, #24
 8003d62:	f103 0104 	add.w	r1, r3, #4
 8003d66:	6029      	str	r1, [r5, #0]
 8003d68:	d501      	bpl.n	8003d6e <_printf_i+0xbe>
 8003d6a:	681e      	ldr	r6, [r3, #0]
 8003d6c:	e003      	b.n	8003d76 <_printf_i+0xc6>
 8003d6e:	0646      	lsls	r6, r0, #25
 8003d70:	d5fb      	bpl.n	8003d6a <_printf_i+0xba>
 8003d72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d76:	2e00      	cmp	r6, #0
 8003d78:	da03      	bge.n	8003d82 <_printf_i+0xd2>
 8003d7a:	232d      	movs	r3, #45	; 0x2d
 8003d7c:	4276      	negs	r6, r6
 8003d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d82:	230a      	movs	r3, #10
 8003d84:	4859      	ldr	r0, [pc, #356]	; (8003eec <_printf_i+0x23c>)
 8003d86:	e012      	b.n	8003dae <_printf_i+0xfe>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	6820      	ldr	r0, [r4, #0]
 8003d8c:	1d19      	adds	r1, r3, #4
 8003d8e:	6029      	str	r1, [r5, #0]
 8003d90:	0605      	lsls	r5, r0, #24
 8003d92:	d501      	bpl.n	8003d98 <_printf_i+0xe8>
 8003d94:	681e      	ldr	r6, [r3, #0]
 8003d96:	e002      	b.n	8003d9e <_printf_i+0xee>
 8003d98:	0641      	lsls	r1, r0, #25
 8003d9a:	d5fb      	bpl.n	8003d94 <_printf_i+0xe4>
 8003d9c:	881e      	ldrh	r6, [r3, #0]
 8003d9e:	2f6f      	cmp	r7, #111	; 0x6f
 8003da0:	bf0c      	ite	eq
 8003da2:	2308      	moveq	r3, #8
 8003da4:	230a      	movne	r3, #10
 8003da6:	4851      	ldr	r0, [pc, #324]	; (8003eec <_printf_i+0x23c>)
 8003da8:	2100      	movs	r1, #0
 8003daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dae:	6865      	ldr	r5, [r4, #4]
 8003db0:	2d00      	cmp	r5, #0
 8003db2:	bfa8      	it	ge
 8003db4:	6821      	ldrge	r1, [r4, #0]
 8003db6:	60a5      	str	r5, [r4, #8]
 8003db8:	bfa4      	itt	ge
 8003dba:	f021 0104 	bicge.w	r1, r1, #4
 8003dbe:	6021      	strge	r1, [r4, #0]
 8003dc0:	b90e      	cbnz	r6, 8003dc6 <_printf_i+0x116>
 8003dc2:	2d00      	cmp	r5, #0
 8003dc4:	d04b      	beq.n	8003e5e <_printf_i+0x1ae>
 8003dc6:	4615      	mov	r5, r2
 8003dc8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003dcc:	fb03 6711 	mls	r7, r3, r1, r6
 8003dd0:	5dc7      	ldrb	r7, [r0, r7]
 8003dd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003dd6:	4637      	mov	r7, r6
 8003dd8:	42bb      	cmp	r3, r7
 8003dda:	460e      	mov	r6, r1
 8003ddc:	d9f4      	bls.n	8003dc8 <_printf_i+0x118>
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d10b      	bne.n	8003dfa <_printf_i+0x14a>
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	07de      	lsls	r6, r3, #31
 8003de6:	d508      	bpl.n	8003dfa <_printf_i+0x14a>
 8003de8:	6923      	ldr	r3, [r4, #16]
 8003dea:	6861      	ldr	r1, [r4, #4]
 8003dec:	4299      	cmp	r1, r3
 8003dee:	bfde      	ittt	le
 8003df0:	2330      	movle	r3, #48	; 0x30
 8003df2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003df6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dfa:	1b52      	subs	r2, r2, r5
 8003dfc:	6122      	str	r2, [r4, #16]
 8003dfe:	464b      	mov	r3, r9
 8003e00:	4621      	mov	r1, r4
 8003e02:	4640      	mov	r0, r8
 8003e04:	f8cd a000 	str.w	sl, [sp]
 8003e08:	aa03      	add	r2, sp, #12
 8003e0a:	f7ff fedf 	bl	8003bcc <_printf_common>
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d14a      	bne.n	8003ea8 <_printf_i+0x1f8>
 8003e12:	f04f 30ff 	mov.w	r0, #4294967295
 8003e16:	b004      	add	sp, #16
 8003e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	f043 0320 	orr.w	r3, r3, #32
 8003e22:	6023      	str	r3, [r4, #0]
 8003e24:	2778      	movs	r7, #120	; 0x78
 8003e26:	4832      	ldr	r0, [pc, #200]	; (8003ef0 <_printf_i+0x240>)
 8003e28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	6829      	ldr	r1, [r5, #0]
 8003e30:	061f      	lsls	r7, r3, #24
 8003e32:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e36:	d402      	bmi.n	8003e3e <_printf_i+0x18e>
 8003e38:	065f      	lsls	r7, r3, #25
 8003e3a:	bf48      	it	mi
 8003e3c:	b2b6      	uxthmi	r6, r6
 8003e3e:	07df      	lsls	r7, r3, #31
 8003e40:	bf48      	it	mi
 8003e42:	f043 0320 	orrmi.w	r3, r3, #32
 8003e46:	6029      	str	r1, [r5, #0]
 8003e48:	bf48      	it	mi
 8003e4a:	6023      	strmi	r3, [r4, #0]
 8003e4c:	b91e      	cbnz	r6, 8003e56 <_printf_i+0x1a6>
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	f023 0320 	bic.w	r3, r3, #32
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	2310      	movs	r3, #16
 8003e58:	e7a6      	b.n	8003da8 <_printf_i+0xf8>
 8003e5a:	4824      	ldr	r0, [pc, #144]	; (8003eec <_printf_i+0x23c>)
 8003e5c:	e7e4      	b.n	8003e28 <_printf_i+0x178>
 8003e5e:	4615      	mov	r5, r2
 8003e60:	e7bd      	b.n	8003dde <_printf_i+0x12e>
 8003e62:	682b      	ldr	r3, [r5, #0]
 8003e64:	6826      	ldr	r6, [r4, #0]
 8003e66:	1d18      	adds	r0, r3, #4
 8003e68:	6961      	ldr	r1, [r4, #20]
 8003e6a:	6028      	str	r0, [r5, #0]
 8003e6c:	0635      	lsls	r5, r6, #24
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	d501      	bpl.n	8003e76 <_printf_i+0x1c6>
 8003e72:	6019      	str	r1, [r3, #0]
 8003e74:	e002      	b.n	8003e7c <_printf_i+0x1cc>
 8003e76:	0670      	lsls	r0, r6, #25
 8003e78:	d5fb      	bpl.n	8003e72 <_printf_i+0x1c2>
 8003e7a:	8019      	strh	r1, [r3, #0]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	4615      	mov	r5, r2
 8003e80:	6123      	str	r3, [r4, #16]
 8003e82:	e7bc      	b.n	8003dfe <_printf_i+0x14e>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	2100      	movs	r1, #0
 8003e88:	1d1a      	adds	r2, r3, #4
 8003e8a:	602a      	str	r2, [r5, #0]
 8003e8c:	681d      	ldr	r5, [r3, #0]
 8003e8e:	6862      	ldr	r2, [r4, #4]
 8003e90:	4628      	mov	r0, r5
 8003e92:	f000 f849 	bl	8003f28 <memchr>
 8003e96:	b108      	cbz	r0, 8003e9c <_printf_i+0x1ec>
 8003e98:	1b40      	subs	r0, r0, r5
 8003e9a:	6060      	str	r0, [r4, #4]
 8003e9c:	6863      	ldr	r3, [r4, #4]
 8003e9e:	6123      	str	r3, [r4, #16]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ea6:	e7aa      	b.n	8003dfe <_printf_i+0x14e>
 8003ea8:	462a      	mov	r2, r5
 8003eaa:	4649      	mov	r1, r9
 8003eac:	4640      	mov	r0, r8
 8003eae:	6923      	ldr	r3, [r4, #16]
 8003eb0:	47d0      	blx	sl
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d0ad      	beq.n	8003e12 <_printf_i+0x162>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	079b      	lsls	r3, r3, #30
 8003eba:	d413      	bmi.n	8003ee4 <_printf_i+0x234>
 8003ebc:	68e0      	ldr	r0, [r4, #12]
 8003ebe:	9b03      	ldr	r3, [sp, #12]
 8003ec0:	4298      	cmp	r0, r3
 8003ec2:	bfb8      	it	lt
 8003ec4:	4618      	movlt	r0, r3
 8003ec6:	e7a6      	b.n	8003e16 <_printf_i+0x166>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	4632      	mov	r2, r6
 8003ecc:	4649      	mov	r1, r9
 8003ece:	4640      	mov	r0, r8
 8003ed0:	47d0      	blx	sl
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d09d      	beq.n	8003e12 <_printf_i+0x162>
 8003ed6:	3501      	adds	r5, #1
 8003ed8:	68e3      	ldr	r3, [r4, #12]
 8003eda:	9903      	ldr	r1, [sp, #12]
 8003edc:	1a5b      	subs	r3, r3, r1
 8003ede:	42ab      	cmp	r3, r5
 8003ee0:	dcf2      	bgt.n	8003ec8 <_printf_i+0x218>
 8003ee2:	e7eb      	b.n	8003ebc <_printf_i+0x20c>
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	f104 0619 	add.w	r6, r4, #25
 8003eea:	e7f5      	b.n	8003ed8 <_printf_i+0x228>
 8003eec:	0800403b 	.word	0x0800403b
 8003ef0:	0800404c 	.word	0x0800404c

08003ef4 <memmove>:
 8003ef4:	4288      	cmp	r0, r1
 8003ef6:	b510      	push	{r4, lr}
 8003ef8:	eb01 0402 	add.w	r4, r1, r2
 8003efc:	d902      	bls.n	8003f04 <memmove+0x10>
 8003efe:	4284      	cmp	r4, r0
 8003f00:	4623      	mov	r3, r4
 8003f02:	d807      	bhi.n	8003f14 <memmove+0x20>
 8003f04:	1e43      	subs	r3, r0, #1
 8003f06:	42a1      	cmp	r1, r4
 8003f08:	d008      	beq.n	8003f1c <memmove+0x28>
 8003f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f12:	e7f8      	b.n	8003f06 <memmove+0x12>
 8003f14:	4601      	mov	r1, r0
 8003f16:	4402      	add	r2, r0
 8003f18:	428a      	cmp	r2, r1
 8003f1a:	d100      	bne.n	8003f1e <memmove+0x2a>
 8003f1c:	bd10      	pop	{r4, pc}
 8003f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f26:	e7f7      	b.n	8003f18 <memmove+0x24>

08003f28 <memchr>:
 8003f28:	4603      	mov	r3, r0
 8003f2a:	b510      	push	{r4, lr}
 8003f2c:	b2c9      	uxtb	r1, r1
 8003f2e:	4402      	add	r2, r0
 8003f30:	4293      	cmp	r3, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	d101      	bne.n	8003f3a <memchr+0x12>
 8003f36:	2000      	movs	r0, #0
 8003f38:	e003      	b.n	8003f42 <memchr+0x1a>
 8003f3a:	7804      	ldrb	r4, [r0, #0]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	428c      	cmp	r4, r1
 8003f40:	d1f6      	bne.n	8003f30 <memchr+0x8>
 8003f42:	bd10      	pop	{r4, pc}

08003f44 <memcpy>:
 8003f44:	440a      	add	r2, r1
 8003f46:	4291      	cmp	r1, r2
 8003f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f4c:	d100      	bne.n	8003f50 <memcpy+0xc>
 8003f4e:	4770      	bx	lr
 8003f50:	b510      	push	{r4, lr}
 8003f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f56:	4291      	cmp	r1, r2
 8003f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f5c:	d1f9      	bne.n	8003f52 <memcpy+0xe>
 8003f5e:	bd10      	pop	{r4, pc}

08003f60 <_realloc_r>:
 8003f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f64:	4680      	mov	r8, r0
 8003f66:	4614      	mov	r4, r2
 8003f68:	460e      	mov	r6, r1
 8003f6a:	b921      	cbnz	r1, 8003f76 <_realloc_r+0x16>
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f72:	f7ff bb9b 	b.w	80036ac <_malloc_r>
 8003f76:	b92a      	cbnz	r2, 8003f84 <_realloc_r+0x24>
 8003f78:	f7ff fc88 	bl	800388c <_free_r>
 8003f7c:	4625      	mov	r5, r4
 8003f7e:	4628      	mov	r0, r5
 8003f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f84:	f000 f81b 	bl	8003fbe <_malloc_usable_size_r>
 8003f88:	4284      	cmp	r4, r0
 8003f8a:	4607      	mov	r7, r0
 8003f8c:	d802      	bhi.n	8003f94 <_realloc_r+0x34>
 8003f8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f92:	d812      	bhi.n	8003fba <_realloc_r+0x5a>
 8003f94:	4621      	mov	r1, r4
 8003f96:	4640      	mov	r0, r8
 8003f98:	f7ff fb88 	bl	80036ac <_malloc_r>
 8003f9c:	4605      	mov	r5, r0
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	d0ed      	beq.n	8003f7e <_realloc_r+0x1e>
 8003fa2:	42bc      	cmp	r4, r7
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	bf28      	it	cs
 8003faa:	463a      	movcs	r2, r7
 8003fac:	f7ff ffca 	bl	8003f44 <memcpy>
 8003fb0:	4631      	mov	r1, r6
 8003fb2:	4640      	mov	r0, r8
 8003fb4:	f7ff fc6a 	bl	800388c <_free_r>
 8003fb8:	e7e1      	b.n	8003f7e <_realloc_r+0x1e>
 8003fba:	4635      	mov	r5, r6
 8003fbc:	e7df      	b.n	8003f7e <_realloc_r+0x1e>

08003fbe <_malloc_usable_size_r>:
 8003fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc2:	1f18      	subs	r0, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bfbc      	itt	lt
 8003fc8:	580b      	ldrlt	r3, [r1, r0]
 8003fca:	18c0      	addlt	r0, r0, r3
 8003fcc:	4770      	bx	lr
	...

08003fd0 <_init>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	bf00      	nop
 8003fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd6:	bc08      	pop	{r3}
 8003fd8:	469e      	mov	lr, r3
 8003fda:	4770      	bx	lr

08003fdc <_fini>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	bf00      	nop
 8003fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe2:	bc08      	pop	{r3}
 8003fe4:	469e      	mov	lr, r3
 8003fe6:	4770      	bx	lr
