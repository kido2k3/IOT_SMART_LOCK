
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb8  08002eb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb8  08002eb8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb8  08002eb8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08002ecc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08002ecc  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fdde  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002544  00000000  00000000  0002fe56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  000323a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c60  00000000  00000000  00033350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a2b  00000000  00000000  00033fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139d0  00000000  00000000  0004c9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cc17  00000000  00000000  000603ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041bc  00000000  00000000  000ecfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f1180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e74 	.word	0x08002e74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002e74 	.word	0x08002e74

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc20 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f811 	bl	800017a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f942 	bl	80003e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f876 	bl	800024c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000160:	f000 f846 	bl	80001f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f8be 	bl	80002e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000168:	f000 f8e6 	bl	8000338 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800016c:	f000 f90e 	bl	800038c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000170:	f000 fa16 	bl	80005a0 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000174:	f000 fa1a 	bl	80005ac <loop>
 8000178:	e7fc      	b.n	8000174 <main+0x28>

0800017a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b090      	sub	sp, #64	; 0x40
 800017e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000180:	f107 0318 	add.w	r3, r7, #24
 8000184:	2228      	movs	r2, #40	; 0x28
 8000186:	2100      	movs	r1, #0
 8000188:	4618      	mov	r0, r3
 800018a:	f002 fe47 	bl	8002e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019c:	2302      	movs	r3, #2
 800019e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a0:	2301      	movs	r3, #1
 80001a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a4:	2310      	movs	r3, #16
 80001a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001a8:	2300      	movs	r3, #0
 80001aa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ac:	f107 0318 	add.w	r3, r7, #24
 80001b0:	4618      	mov	r0, r3
 80001b2:	f001 f8f1 	bl	8001398 <HAL_RCC_OscConfig>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001bc:	f000 f98c 	bl	80004d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c0:	230f      	movs	r3, #15
 80001c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c8:	2300      	movs	r3, #0
 80001ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2100      	movs	r1, #0
 80001d8:	4618      	mov	r0, r3
 80001da:	f001 fb5f 	bl	800189c <HAL_RCC_ClockConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001e4:	f000 f978 	bl	80004d8 <Error_Handler>
  }
}
 80001e8:	bf00      	nop
 80001ea:	3740      	adds	r7, #64	; 0x40
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001f4:	4b12      	ldr	r3, [pc, #72]	; (8000240 <MX_I2C1_Init+0x50>)
 80001f6:	4a13      	ldr	r2, [pc, #76]	; (8000244 <MX_I2C1_Init+0x54>)
 80001f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001fa:	4b11      	ldr	r3, [pc, #68]	; (8000240 <MX_I2C1_Init+0x50>)
 80001fc:	4a12      	ldr	r2, [pc, #72]	; (8000248 <MX_I2C1_Init+0x58>)
 80001fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000200:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <MX_I2C1_Init+0x50>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000206:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <MX_I2C1_Init+0x50>)
 8000208:	2200      	movs	r2, #0
 800020a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800020c:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <MX_I2C1_Init+0x50>)
 800020e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000212:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <MX_I2C1_Init+0x50>)
 8000216:	2200      	movs	r2, #0
 8000218:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <MX_I2C1_Init+0x50>)
 800021c:	2200      	movs	r2, #0
 800021e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <MX_I2C1_Init+0x50>)
 8000222:	2200      	movs	r2, #0
 8000224:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <MX_I2C1_Init+0x50>)
 8000228:	2200      	movs	r2, #0
 800022a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <MX_I2C1_Init+0x50>)
 800022e:	f000 ff6f 	bl	8001110 <HAL_I2C_Init>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000238:	f000 f94e 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20000028 	.word	0x20000028
 8000244:	40005400 	.word	0x40005400
 8000248:	000186a0 	.word	0x000186a0

0800024c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000252:	f107 0308 	add.w	r3, r7, #8
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_TIM2_Init+0x94>)
 800026a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <MX_TIM2_Init+0x94>)
 8000272:	2207      	movs	r2, #7
 8000274:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000276:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_TIM2_Init+0x94>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800027c:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <MX_TIM2_Init+0x94>)
 800027e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000282:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <MX_TIM2_Init+0x94>)
 8000286:	2200      	movs	r2, #0
 8000288:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_TIM2_Init+0x94>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000290:	4813      	ldr	r0, [pc, #76]	; (80002e0 <MX_TIM2_Init+0x94>)
 8000292:	f001 fc91 	bl	8001bb8 <HAL_TIM_Base_Init>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800029c:	f000 f91c 	bl	80004d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002a6:	f107 0308 	add.w	r3, r7, #8
 80002aa:	4619      	mov	r1, r3
 80002ac:	480c      	ldr	r0, [pc, #48]	; (80002e0 <MX_TIM2_Init+0x94>)
 80002ae:	f001 fdda 	bl	8001e66 <HAL_TIM_ConfigClockSource>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002b8:	f000 f90e 	bl	80004d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002bc:	2300      	movs	r3, #0
 80002be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002c4:	463b      	mov	r3, r7
 80002c6:	4619      	mov	r1, r3
 80002c8:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_TIM2_Init+0x94>)
 80002ca:	f001 ffaf 	bl	800222c <HAL_TIMEx_MasterConfigSynchronization>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002d4:	f000 f900 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002d8:	bf00      	nop
 80002da:	3718      	adds	r7, #24
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	2000007c 	.word	0x2000007c

080002e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 80002ea:	4a12      	ldr	r2, [pc, #72]	; (8000334 <MX_USART1_UART_Init+0x50>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 80002f0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80002f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 80002fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000302:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 800030c:	220c      	movs	r2, #12
 800030e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000310:	4b07      	ldr	r3, [pc, #28]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 800031e:	f001 fff5 	bl	800230c <HAL_UART_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000328:	f000 f8d6 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	200000c4 	.word	0x200000c4
 8000334:	40013800 	.word	0x40013800

08000338 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_USART2_UART_Init+0x4c>)
 800033e:	4a12      	ldr	r2, [pc, #72]	; (8000388 <MX_USART2_UART_Init+0x50>)
 8000340:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <MX_USART2_UART_Init+0x4c>)
 8000344:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000348:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_USART2_UART_Init+0x4c>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_USART2_UART_Init+0x4c>)
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_USART2_UART_Init+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_USART2_UART_Init+0x4c>)
 800035e:	220c      	movs	r2, #12
 8000360:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_USART2_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_USART2_UART_Init+0x4c>)
 800036a:	2200      	movs	r2, #0
 800036c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_USART2_UART_Init+0x4c>)
 8000370:	f001 ffcc 	bl	800230c <HAL_UART_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800037a:	f000 f8ad 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	2000010c 	.word	0x2000010c
 8000388:	40004400 	.word	0x40004400

0800038c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_USART3_UART_Init+0x4c>)
 8000392:	4a12      	ldr	r2, [pc, #72]	; (80003dc <MX_USART3_UART_Init+0x50>)
 8000394:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_USART3_UART_Init+0x4c>)
 8000398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800039c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_USART3_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_USART3_UART_Init+0x4c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <MX_USART3_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_USART3_UART_Init+0x4c>)
 80003b2:	220c      	movs	r2, #12
 80003b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <MX_USART3_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_USART3_UART_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003c2:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_USART3_UART_Init+0x4c>)
 80003c4:	f001 ffa2 	bl	800230c <HAL_UART_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80003ce:	f000 f883 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000154 	.word	0x20000154
 80003dc:	40004800 	.word	0x40004800

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f4:	4b34      	ldr	r3, [pc, #208]	; (80004c8 <MX_GPIO_Init+0xe8>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a33      	ldr	r2, [pc, #204]	; (80004c8 <MX_GPIO_Init+0xe8>)
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b31      	ldr	r3, [pc, #196]	; (80004c8 <MX_GPIO_Init+0xe8>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0310 	and.w	r3, r3, #16
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040c:	4b2e      	ldr	r3, [pc, #184]	; (80004c8 <MX_GPIO_Init+0xe8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a2d      	ldr	r2, [pc, #180]	; (80004c8 <MX_GPIO_Init+0xe8>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b2b      	ldr	r3, [pc, #172]	; (80004c8 <MX_GPIO_Init+0xe8>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0304 	and.w	r3, r3, #4
 8000420:	60bb      	str	r3, [r7, #8]
 8000422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <MX_GPIO_Init+0xe8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a27      	ldr	r2, [pc, #156]	; (80004c8 <MX_GPIO_Init+0xe8>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b25      	ldr	r3, [pc, #148]	; (80004c8 <MX_GPIO_Init+0xe8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000442:	4822      	ldr	r0, [pc, #136]	; (80004cc <MX_GPIO_Init+0xec>)
 8000444:	f000 fe4c 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f243 0102 	movw	r1, #12290	; 0x3002
 800044e:	4820      	ldr	r0, [pc, #128]	; (80004d0 <MX_GPIO_Init+0xf0>)
 8000450:	f000 fe46 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045a:	2301      	movs	r3, #1
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000462:	2302      	movs	r3, #2
 8000464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	4619      	mov	r1, r3
 800046c:	4817      	ldr	r0, [pc, #92]	; (80004cc <MX_GPIO_Init+0xec>)
 800046e:	f000 fcb3 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000472:	2310      	movs	r3, #16
 8000474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800047a:	2301      	movs	r3, #1
 800047c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	4619      	mov	r1, r3
 8000484:	4813      	ldr	r0, [pc, #76]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000486:	f000 fca7 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800048a:	2301      	movs	r3, #1
 800048c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000492:	2301      	movs	r3, #1
 8000494:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	480c      	ldr	r0, [pc, #48]	; (80004d0 <MX_GPIO_Init+0xf0>)
 800049e:	f000 fc9b 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13;
 80004a2:	f243 0302 	movw	r3, #12290	; 0x3002
 80004a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2302      	movs	r3, #2
 80004b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_GPIO_Init+0xf0>)
 80004bc:	f000 fc8c 	bl	8000dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40011000 	.word	0x40011000
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	40010800 	.word	0x40010800

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
}
 80004de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <Error_Handler+0x8>

080004e2 <fp_init>:
static bool check_respone_search(void);
static void build_ins(uint8_t code, uint8_t data_len, uint8_t *data);
static void send_ins(void);
static void get_finger(uint8_t time);
static bool merge_finger(void);
void fp_init(void) {
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
	uart_fp_init();
 80004e6:	f000 f867 	bl	80005b8 <uart_fp_init>
//	uint8_t data[4] = { PASSWORD };
//	build_ins(INS_VFY_PWD, 4, data);
//	send_ins();
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <fp_receive_data>:
	for (uint8_t i = 0; i < ins_len; i++) {
		HAL_UART_Transmit(&huart1, ins + i, 1, 100);
	}
}

void fp_receive_data(uint8_t data) {
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
	from_sensor[idx++] = data;
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <fp_receive_data+0x4c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	b2d1      	uxtb	r1, r2
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <fp_receive_data+0x4c>)
 8000504:	7011      	strb	r1, [r2, #0]
 8000506:	4619      	mov	r1, r3
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <fp_receive_data+0x50>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	5453      	strb	r3, [r2, r1]
	uint8_t ack_len;
	if (ins_search_flag) {
 800050e:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <fp_receive_data+0x54>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <fp_receive_data+0x2c>
		ack_len = ACK_LEN_16;
 8000516:	2310      	movs	r3, #16
 8000518:	73fb      	strb	r3, [r7, #15]
 800051a:	e001      	b.n	8000520 <fp_receive_data+0x30>
	} else {
		ack_len = ACK_LEN_12;
 800051c:	230c      	movs	r3, #12
 800051e:	73fb      	strb	r3, [r7, #15]
	}
	if (idx >= ack_len) {
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <fp_receive_data+0x4c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	7bfa      	ldrb	r2, [r7, #15]
 8000526:	429a      	cmp	r2, r3
 8000528:	d802      	bhi.n	8000530 <fp_receive_data+0x40>
		receive_flag = 1;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <fp_receive_data+0x58>)
 800052c:	2201      	movs	r2, #1
 800052e:	701a      	strb	r2, [r3, #0]
	}
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	200001b4 	.word	0x200001b4
 8000540:	200001a0 	.word	0x200001a0
 8000544:	2000019d 	.word	0x2000019d
 8000548:	2000019c 	.word	0x2000019c

0800054c <HAL_TIM_PeriodElapsedCallback>:
//******************START TIMER*********************
extern TIM_HandleTypeDef htim2;
void sch_init(void) {
	HAL_TIM_Base_Start_IT(&htim2);
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	429a      	cmp	r2, r3
 800055e:	d101      	bne.n	8000564 <HAL_TIM_PeriodElapsedCallback+0x18>
		sch_update();
 8000560:	f000 f806 	bl	8000570 <sch_update>
	}
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000007c 	.word	0x2000007c

08000570 <sch_update>:
/*
 * @brief:	decrease the remaining time of the top task
 * @para:	none
 * @retval:	none
 * */
void sch_update(void) {
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	if (stack_task.top == 0)
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <sch_update+0x2c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00b      	beq.n	8000594 <sch_update+0x24>
		return;
	if (stack_task.top->counter > 0) {
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <sch_update+0x2c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	889b      	ldrh	r3, [r3, #4]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d007      	beq.n	8000596 <sch_update+0x26>
		stack_task.top->counter--;
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <sch_update+0x2c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	889a      	ldrh	r2, [r3, #4]
 800058c:	3a01      	subs	r2, #1
 800058e:	b292      	uxth	r2, r2
 8000590:	809a      	strh	r2, [r3, #4]
 8000592:	e000      	b.n	8000596 <sch_update+0x26>
		return;
 8000594:	bf00      	nop
	}
}
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	200001b8 	.word	0x200001b8

080005a0 <init>:
static void test_lock(void) {
	sch_add_task(lock_open, 0, 0);
	sch_add_task(lock_close, 5000, 0);
}
#endif
void init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
//	LCD_Init();
//	LCD_Clear();
//	keypad_init();
//	sch_add_task(keypad_read, 0, 75);
//	sch_add_task(fsm_lock, 0, 10);
	fp_init();
 80005a4:	f7ff ff9d 	bl	80004e2 <fp_init>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <loop>:

void loop(void) {
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	//sch_dispatch();

}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <uart_fp_init>:

extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;

static uint8_t uart_data;
void uart_fp_init(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &uart_data, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	4903      	ldr	r1, [pc, #12]	; (80005cc <uart_fp_init+0x14>)
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <uart_fp_init+0x18>)
 80005c2:	f001 fef3 	bl	80023ac <HAL_UART_Receive_IT>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200001bc 	.word	0x200001bc
 80005d0:	200000c4 	.word	0x200000c4

080005d4 <HAL_UART_RxCpltCallback>:
void uart_SendPressedKey(uint8_t key) {
	char str[30];
	uint8_t len = sprintf(str,"#Key:%u!\n",key);
	HAL_UART_Transmit(&huart2, (void*)str, len, 10);
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <HAL_UART_RxCpltCallback+0x30>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d109      	bne.n	80005fc <HAL_UART_RxCpltCallback+0x28>
		fp_receive_data(uart_data);
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <HAL_UART_RxCpltCallback+0x34>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff7f 	bl	80004f0 <fp_receive_data>
		HAL_UART_Receive_IT(&huart1, &uart_data, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	4904      	ldr	r1, [pc, #16]	; (8000608 <HAL_UART_RxCpltCallback+0x34>)
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <HAL_UART_RxCpltCallback+0x30>)
 80005f8:	f001 fed8 	bl	80023ac <HAL_UART_Receive_IT>
	}
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000c4 	.word	0x200000c4
 8000608:	200001bc 	.word	0x200001bc

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_MspInit+0x5c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <HAL_MspInit+0x5c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6193      	str	r3, [r2, #24]
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_MspInit+0x5c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <HAL_MspInit+0x5c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <HAL_MspInit+0x5c>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_MspInit+0x5c>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <HAL_MspInit+0x60>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <HAL_MspInit+0x60>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	40021000 	.word	0x40021000
 800066c:	40010000 	.word	0x40010000

08000670 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a15      	ldr	r2, [pc, #84]	; (80006e0 <HAL_I2C_MspInit+0x70>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d123      	bne.n	80006d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_I2C_MspInit+0x74>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <HAL_I2C_MspInit+0x74>)
 8000696:	f043 0308 	orr.w	r3, r3, #8
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_I2C_MspInit+0x74>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0308 	and.w	r3, r3, #8
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006a8:	23c0      	movs	r3, #192	; 0xc0
 80006aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ac:	2312      	movs	r3, #18
 80006ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <HAL_I2C_MspInit+0x78>)
 80006bc:	f000 fb8c 	bl	8000dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <HAL_I2C_MspInit+0x74>)
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_I2C_MspInit+0x74>)
 80006c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ca:	61d3      	str	r3, [r2, #28]
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_I2C_MspInit+0x74>)
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40005400 	.word	0x40005400
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010c00 	.word	0x40010c00

080006ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006fc:	d113      	bne.n	8000726 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_TIM_Base_MspInit+0x44>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <HAL_TIM_Base_MspInit+0x44>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_TIM_Base_MspInit+0x44>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	201c      	movs	r0, #28
 800071c:	f000 fa73 	bl	8000c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000720:	201c      	movs	r0, #28
 8000722:	f000 fa8c 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a57      	ldr	r2, [pc, #348]	; (80008ac <HAL_UART_MspInit+0x178>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d13a      	bne.n	80007ca <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000754:	4b56      	ldr	r3, [pc, #344]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a55      	ldr	r2, [pc, #340]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b53      	ldr	r3, [pc, #332]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000768:	61fb      	str	r3, [r7, #28]
 800076a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b50      	ldr	r3, [pc, #320]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a4f      	ldr	r2, [pc, #316]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b4d      	ldr	r3, [pc, #308]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	4619      	mov	r1, r3
 8000798:	4846      	ldr	r0, [pc, #280]	; (80008b4 <HAL_UART_MspInit+0x180>)
 800079a:	f000 fb1d 	bl	8000dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800079e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4619      	mov	r1, r3
 80007b2:	4840      	ldr	r0, [pc, #256]	; (80008b4 <HAL_UART_MspInit+0x180>)
 80007b4:	f000 fb10 	bl	8000dd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	2025      	movs	r0, #37	; 0x25
 80007be:	f000 fa22 	bl	8000c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007c2:	2025      	movs	r0, #37	; 0x25
 80007c4:	f000 fa3b 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007c8:	e06c      	b.n	80008a4 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a3a      	ldr	r2, [pc, #232]	; (80008b8 <HAL_UART_MspInit+0x184>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d130      	bne.n	8000836 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 80007d6:	69db      	ldr	r3, [r3, #28]
 80007d8:	4a35      	ldr	r2, [pc, #212]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 80007da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007de:	61d3      	str	r3, [r2, #28]
 80007e0:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a2f      	ldr	r2, [pc, #188]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000804:	2304      	movs	r3, #4
 8000806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	4619      	mov	r1, r3
 8000816:	4827      	ldr	r0, [pc, #156]	; (80008b4 <HAL_UART_MspInit+0x180>)
 8000818:	f000 fade 	bl	8000dd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800081c:	2308      	movs	r3, #8
 800081e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	4619      	mov	r1, r3
 800082e:	4821      	ldr	r0, [pc, #132]	; (80008b4 <HAL_UART_MspInit+0x180>)
 8000830:	f000 fad2 	bl	8000dd8 <HAL_GPIO_Init>
}
 8000834:	e036      	b.n	80008a4 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a20      	ldr	r2, [pc, #128]	; (80008bc <HAL_UART_MspInit+0x188>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d131      	bne.n	80008a4 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 8000842:	69db      	ldr	r3, [r3, #28]
 8000844:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 8000846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800084a:	61d3      	str	r3, [r2, #28]
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_UART_MspInit+0x17c>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	4619      	mov	r1, r3
 8000884:	480e      	ldr	r0, [pc, #56]	; (80008c0 <HAL_UART_MspInit+0x18c>)
 8000886:	f000 faa7 	bl	8000dd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800088a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800088e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	4619      	mov	r1, r3
 800089e:	4808      	ldr	r0, [pc, #32]	; (80008c0 <HAL_UART_MspInit+0x18c>)
 80008a0:	f000 fa9a 	bl	8000dd8 <HAL_GPIO_Init>
}
 80008a4:	bf00      	nop
 80008a6:	3730      	adds	r7, #48	; 0x30
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40013800 	.word	0x40013800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010800 	.word	0x40010800
 80008b8:	40004400 	.word	0x40004400
 80008bc:	40004800 	.word	0x40004800
 80008c0:	40010c00 	.word	0x40010c00

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090a:	f000 f889 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <TIM2_IRQHandler+0x10>)
 800091a:	f001 f99c 	bl	8001c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2000007c 	.word	0x2000007c

08000928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <USART1_IRQHandler+0x10>)
 800092e:	f001 fd63 	bl	80023f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000c4 	.word	0x200000c4

0800093c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000948:	f7ff fff8 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800094e:	490c      	ldr	r1, [pc, #48]	; (8000980 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a09      	ldr	r2, [pc, #36]	; (8000988 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000964:	4c09      	ldr	r4, [pc, #36]	; (800098c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000972:	f002 fa5b 	bl	8002e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000976:	f7ff fbe9 	bl	800014c <main>
  bx lr
 800097a:	4770      	bx	lr
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000984:	08002ec0 	.word	0x08002ec0
  ldr r2, =_sbss
 8000988:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800098c:	200001c4 	.word	0x200001c4

08000990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_2_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_Init+0x28>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_Init+0x28>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f923 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 f808 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fe2c 	bl	800060c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40022000 	.word	0x40022000

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f93b 	bl	8000c5a <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f000 f903 	bl	8000c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x1c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x20>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_IncTick+0x20>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	200001c0 	.word	0x200001c0

08000a44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <HAL_GetTick+0x10>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	200001c0 	.word	0x200001c0

08000a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db0b      	blt.n	8000ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f003 021f 	and.w	r2, r3, #31
 8000ad4:	4906      	ldr	r1, [pc, #24]	; (8000af0 <__NVIC_EnableIRQ+0x34>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	2001      	movs	r0, #1
 8000ade:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f7ff ff90 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff2d 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff42 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff90 	bl	8000b48 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5f 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff35 	bl	8000abc <__NVIC_EnableIRQ>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffa2 	bl	8000bac <SysTick_Config>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b085      	sub	sp, #20
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d008      	beq.n	8000c9c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e020      	b.n	8000cde <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f022 020e 	bic.w	r2, r2, #14
 8000caa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 0201 	bic.w	r2, r2, #1
 8000cba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d005      	beq.n	8000d0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2204      	movs	r2, #4
 8000d04:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	e051      	b.n	8000db0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 020e 	bic.w	r2, r2, #14
 8000d1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 0201 	bic.w	r2, r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <HAL_DMA_Abort_IT+0xd4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d029      	beq.n	8000d8a <HAL_DMA_Abort_IT+0xa2>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <HAL_DMA_Abort_IT+0xd8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d022      	beq.n	8000d86 <HAL_DMA_Abort_IT+0x9e>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a1f      	ldr	r2, [pc, #124]	; (8000dc4 <HAL_DMA_Abort_IT+0xdc>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d01a      	beq.n	8000d80 <HAL_DMA_Abort_IT+0x98>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <HAL_DMA_Abort_IT+0xe0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d012      	beq.n	8000d7a <HAL_DMA_Abort_IT+0x92>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <HAL_DMA_Abort_IT+0xe4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00a      	beq.n	8000d74 <HAL_DMA_Abort_IT+0x8c>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <HAL_DMA_Abort_IT+0xe8>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d102      	bne.n	8000d6e <HAL_DMA_Abort_IT+0x86>
 8000d68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d6c:	e00e      	b.n	8000d8c <HAL_DMA_Abort_IT+0xa4>
 8000d6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d72:	e00b      	b.n	8000d8c <HAL_DMA_Abort_IT+0xa4>
 8000d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d78:	e008      	b.n	8000d8c <HAL_DMA_Abort_IT+0xa4>
 8000d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7e:	e005      	b.n	8000d8c <HAL_DMA_Abort_IT+0xa4>
 8000d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d84:	e002      	b.n	8000d8c <HAL_DMA_Abort_IT+0xa4>
 8000d86:	2310      	movs	r3, #16
 8000d88:	e000      	b.n	8000d8c <HAL_DMA_Abort_IT+0xa4>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <HAL_DMA_Abort_IT+0xec>)
 8000d8e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	4798      	blx	r3
    } 
  }
  return status;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40020008 	.word	0x40020008
 8000dc0:	4002001c 	.word	0x4002001c
 8000dc4:	40020030 	.word	0x40020030
 8000dc8:	40020044 	.word	0x40020044
 8000dcc:	40020058 	.word	0x40020058
 8000dd0:	4002006c 	.word	0x4002006c
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b08b      	sub	sp, #44	; 0x2c
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dea:	e169      	b.n	80010c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dec:	2201      	movs	r2, #1
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	f040 8158 	bne.w	80010ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	4a9a      	ldr	r2, [pc, #616]	; (8001078 <HAL_GPIO_Init+0x2a0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d05e      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e14:	4a98      	ldr	r2, [pc, #608]	; (8001078 <HAL_GPIO_Init+0x2a0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d875      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e1a:	4a98      	ldr	r2, [pc, #608]	; (800107c <HAL_GPIO_Init+0x2a4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d058      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e20:	4a96      	ldr	r2, [pc, #600]	; (800107c <HAL_GPIO_Init+0x2a4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d86f      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e26:	4a96      	ldr	r2, [pc, #600]	; (8001080 <HAL_GPIO_Init+0x2a8>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d052      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e2c:	4a94      	ldr	r2, [pc, #592]	; (8001080 <HAL_GPIO_Init+0x2a8>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d869      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e32:	4a94      	ldr	r2, [pc, #592]	; (8001084 <HAL_GPIO_Init+0x2ac>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d04c      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e38:	4a92      	ldr	r2, [pc, #584]	; (8001084 <HAL_GPIO_Init+0x2ac>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d863      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e3e:	4a92      	ldr	r2, [pc, #584]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d046      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e44:	4a90      	ldr	r2, [pc, #576]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d85d      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d82a      	bhi.n	8000ea4 <HAL_GPIO_Init+0xcc>
 8000e4e:	2b12      	cmp	r3, #18
 8000e50:	d859      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <HAL_GPIO_Init+0x80>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000ed3 	.word	0x08000ed3
 8000e5c:	08000ead 	.word	0x08000ead
 8000e60:	08000ebf 	.word	0x08000ebf
 8000e64:	08000f01 	.word	0x08000f01
 8000e68:	08000f07 	.word	0x08000f07
 8000e6c:	08000f07 	.word	0x08000f07
 8000e70:	08000f07 	.word	0x08000f07
 8000e74:	08000f07 	.word	0x08000f07
 8000e78:	08000f07 	.word	0x08000f07
 8000e7c:	08000f07 	.word	0x08000f07
 8000e80:	08000f07 	.word	0x08000f07
 8000e84:	08000f07 	.word	0x08000f07
 8000e88:	08000f07 	.word	0x08000f07
 8000e8c:	08000f07 	.word	0x08000f07
 8000e90:	08000f07 	.word	0x08000f07
 8000e94:	08000f07 	.word	0x08000f07
 8000e98:	08000f07 	.word	0x08000f07
 8000e9c:	08000eb5 	.word	0x08000eb5
 8000ea0:	08000ec9 	.word	0x08000ec9
 8000ea4:	4a79      	ldr	r2, [pc, #484]	; (800108c <HAL_GPIO_Init+0x2b4>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d013      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eaa:	e02c      	b.n	8000f06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	623b      	str	r3, [r7, #32]
          break;
 8000eb2:	e029      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	623b      	str	r3, [r7, #32]
          break;
 8000ebc:	e024      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	3308      	adds	r3, #8
 8000ec4:	623b      	str	r3, [r7, #32]
          break;
 8000ec6:	e01f      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	330c      	adds	r3, #12
 8000ece:	623b      	str	r3, [r7, #32]
          break;
 8000ed0:	e01a      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d102      	bne.n	8000ee0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eda:	2304      	movs	r3, #4
 8000edc:	623b      	str	r3, [r7, #32]
          break;
 8000ede:	e013      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d105      	bne.n	8000ef4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	611a      	str	r2, [r3, #16]
          break;
 8000ef2:	e009      	b.n	8000f08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	615a      	str	r2, [r3, #20]
          break;
 8000efe:	e003      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
          break;
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          break;
 8000f06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	2bff      	cmp	r3, #255	; 0xff
 8000f0c:	d801      	bhi.n	8000f12 <HAL_GPIO_Init+0x13a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	e001      	b.n	8000f16 <HAL_GPIO_Init+0x13e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3304      	adds	r3, #4
 8000f16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2bff      	cmp	r3, #255	; 0xff
 8000f1c:	d802      	bhi.n	8000f24 <HAL_GPIO_Init+0x14c>
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	e002      	b.n	8000f2a <HAL_GPIO_Init+0x152>
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	3b08      	subs	r3, #8
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	210f      	movs	r1, #15
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	6a39      	ldr	r1, [r7, #32]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	431a      	orrs	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 80b1 	beq.w	80010ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <HAL_GPIO_Init+0x2b8>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a4c      	ldr	r2, [pc, #304]	; (8001090 <HAL_GPIO_Init+0x2b8>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <HAL_GPIO_Init+0x2b8>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f70:	4a48      	ldr	r2, [pc, #288]	; (8001094 <HAL_GPIO_Init+0x2bc>)
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a40      	ldr	r2, [pc, #256]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d013      	beq.n	8000fc4 <HAL_GPIO_Init+0x1ec>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a3f      	ldr	r2, [pc, #252]	; (800109c <HAL_GPIO_Init+0x2c4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d00d      	beq.n	8000fc0 <HAL_GPIO_Init+0x1e8>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a3e      	ldr	r2, [pc, #248]	; (80010a0 <HAL_GPIO_Init+0x2c8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d007      	beq.n	8000fbc <HAL_GPIO_Init+0x1e4>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a3d      	ldr	r2, [pc, #244]	; (80010a4 <HAL_GPIO_Init+0x2cc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d101      	bne.n	8000fb8 <HAL_GPIO_Init+0x1e0>
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e006      	b.n	8000fc6 <HAL_GPIO_Init+0x1ee>
 8000fb8:	2304      	movs	r3, #4
 8000fba:	e004      	b.n	8000fc6 <HAL_GPIO_Init+0x1ee>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e002      	b.n	8000fc6 <HAL_GPIO_Init+0x1ee>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <HAL_GPIO_Init+0x1ee>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc8:	f002 0203 	and.w	r2, r2, #3
 8000fcc:	0092      	lsls	r2, r2, #2
 8000fce:	4093      	lsls	r3, r2
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fd6:	492f      	ldr	r1, [pc, #188]	; (8001094 <HAL_GPIO_Init+0x2bc>)
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	492c      	ldr	r1, [pc, #176]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	608b      	str	r3, [r1, #8]
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	43db      	mvns	r3, r3
 8001006:	4928      	ldr	r1, [pc, #160]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001008:	4013      	ands	r3, r2
 800100a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	4922      	ldr	r1, [pc, #136]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	60cb      	str	r3, [r1, #12]
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	43db      	mvns	r3, r3
 800102e:	491e      	ldr	r1, [pc, #120]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001030:	4013      	ands	r3, r2
 8001032:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	4918      	ldr	r1, [pc, #96]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	604b      	str	r3, [r1, #4]
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	43db      	mvns	r3, r3
 8001056:	4914      	ldr	r1, [pc, #80]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001058:	4013      	ands	r3, r2
 800105a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d021      	beq.n	80010ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	490e      	ldr	r1, [pc, #56]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
 8001074:	e021      	b.n	80010ba <HAL_GPIO_Init+0x2e2>
 8001076:	bf00      	nop
 8001078:	10320000 	.word	0x10320000
 800107c:	10310000 	.word	0x10310000
 8001080:	10220000 	.word	0x10220000
 8001084:	10210000 	.word	0x10210000
 8001088:	10120000 	.word	0x10120000
 800108c:	10110000 	.word	0x10110000
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000
 8001098:	40010800 	.word	0x40010800
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	40011000 	.word	0x40011000
 80010a4:	40011400 	.word	0x40011400
 80010a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_GPIO_Init+0x304>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	4909      	ldr	r1, [pc, #36]	; (80010dc <HAL_GPIO_Init+0x304>)
 80010b6:	4013      	ands	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	3301      	adds	r3, #1
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f47f ae8e 	bne.w	8000dec <HAL_GPIO_Init+0x14>
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	372c      	adds	r7, #44	; 0x2c
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	40010400 	.word	0x40010400

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010fc:	e003      	b.n	8001106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	611a      	str	r2, [r3, #16]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e12b      	b.n	800137a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fa9a 	bl	8000670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2224      	movs	r2, #36	; 0x24
 8001140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0201 	bic.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001174:	f000 fcda 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8001178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a81      	ldr	r2, [pc, #516]	; (8001384 <HAL_I2C_Init+0x274>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d807      	bhi.n	8001194 <HAL_I2C_Init+0x84>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4a80      	ldr	r2, [pc, #512]	; (8001388 <HAL_I2C_Init+0x278>)
 8001188:	4293      	cmp	r3, r2
 800118a:	bf94      	ite	ls
 800118c:	2301      	movls	r3, #1
 800118e:	2300      	movhi	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	e006      	b.n	80011a2 <HAL_I2C_Init+0x92>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4a7d      	ldr	r2, [pc, #500]	; (800138c <HAL_I2C_Init+0x27c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	bf94      	ite	ls
 800119c:	2301      	movls	r3, #1
 800119e:	2300      	movhi	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e0e7      	b.n	800137a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4a78      	ldr	r2, [pc, #480]	; (8001390 <HAL_I2C_Init+0x280>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	0c9b      	lsrs	r3, r3, #18
 80011b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4a6a      	ldr	r2, [pc, #424]	; (8001384 <HAL_I2C_Init+0x274>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d802      	bhi.n	80011e4 <HAL_I2C_Init+0xd4>
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	3301      	adds	r3, #1
 80011e2:	e009      	b.n	80011f8 <HAL_I2C_Init+0xe8>
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	4a69      	ldr	r2, [pc, #420]	; (8001394 <HAL_I2C_Init+0x284>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	099b      	lsrs	r3, r3, #6
 80011f6:	3301      	adds	r3, #1
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	430b      	orrs	r3, r1
 80011fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800120a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	495c      	ldr	r1, [pc, #368]	; (8001384 <HAL_I2C_Init+0x274>)
 8001214:	428b      	cmp	r3, r1
 8001216:	d819      	bhi.n	800124c <HAL_I2C_Init+0x13c>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	1e59      	subs	r1, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fbb1 f3f3 	udiv	r3, r1, r3
 8001226:	1c59      	adds	r1, r3, #1
 8001228:	f640 73fc 	movw	r3, #4092	; 0xffc
 800122c:	400b      	ands	r3, r1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00a      	beq.n	8001248 <HAL_I2C_Init+0x138>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1e59      	subs	r1, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001240:	3301      	adds	r3, #1
 8001242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001246:	e051      	b.n	80012ec <HAL_I2C_Init+0x1dc>
 8001248:	2304      	movs	r3, #4
 800124a:	e04f      	b.n	80012ec <HAL_I2C_Init+0x1dc>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d111      	bne.n	8001278 <HAL_I2C_Init+0x168>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1e58      	subs	r0, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6859      	ldr	r1, [r3, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	440b      	add	r3, r1
 8001262:	fbb0 f3f3 	udiv	r3, r0, r3
 8001266:	3301      	adds	r3, #1
 8001268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	e012      	b.n	800129e <HAL_I2C_Init+0x18e>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1e58      	subs	r0, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	0099      	lsls	r1, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	fbb0 f3f3 	udiv	r3, r0, r3
 800128e:	3301      	adds	r3, #1
 8001290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2C_Init+0x196>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e022      	b.n	80012ec <HAL_I2C_Init+0x1dc>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10e      	bne.n	80012cc <HAL_I2C_Init+0x1bc>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1e58      	subs	r0, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6859      	ldr	r1, [r3, #4]
 80012b6:	460b      	mov	r3, r1
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	440b      	add	r3, r1
 80012bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c0:	3301      	adds	r3, #1
 80012c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ca:	e00f      	b.n	80012ec <HAL_I2C_Init+0x1dc>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	1e58      	subs	r0, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6859      	ldr	r1, [r3, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	0099      	lsls	r1, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e2:	3301      	adds	r3, #1
 80012e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	6809      	ldr	r1, [r1, #0]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69da      	ldr	r2, [r3, #28]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800131a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6911      	ldr	r1, [r2, #16]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68d2      	ldr	r2, [r2, #12]
 8001326:	4311      	orrs	r1, r2
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	430b      	orrs	r3, r1
 800132e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0201 	orr.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2220      	movs	r2, #32
 8001366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	000186a0 	.word	0x000186a0
 8001388:	001e847f 	.word	0x001e847f
 800138c:	003d08ff 	.word	0x003d08ff
 8001390:	431bde83 	.word	0x431bde83
 8001394:	10624dd3 	.word	0x10624dd3

08001398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e272      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8087 	beq.w	80014c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013b8:	4b92      	ldr	r3, [pc, #584]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d00c      	beq.n	80013de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013c4:	4b8f      	ldr	r3, [pc, #572]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d112      	bne.n	80013f6 <HAL_RCC_OscConfig+0x5e>
 80013d0:	4b8c      	ldr	r3, [pc, #560]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013dc:	d10b      	bne.n	80013f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013de:	4b89      	ldr	r3, [pc, #548]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d06c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x12c>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d168      	bne.n	80014c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e24c      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x76>
 8001400:	4b80      	ldr	r3, [pc, #512]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a7f      	ldr	r2, [pc, #508]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e02e      	b.n	800146c <HAL_RCC_OscConfig+0xd4>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x98>
 8001416:	4b7b      	ldr	r3, [pc, #492]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a7a      	ldr	r2, [pc, #488]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800141c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b78      	ldr	r3, [pc, #480]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a77      	ldr	r2, [pc, #476]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e01d      	b.n	800146c <HAL_RCC_OscConfig+0xd4>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0xbc>
 800143a:	4b72      	ldr	r3, [pc, #456]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a71      	ldr	r2, [pc, #452]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b6f      	ldr	r3, [pc, #444]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a6e      	ldr	r2, [pc, #440]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0xd4>
 8001454:	4b6b      	ldr	r3, [pc, #428]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a6a      	ldr	r2, [pc, #424]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b68      	ldr	r3, [pc, #416]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a67      	ldr	r2, [pc, #412]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fae6 	bl	8000a44 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fae2 	bl	8000a44 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e200      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	4b5d      	ldr	r3, [pc, #372]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0xe4>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fad2 	bl	8000a44 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff face 	bl	8000a44 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e1ec      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	4b53      	ldr	r3, [pc, #332]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x10c>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d063      	beq.n	800159a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d2:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014de:	4b49      	ldr	r3, [pc, #292]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d11c      	bne.n	8001524 <HAL_RCC_OscConfig+0x18c>
 80014ea:	4b46      	ldr	r3, [pc, #280]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d116      	bne.n	8001524 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	4b43      	ldr	r3, [pc, #268]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x176>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e1c0      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4939      	ldr	r1, [pc, #228]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	e03a      	b.n	800159a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d020      	beq.n	800156e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fa87 	bl	8000a44 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fa83 	bl	8000a44 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e1a1      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4927      	ldr	r1, [pc, #156]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fa66 	bl	8000a44 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff fa62 	bl	8000a44 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e180      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d03a      	beq.n	800161c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d019      	beq.n	80015e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_RCC_OscConfig+0x274>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff fa46 	bl	8000a44 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff fa42 	bl	8000a44 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e160      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 face 	bl	8001b7c <RCC_Delay>
 80015e0:	e01c      	b.n	800161c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_RCC_OscConfig+0x274>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff fa2c 	bl	8000a44 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ee:	e00f      	b.n	8001610 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff fa28 	bl	8000a44 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d908      	bls.n	8001610 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e146      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	42420000 	.word	0x42420000
 800160c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001610:	4b92      	ldr	r3, [pc, #584]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e9      	bne.n	80015f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a6 	beq.w	8001776 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162e:	4b8b      	ldr	r3, [pc, #556]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10d      	bne.n	8001656 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b88      	ldr	r3, [pc, #544]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a87      	ldr	r2, [pc, #540]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b85      	ldr	r3, [pc, #532]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001652:	2301      	movs	r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b82      	ldr	r3, [pc, #520]	; (8001860 <HAL_RCC_OscConfig+0x4c8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001662:	4b7f      	ldr	r3, [pc, #508]	; (8001860 <HAL_RCC_OscConfig+0x4c8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7e      	ldr	r2, [pc, #504]	; (8001860 <HAL_RCC_OscConfig+0x4c8>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff f9e9 	bl	8000a44 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001676:	f7ff f9e5 	bl	8000a44 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b64      	cmp	r3, #100	; 0x64
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e103      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	4b75      	ldr	r3, [pc, #468]	; (8001860 <HAL_RCC_OscConfig+0x4c8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x312>
 800169c:	4b6f      	ldr	r3, [pc, #444]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4a6e      	ldr	r2, [pc, #440]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	e02d      	b.n	8001706 <HAL_RCC_OscConfig+0x36e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x334>
 80016b2:	4b6a      	ldr	r3, [pc, #424]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a69      	ldr	r2, [pc, #420]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	6213      	str	r3, [r2, #32]
 80016be:	4b67      	ldr	r3, [pc, #412]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a66      	ldr	r2, [pc, #408]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	e01c      	b.n	8001706 <HAL_RCC_OscConfig+0x36e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	d10c      	bne.n	80016ee <HAL_RCC_OscConfig+0x356>
 80016d4:	4b61      	ldr	r3, [pc, #388]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4a60      	ldr	r2, [pc, #384]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6213      	str	r3, [r2, #32]
 80016e0:	4b5e      	ldr	r3, [pc, #376]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4a5d      	ldr	r2, [pc, #372]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6213      	str	r3, [r2, #32]
 80016ec:	e00b      	b.n	8001706 <HAL_RCC_OscConfig+0x36e>
 80016ee:	4b5b      	ldr	r3, [pc, #364]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a5a      	ldr	r2, [pc, #360]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6213      	str	r3, [r2, #32]
 80016fa:	4b58      	ldr	r3, [pc, #352]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4a57      	ldr	r2, [pc, #348]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 8001700:	f023 0304 	bic.w	r3, r3, #4
 8001704:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d015      	beq.n	800173a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170e:	f7ff f999 	bl	8000a44 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001714:	e00a      	b.n	800172c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7ff f995 	bl	8000a44 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f241 3288 	movw	r2, #5000	; 0x1388
 8001724:	4293      	cmp	r3, r2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0b1      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172c:	4b4b      	ldr	r3, [pc, #300]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0ee      	beq.n	8001716 <HAL_RCC_OscConfig+0x37e>
 8001738:	e014      	b.n	8001764 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff f983 	bl	8000a44 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001740:	e00a      	b.n	8001758 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff f97f 	bl	8000a44 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001750:	4293      	cmp	r3, r2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e09b      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	4b40      	ldr	r3, [pc, #256]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1ee      	bne.n	8001742 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d105      	bne.n	8001776 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176a:	4b3c      	ldr	r3, [pc, #240]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a3b      	ldr	r2, [pc, #236]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 8001770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001774:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8087 	beq.w	800188e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001780:	4b36      	ldr	r3, [pc, #216]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b08      	cmp	r3, #8
 800178a:	d061      	beq.n	8001850 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d146      	bne.n	8001822 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001794:	4b33      	ldr	r3, [pc, #204]	; (8001864 <HAL_RCC_OscConfig+0x4cc>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff f953 	bl	8000a44 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff f94f 	bl	8000a44 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e06d      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f0      	bne.n	80017a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c8:	d108      	bne.n	80017dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	4921      	ldr	r1, [pc, #132]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a19      	ldr	r1, [r3, #32]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	430b      	orrs	r3, r1
 80017ee:	491b      	ldr	r1, [pc, #108]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_RCC_OscConfig+0x4cc>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff f923 	bl	8000a44 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001802:	f7ff f91f 	bl	8000a44 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e03d      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x46a>
 8001820:	e035      	b.n	800188e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_RCC_OscConfig+0x4cc>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff f90c 	bl	8000a44 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff f908 	bl	8000a44 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e026      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_RCC_OscConfig+0x4c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x498>
 800184e:	e01e      	b.n	800188e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d107      	bne.n	8001868 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e019      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
 800185c:	40021000 	.word	0x40021000
 8001860:	40007000 	.word	0x40007000
 8001864:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_RCC_OscConfig+0x500>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	429a      	cmp	r2, r3
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000

0800189c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0d0      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b0:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d910      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 0207 	bic.w	r2, r3, #7
 80018c6:	4965      	ldr	r1, [pc, #404]	; (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b8      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f8:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4a58      	ldr	r2, [pc, #352]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001902:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800191a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	494d      	ldr	r1, [pc, #308]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d040      	beq.n	80019bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d115      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e07f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e073      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e06b      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f023 0203 	bic.w	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4936      	ldr	r1, [pc, #216]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800198c:	f7ff f85a 	bl	8000a44 <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	e00a      	b.n	80019aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f7ff f856 	bl	8000a44 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e053      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 020c 	and.w	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1eb      	bne.n	8001994 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d210      	bcs.n	80019ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 0207 	bic.w	r2, r3, #7
 80019d2:	4922      	ldr	r1, [pc, #136]	; (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4916      	ldr	r1, [pc, #88]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	490e      	ldr	r1, [pc, #56]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2a:	f000 f821 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	490a      	ldr	r1, [pc, #40]	; (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3c:	5ccb      	ldrb	r3, [r1, r3]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1cc>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x1d0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe ffb8 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40022000 	.word	0x40022000
 8001a60:	40021000 	.word	0x40021000
 8001a64:	08002e8c 	.word	0x08002e8c
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d002      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x30>
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x36>
 8001a9e:	e027      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aa2:	613b      	str	r3, [r7, #16]
      break;
 8001aa4:	e027      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	0c9b      	lsrs	r3, r3, #18
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ab0:	5cd3      	ldrb	r3, [r2, r3]
 8001ab2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d010      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	0c5b      	lsrs	r3, r3, #17
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ad2:	fb03 f202 	mul.w	r2, r3, r2
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e004      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	613b      	str	r3, [r7, #16]
      break;
 8001aee:	e002      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001af2:	613b      	str	r3, [r7, #16]
      break;
 8001af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af6:	693b      	ldr	r3, [r7, #16]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	007a1200 	.word	0x007a1200
 8001b0c:	08002ea4 	.word	0x08002ea4
 8001b10:	08002eb4 	.word	0x08002eb4
 8001b14:	003d0900 	.word	0x003d0900

08001b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000000 	.word	0x20000000

08001b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b30:	f7ff fff2 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4903      	ldr	r1, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08002e9c 	.word	0x08002e9c

08001b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b58:	f7ff ffde 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	0adb      	lsrs	r3, r3, #11
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4903      	ldr	r1, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08002e9c 	.word	0x08002e9c

08001b7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <RCC_Delay+0x34>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <RCC_Delay+0x38>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0a5b      	lsrs	r3, r3, #9
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b98:	bf00      	nop
  }
  while (Delay --);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1e5a      	subs	r2, r3, #1
 8001b9e:	60fa      	str	r2, [r7, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f9      	bne.n	8001b98 <RCC_Delay+0x1c>
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	10624dd3 	.word	0x10624dd3

08001bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e041      	b.n	8001c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fd84 	bl	80006ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f000 fa20 	bl	800203c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d122      	bne.n	8001cb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d11b      	bne.n	8001cb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f06f 0202 	mvn.w	r2, #2
 8001c82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f9b4 	bl	8002006 <HAL_TIM_IC_CaptureCallback>
 8001c9e:	e005      	b.n	8001cac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f9a7 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f9b6 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d122      	bne.n	8001d06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d11b      	bne.n	8001d06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f06f 0204 	mvn.w	r2, #4
 8001cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f98a 	bl	8002006 <HAL_TIM_IC_CaptureCallback>
 8001cf2:	e005      	b.n	8001d00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f97d 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f98c 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d122      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d11b      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f06f 0208 	mvn.w	r2, #8
 8001d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f960 	bl	8002006 <HAL_TIM_IC_CaptureCallback>
 8001d46:	e005      	b.n	8001d54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f953 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f962 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d122      	bne.n	8001dae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d11b      	bne.n	8001dae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f06f 0210 	mvn.w	r2, #16
 8001d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2208      	movs	r2, #8
 8001d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f936 	bl	8002006 <HAL_TIM_IC_CaptureCallback>
 8001d9a:	e005      	b.n	8001da8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f929 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f938 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10e      	bne.n	8001dda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d107      	bne.n	8001dda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f06f 0201 	mvn.w	r2, #1
 8001dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7fe fbb9 	bl	800054c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de4:	2b80      	cmp	r3, #128	; 0x80
 8001de6:	d10e      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	2b80      	cmp	r3, #128	; 0x80
 8001df4:	d107      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 fa7a 	bl	80022fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e10:	2b40      	cmp	r3, #64	; 0x40
 8001e12:	d10e      	bne.n	8001e32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	d107      	bne.n	8001e32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8fc 	bl	800202a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d10e      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d107      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f06f 0220 	mvn.w	r2, #32
 8001e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fa45 	bl	80022e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_TIM_ConfigClockSource+0x1c>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e0b4      	b.n	8001fec <HAL_TIM_ConfigClockSource+0x186>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ea0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ea8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eba:	d03e      	beq.n	8001f3a <HAL_TIM_ConfigClockSource+0xd4>
 8001ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec0:	f200 8087 	bhi.w	8001fd2 <HAL_TIM_ConfigClockSource+0x16c>
 8001ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec8:	f000 8086 	beq.w	8001fd8 <HAL_TIM_ConfigClockSource+0x172>
 8001ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed0:	d87f      	bhi.n	8001fd2 <HAL_TIM_ConfigClockSource+0x16c>
 8001ed2:	2b70      	cmp	r3, #112	; 0x70
 8001ed4:	d01a      	beq.n	8001f0c <HAL_TIM_ConfigClockSource+0xa6>
 8001ed6:	2b70      	cmp	r3, #112	; 0x70
 8001ed8:	d87b      	bhi.n	8001fd2 <HAL_TIM_ConfigClockSource+0x16c>
 8001eda:	2b60      	cmp	r3, #96	; 0x60
 8001edc:	d050      	beq.n	8001f80 <HAL_TIM_ConfigClockSource+0x11a>
 8001ede:	2b60      	cmp	r3, #96	; 0x60
 8001ee0:	d877      	bhi.n	8001fd2 <HAL_TIM_ConfigClockSource+0x16c>
 8001ee2:	2b50      	cmp	r3, #80	; 0x50
 8001ee4:	d03c      	beq.n	8001f60 <HAL_TIM_ConfigClockSource+0xfa>
 8001ee6:	2b50      	cmp	r3, #80	; 0x50
 8001ee8:	d873      	bhi.n	8001fd2 <HAL_TIM_ConfigClockSource+0x16c>
 8001eea:	2b40      	cmp	r3, #64	; 0x40
 8001eec:	d058      	beq.n	8001fa0 <HAL_TIM_ConfigClockSource+0x13a>
 8001eee:	2b40      	cmp	r3, #64	; 0x40
 8001ef0:	d86f      	bhi.n	8001fd2 <HAL_TIM_ConfigClockSource+0x16c>
 8001ef2:	2b30      	cmp	r3, #48	; 0x30
 8001ef4:	d064      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0x15a>
 8001ef6:	2b30      	cmp	r3, #48	; 0x30
 8001ef8:	d86b      	bhi.n	8001fd2 <HAL_TIM_ConfigClockSource+0x16c>
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	d060      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0x15a>
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d867      	bhi.n	8001fd2 <HAL_TIM_ConfigClockSource+0x16c>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d05c      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0x15a>
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d05a      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0x15a>
 8001f0a:	e062      	b.n	8001fd2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f1c:	f000 f967 	bl	80021ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f2e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	609a      	str	r2, [r3, #8]
      break;
 8001f38:	e04f      	b.n	8001fda <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f4a:	f000 f950 	bl	80021ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f5c:	609a      	str	r2, [r3, #8]
      break;
 8001f5e:	e03c      	b.n	8001fda <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f000 f8c7 	bl	8002100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2150      	movs	r1, #80	; 0x50
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f91e 	bl	80021ba <TIM_ITRx_SetConfig>
      break;
 8001f7e:	e02c      	b.n	8001fda <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f000 f8e5 	bl	800215c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2160      	movs	r1, #96	; 0x60
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 f90e 	bl	80021ba <TIM_ITRx_SetConfig>
      break;
 8001f9e:	e01c      	b.n	8001fda <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fac:	461a      	mov	r2, r3
 8001fae:	f000 f8a7 	bl	8002100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2140      	movs	r1, #64	; 0x40
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f8fe 	bl	80021ba <TIM_ITRx_SetConfig>
      break;
 8001fbe:	e00c      	b.n	8001fda <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f000 f8f5 	bl	80021ba <TIM_ITRx_SetConfig>
      break;
 8001fd0:	e003      	b.n	8001fda <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8001fd6:	e000      	b.n	8001fda <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001fd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a29      	ldr	r2, [pc, #164]	; (80020f4 <TIM_Base_SetConfig+0xb8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00b      	beq.n	800206c <TIM_Base_SetConfig+0x30>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205a:	d007      	beq.n	800206c <TIM_Base_SetConfig+0x30>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a26      	ldr	r2, [pc, #152]	; (80020f8 <TIM_Base_SetConfig+0xbc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <TIM_Base_SetConfig+0x30>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a25      	ldr	r2, [pc, #148]	; (80020fc <TIM_Base_SetConfig+0xc0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d108      	bne.n	800207e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <TIM_Base_SetConfig+0xb8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00b      	beq.n	800209e <TIM_Base_SetConfig+0x62>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208c:	d007      	beq.n	800209e <TIM_Base_SetConfig+0x62>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <TIM_Base_SetConfig+0xbc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0x62>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a18      	ldr	r2, [pc, #96]	; (80020fc <TIM_Base_SetConfig+0xc0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <TIM_Base_SetConfig+0xb8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d103      	bne.n	80020e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	615a      	str	r2, [r3, #20]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40012c00 	.word	0x40012c00
 80020f8:	40000400 	.word	0x40000400
 80020fc:	40000800 	.word	0x40000800

08002100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f023 0201 	bic.w	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800212a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f023 030a 	bic.w	r3, r3, #10
 800213c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	621a      	str	r2, [r3, #32]
}
 8002152:	bf00      	nop
 8002154:	371c      	adds	r7, #28
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	f023 0210 	bic.w	r2, r3, #16
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	031b      	lsls	r3, r3, #12
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002198:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	621a      	str	r2, [r3, #32]
}
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f043 0307 	orr.w	r3, r3, #7
 80021dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	609a      	str	r2, [r3, #8]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b087      	sub	sp, #28
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002208:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	021a      	lsls	r2, r3, #8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	431a      	orrs	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4313      	orrs	r3, r2
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	609a      	str	r2, [r3, #8]
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002240:	2302      	movs	r3, #2
 8002242:	e046      	b.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a16      	ldr	r2, [pc, #88]	; (80022dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00e      	beq.n	80022a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002290:	d009      	beq.n	80022a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d004      	beq.n	80022a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d10c      	bne.n	80022c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40012c00 	.word	0x40012c00
 80022e0:	40000400 	.word	0x40000400
 80022e4:	40000800 	.word	0x40000800

080022e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e042      	b.n	80023a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe f9fe 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2224      	movs	r2, #36	; 0x24
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800234e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 fcd5 	bl	8002d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	d112      	bne.n	80023ec <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_UART_Receive_IT+0x26>
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00b      	b.n	80023ee <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	461a      	mov	r2, r3
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fab7 	bl	8002956 <UART_Start_Receive_IT>
 80023e8:	4603      	mov	r3, r0
 80023ea:	e000      	b.n	80023ee <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b0ba      	sub	sp, #232	; 0xe8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800242a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10f      	bne.n	800245e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800243e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_UART_IRQHandler+0x66>
 800244a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fb93 	bl	8002b82 <UART_Receive_IT>
      return;
 800245c:	e25b      	b.n	8002916 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800245e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80de 	beq.w	8002624 <HAL_UART_IRQHandler+0x22c>
 8002468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d106      	bne.n	8002482 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002478:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80d1 	beq.w	8002624 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_UART_IRQHandler+0xae>
 800248e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f043 0201 	orr.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_UART_IRQHandler+0xd2>
 80024b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f043 0202 	orr.w	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_UART_IRQHandler+0xf6>
 80024d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f043 0204 	orr.w	r2, r3, #4
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d011      	beq.n	800251e <HAL_UART_IRQHandler+0x126>
 80024fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f043 0208 	orr.w	r2, r3, #8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 81f2 	beq.w	800290c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_UART_IRQHandler+0x14e>
 8002534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fb1e 	bl	8002b82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf14      	ite	ne
 8002554:	2301      	movne	r3, #1
 8002556:	2300      	moveq	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d103      	bne.n	8002572 <HAL_UART_IRQHandler+0x17a>
 800256a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d04f      	beq.n	8002612 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fa28 	bl	80029c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d041      	beq.n	800260a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3314      	adds	r3, #20
 800258c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002594:	e853 3f00 	ldrex	r3, [r3]
 8002598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800259c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3314      	adds	r3, #20
 80025ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025c2:	e841 2300 	strex	r3, r2, [r1]
 80025c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1d9      	bne.n	8002586 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d013      	beq.n	8002602 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	4a7e      	ldr	r2, [pc, #504]	; (80027d8 <HAL_UART_IRQHandler+0x3e0>)
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fb7e 	bl	8000ce8 <HAL_DMA_Abort_IT>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025fc:	4610      	mov	r0, r2
 80025fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002600:	e00e      	b.n	8002620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f993 	bl	800292e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002608:	e00a      	b.n	8002620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f98f 	bl	800292e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002610:	e006      	b.n	8002620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f98b 	bl	800292e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800261e:	e175      	b.n	800290c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002620:	bf00      	nop
    return;
 8002622:	e173      	b.n	800290c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	2b01      	cmp	r3, #1
 800262a:	f040 814f 	bne.w	80028cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800262e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8148 	beq.w	80028cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800263c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8141 	beq.w	80028cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80b6 	beq.w	80027dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800267c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8145 	beq.w	8002910 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800268a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800268e:	429a      	cmp	r2, r3
 8002690:	f080 813e 	bcs.w	8002910 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800269a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	f000 8088 	beq.w	80027b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	330c      	adds	r3, #12
 80026ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026b6:	e853 3f00 	ldrex	r3, [r3]
 80026ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026d4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026e4:	e841 2300 	strex	r3, r2, [r1]
 80026e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80026ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1d9      	bne.n	80026a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3314      	adds	r3, #20
 80026fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026fe:	e853 3f00 	ldrex	r3, [r3]
 8002702:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002704:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3314      	adds	r3, #20
 8002714:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002718:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800271c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002720:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002724:	e841 2300 	strex	r3, r2, [r1]
 8002728:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800272a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e1      	bne.n	80026f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3314      	adds	r3, #20
 8002736:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800273a:	e853 3f00 	ldrex	r3, [r3]
 800273e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3314      	adds	r3, #20
 8002750:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002754:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002756:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800275a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800275c:	e841 2300 	strex	r3, r2, [r1]
 8002760:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e3      	bne.n	8002730 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	330c      	adds	r3, #12
 800277c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002780:	e853 3f00 	ldrex	r3, [r3]
 8002784:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002788:	f023 0310 	bic.w	r3, r3, #16
 800278c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800279a:	65ba      	str	r2, [r7, #88]	; 0x58
 800279c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027a2:	e841 2300 	strex	r3, r2, [r1]
 80027a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e3      	bne.n	8002776 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fa5d 	bl	8000c72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8b6 	bl	8002940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027d4:	e09c      	b.n	8002910 <HAL_UART_IRQHandler+0x518>
 80027d6:	bf00      	nop
 80027d8:	08002a8d 	.word	0x08002a8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 808e 	beq.w	8002914 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8089 	beq.w	8002914 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	330c      	adds	r3, #12
 8002808:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280c:	e853 3f00 	ldrex	r3, [r3]
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002818:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002826:	647a      	str	r2, [r7, #68]	; 0x44
 8002828:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800282c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800282e:	e841 2300 	strex	r3, r2, [r1]
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e3      	bne.n	8002802 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3314      	adds	r3, #20
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	e853 3f00 	ldrex	r3, [r3]
 8002848:	623b      	str	r3, [r7, #32]
   return(result);
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3314      	adds	r3, #20
 800285a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800285e:	633a      	str	r2, [r7, #48]	; 0x30
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002866:	e841 2300 	strex	r3, r2, [r1]
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e3      	bne.n	800283a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	e853 3f00 	ldrex	r3, [r3]
 800288e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0310 	bic.w	r3, r3, #16
 8002896:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	330c      	adds	r3, #12
 80028a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028a4:	61fa      	str	r2, [r7, #28]
 80028a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	69b9      	ldr	r1, [r7, #24]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	e841 2300 	strex	r3, r2, [r1]
 80028b0:	617b      	str	r3, [r7, #20]
   return(result);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e3      	bne.n	8002880 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028c2:	4619      	mov	r1, r3
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f83b 	bl	8002940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028ca:	e023      	b.n	8002914 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <HAL_UART_IRQHandler+0x4f4>
 80028d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f8e5 	bl	8002ab4 <UART_Transmit_IT>
    return;
 80028ea:	e014      	b.n	8002916 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00e      	beq.n	8002916 <HAL_UART_IRQHandler+0x51e>
 80028f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f924 	bl	8002b52 <UART_EndTransmit_IT>
    return;
 800290a:	e004      	b.n	8002916 <HAL_UART_IRQHandler+0x51e>
    return;
 800290c:	bf00      	nop
 800290e:	e002      	b.n	8002916 <HAL_UART_IRQHandler+0x51e>
      return;
 8002910:	bf00      	nop
 8002912:	e000      	b.n	8002916 <HAL_UART_IRQHandler+0x51e>
      return;
 8002914:	bf00      	nop
  }
}
 8002916:	37e8      	adds	r7, #232	; 0xe8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	4613      	mov	r3, r2
 8002962:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2222      	movs	r2, #34	; 0x22
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0220 	orr.w	r2, r2, #32
 80029ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b095      	sub	sp, #84	; 0x54
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029da:	e853 3f00 	ldrex	r3, [r3]
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	330c      	adds	r3, #12
 80029ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029f0:	643a      	str	r2, [r7, #64]	; 0x40
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029f8:	e841 2300 	strex	r3, r2, [r1]
 80029fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1e5      	bne.n	80029d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3314      	adds	r3, #20
 8002a0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3314      	adds	r3, #20
 8002a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a2c:	e841 2300 	strex	r3, r2, [r1]
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e5      	bne.n	8002a04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d119      	bne.n	8002a74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	e853 3f00 	ldrex	r3, [r3]
 8002a4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f023 0310 	bic.w	r3, r3, #16
 8002a56:	647b      	str	r3, [r7, #68]	; 0x44
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a60:	61ba      	str	r2, [r7, #24]
 8002a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a64:	6979      	ldr	r1, [r7, #20]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	e841 2300 	strex	r3, r2, [r1]
 8002a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e5      	bne.n	8002a40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a82:	bf00      	nop
 8002a84:	3754      	adds	r7, #84	; 0x54
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff ff41 	bl	800292e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b21      	cmp	r3, #33	; 0x21
 8002ac6:	d13e      	bne.n	8002b46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad0:	d114      	bne.n	8002afc <UART_Transmit_IT+0x48>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d110      	bne.n	8002afc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	1c9a      	adds	r2, r3, #2
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	621a      	str	r2, [r3, #32]
 8002afa:	e008      	b.n	8002b0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	1c59      	adds	r1, r3, #1
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6211      	str	r1, [r2, #32]
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
  }
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fed2 	bl	800291c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b08c      	sub	sp, #48	; 0x30
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b22      	cmp	r3, #34	; 0x22
 8002b94:	f040 80ae 	bne.w	8002cf4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba0:	d117      	bne.n	8002bd2 <UART_Receive_IT+0x50>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d113      	bne.n	8002bd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	1c9a      	adds	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd0:	e026      	b.n	8002c20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be4:	d007      	beq.n	8002bf6 <UART_Receive_IT+0x74>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <UART_Receive_IT+0x82>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e008      	b.n	8002c16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d15d      	bne.n	8002cf0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0220 	bic.w	r2, r2, #32
 8002c42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d135      	bne.n	8002ce6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f023 0310 	bic.w	r3, r3, #16
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	623a      	str	r2, [r7, #32]
 8002ca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	69f9      	ldr	r1, [r7, #28]
 8002ca6:	6a3a      	ldr	r2, [r7, #32]
 8002ca8:	e841 2300 	strex	r3, r2, [r1]
 8002cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e5      	bne.n	8002c80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b10      	cmp	r3, #16
 8002cc0:	d10a      	bne.n	8002cd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fe2e 	bl	8002940 <HAL_UARTEx_RxEventCallback>
 8002ce4:	e002      	b.n	8002cec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd fc74 	bl	80005d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e002      	b.n	8002cf6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e000      	b.n	8002cf6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3730      	adds	r7, #48	; 0x30
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d3a:	f023 030c 	bic.w	r3, r3, #12
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a2c      	ldr	r2, [pc, #176]	; (8002e14 <UART_SetConfig+0x114>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d103      	bne.n	8002d70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d68:	f7fe fef4 	bl	8001b54 <HAL_RCC_GetPCLK2Freq>
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	e002      	b.n	8002d76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d70:	f7fe fedc 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8002d74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009a      	lsls	r2, r3, #2
 8002d80:	441a      	add	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <UART_SetConfig+0x118>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	0119      	lsls	r1, r3, #4
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009a      	lsls	r2, r3, #2
 8002da0:	441a      	add	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dac:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <UART_SetConfig+0x118>)
 8002dae:	fba3 0302 	umull	r0, r3, r3, r2
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	2064      	movs	r0, #100	; 0x64
 8002db6:	fb00 f303 	mul.w	r3, r0, r3
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	3332      	adds	r3, #50	; 0x32
 8002dc0:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <UART_SetConfig+0x118>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dcc:	4419      	add	r1, r3
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009a      	lsls	r2, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <UART_SetConfig+0x118>)
 8002de6:	fba3 0302 	umull	r0, r3, r3, r2
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	2064      	movs	r0, #100	; 0x64
 8002dee:	fb00 f303 	mul.w	r3, r0, r3
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	3332      	adds	r3, #50	; 0x32
 8002df8:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <UART_SetConfig+0x118>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	f003 020f 	and.w	r2, r3, #15
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	440a      	add	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40013800 	.word	0x40013800
 8002e18:	51eb851f 	.word	0x51eb851f

08002e1c <memset>:
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4402      	add	r2, r0
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d100      	bne.n	8002e26 <memset+0xa>
 8002e24:	4770      	bx	lr
 8002e26:	f803 1b01 	strb.w	r1, [r3], #1
 8002e2a:	e7f9      	b.n	8002e20 <memset+0x4>

08002e2c <__libc_init_array>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	2600      	movs	r6, #0
 8002e30:	4d0c      	ldr	r5, [pc, #48]	; (8002e64 <__libc_init_array+0x38>)
 8002e32:	4c0d      	ldr	r4, [pc, #52]	; (8002e68 <__libc_init_array+0x3c>)
 8002e34:	1b64      	subs	r4, r4, r5
 8002e36:	10a4      	asrs	r4, r4, #2
 8002e38:	42a6      	cmp	r6, r4
 8002e3a:	d109      	bne.n	8002e50 <__libc_init_array+0x24>
 8002e3c:	f000 f81a 	bl	8002e74 <_init>
 8002e40:	2600      	movs	r6, #0
 8002e42:	4d0a      	ldr	r5, [pc, #40]	; (8002e6c <__libc_init_array+0x40>)
 8002e44:	4c0a      	ldr	r4, [pc, #40]	; (8002e70 <__libc_init_array+0x44>)
 8002e46:	1b64      	subs	r4, r4, r5
 8002e48:	10a4      	asrs	r4, r4, #2
 8002e4a:	42a6      	cmp	r6, r4
 8002e4c:	d105      	bne.n	8002e5a <__libc_init_array+0x2e>
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}
 8002e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e54:	4798      	blx	r3
 8002e56:	3601      	adds	r6, #1
 8002e58:	e7ee      	b.n	8002e38 <__libc_init_array+0xc>
 8002e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e5e:	4798      	blx	r3
 8002e60:	3601      	adds	r6, #1
 8002e62:	e7f2      	b.n	8002e4a <__libc_init_array+0x1e>
 8002e64:	08002eb8 	.word	0x08002eb8
 8002e68:	08002eb8 	.word	0x08002eb8
 8002e6c:	08002eb8 	.word	0x08002eb8
 8002e70:	08002ebc 	.word	0x08002ebc

08002e74 <_init>:
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e76:	bf00      	nop
 8002e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7a:	bc08      	pop	{r3}
 8002e7c:	469e      	mov	lr, r3
 8002e7e:	4770      	bx	lr

08002e80 <_fini>:
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	bf00      	nop
 8002e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e86:	bc08      	pop	{r3}
 8002e88:	469e      	mov	lr, r3
 8002e8a:	4770      	bx	lr
