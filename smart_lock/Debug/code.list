
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bac  08002bac  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002bac  08002bac  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bac  08002bac  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bac  08002bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000060  08002c14  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08002c14  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ebdb  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021d6  00000000  00000000  0002eca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  00030e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd5  00000000  00000000  00031d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018402  00000000  00000000  00032955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123a5  00000000  00000000  0004ad57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c64b  00000000  00000000  0005d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000422c  00000000  00000000  000e9748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ed974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b68 	.word	0x08002b68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002b68 	.word	0x08002b68

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fe3e 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80f 	bl	8000176 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f916 	bl	8000388 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f874 	bl	8000248 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000160:	f000 f844 	bl	80001ec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f8bc 	bl	80002e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000168:	f000 f8e4 	bl	8000334 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init();
 800016c:	f000 fc5f 	bl	8000a2e <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000170:	f000 fc65 	bl	8000a3e <loop>
 8000174:	e7fc      	b.n	8000170 <main+0x24>

08000176 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	b090      	sub	sp, #64	; 0x40
 800017a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017c:	f107 0318 	add.w	r3, r7, #24
 8000180:	2228      	movs	r2, #40	; 0x28
 8000182:	2100      	movs	r1, #0
 8000184:	4618      	mov	r0, r3
 8000186:	f002 fc63 	bl	8002a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]
 8000196:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000198:	2302      	movs	r3, #2
 800019a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019c:	2301      	movs	r3, #1
 800019e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a0:	2310      	movs	r3, #16
 80001a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001a4:	2300      	movs	r3, #0
 80001a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001a8:	f107 0318 	add.w	r3, r7, #24
 80001ac:	4618      	mov	r0, r3
 80001ae:	f001 faa7 	bl	8001700 <HAL_RCC_OscConfig>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001b8:	f000 f968 	bl	800048c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001bc:	230f      	movs	r3, #15
 80001be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001c0:	2300      	movs	r3, #0
 80001c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001c8:	2300      	movs	r3, #0
 80001ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2100      	movs	r1, #0
 80001d4:	4618      	mov	r0, r3
 80001d6:	f001 fd15 	bl	8001c04 <HAL_RCC_ClockConfig>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d001      	beq.n	80001e4 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001e0:	f000 f954 	bl	800048c <Error_Handler>
  }
}
 80001e4:	bf00      	nop
 80001e6:	3740      	adds	r7, #64	; 0x40
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}

080001ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001f0:	4b12      	ldr	r3, [pc, #72]	; (800023c <MX_I2C1_Init+0x50>)
 80001f2:	4a13      	ldr	r2, [pc, #76]	; (8000240 <MX_I2C1_Init+0x54>)
 80001f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001f6:	4b11      	ldr	r3, [pc, #68]	; (800023c <MX_I2C1_Init+0x50>)
 80001f8:	4a12      	ldr	r2, [pc, #72]	; (8000244 <MX_I2C1_Init+0x58>)
 80001fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <MX_I2C1_Init+0x50>)
 80001fe:	2200      	movs	r2, #0
 8000200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <MX_I2C1_Init+0x50>)
 8000204:	2200      	movs	r2, #0
 8000206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <MX_I2C1_Init+0x50>)
 800020a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800020e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <MX_I2C1_Init+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000216:	4b09      	ldr	r3, [pc, #36]	; (800023c <MX_I2C1_Init+0x50>)
 8000218:	2200      	movs	r2, #0
 800021a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <MX_I2C1_Init+0x50>)
 800021e:	2200      	movs	r2, #0
 8000220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000222:	4b06      	ldr	r3, [pc, #24]	; (800023c <MX_I2C1_Init+0x50>)
 8000224:	2200      	movs	r2, #0
 8000226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000228:	4804      	ldr	r0, [pc, #16]	; (800023c <MX_I2C1_Init+0x50>)
 800022a:	f001 f925 	bl	8001478 <HAL_I2C_Init>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000234:	f000 f92a 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000007c 	.word	0x2000007c
 8000240:	40005400 	.word	0x40005400
 8000244:	000186a0 	.word	0x000186a0

08000248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800024e:	f107 0308 	add.w	r3, r7, #8
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800025c:	463b      	mov	r3, r7
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000264:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <MX_TIM2_Init+0x94>)
 8000266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <MX_TIM2_Init+0x94>)
 800026e:	2207      	movs	r2, #7
 8000270:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000272:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <MX_TIM2_Init+0x94>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_TIM2_Init+0x94>)
 800027a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800027e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <MX_TIM2_Init+0x94>)
 8000282:	2200      	movs	r2, #0
 8000284:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <MX_TIM2_Init+0x94>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800028c:	4813      	ldr	r0, [pc, #76]	; (80002dc <MX_TIM2_Init+0x94>)
 800028e:	f001 fe47 	bl	8001f20 <HAL_TIM_Base_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000298:	f000 f8f8 	bl	800048c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800029c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002a2:	f107 0308 	add.w	r3, r7, #8
 80002a6:	4619      	mov	r1, r3
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <MX_TIM2_Init+0x94>)
 80002aa:	f001 ffe3 	bl	8002274 <HAL_TIM_ConfigClockSource>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002b4:	f000 f8ea 	bl	800048c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002b8:	2300      	movs	r3, #0
 80002ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002bc:	2300      	movs	r3, #0
 80002be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002c0:	463b      	mov	r3, r7
 80002c2:	4619      	mov	r1, r3
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_TIM2_Init+0x94>)
 80002c6:	f002 f9b9 	bl	800263c <HAL_TIMEx_MasterConfigSynchronization>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002d0:	f000 f8dc 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200000d0 	.word	0x200000d0

080002e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002e6:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_USART1_UART_Init+0x50>)
 80002e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_USART1_UART_Init+0x4c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000306:	220c      	movs	r2, #12
 8000308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_USART1_UART_Init+0x4c>)
 8000318:	f002 fa00 	bl	800271c <HAL_UART_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000322:	f000 f8b3 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000118 	.word	0x20000118
 8000330:	40013800 	.word	0x40013800

08000334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <MX_USART2_UART_Init+0x50>)
 800033c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800036c:	f002 f9d6 	bl	800271c <HAL_UART_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000376:	f000 f889 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000160 	.word	0x20000160
 8000384:	40004400 	.word	0x40004400

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b36      	ldr	r3, [pc, #216]	; (8000478 <MX_GPIO_Init+0xf0>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a35      	ldr	r2, [pc, #212]	; (8000478 <MX_GPIO_Init+0xf0>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b33      	ldr	r3, [pc, #204]	; (8000478 <MX_GPIO_Init+0xf0>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b30      	ldr	r3, [pc, #192]	; (8000478 <MX_GPIO_Init+0xf0>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a2f      	ldr	r2, [pc, #188]	; (8000478 <MX_GPIO_Init+0xf0>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b2d      	ldr	r3, [pc, #180]	; (8000478 <MX_GPIO_Init+0xf0>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003cc:	4b2a      	ldr	r3, [pc, #168]	; (8000478 <MX_GPIO_Init+0xf0>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a29      	ldr	r2, [pc, #164]	; (8000478 <MX_GPIO_Init+0xf0>)
 80003d2:	f043 0308 	orr.w	r3, r3, #8
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b27      	ldr	r3, [pc, #156]	; (8000478 <MX_GPIO_Init+0xf0>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0308 	and.w	r3, r3, #8
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ea:	4824      	ldr	r0, [pc, #144]	; (800047c <MX_GPIO_Init+0xf4>)
 80003ec:	f000 fffb 	bl	80013e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	210f      	movs	r1, #15
 80003f4:	4822      	ldr	r0, [pc, #136]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003f6:	f000 fff6 	bl	80013e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2302      	movs	r3, #2
 800040a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	481a      	ldr	r0, [pc, #104]	; (800047c <MX_GPIO_Init+0xf4>)
 8000414:	f000 fe4c 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12;
 8000418:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800041e:	4b19      	ldr	r3, [pc, #100]	; (8000484 <MX_GPIO_Init+0xfc>)
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000422:	2301      	movs	r3, #1
 8000424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	4816      	ldr	r0, [pc, #88]	; (8000488 <MX_GPIO_Init+0x100>)
 800042e:	f000 fe3f 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000432:	230f      	movs	r3, #15
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	2302      	movs	r3, #2
 8000440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	4619      	mov	r1, r3
 8000448:	480d      	ldr	r0, [pc, #52]	; (8000480 <MX_GPIO_Init+0xf8>)
 800044a:	f000 fe31 	bl	80010b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	2100      	movs	r1, #0
 8000452:	2017      	movs	r0, #23
 8000454:	f000 fdf5 	bl	8001042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000458:	2017      	movs	r0, #23
 800045a:	f000 fe0e 	bl	800107a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	2100      	movs	r1, #0
 8000462:	2028      	movs	r0, #40	; 0x28
 8000464:	f000 fded 	bl	8001042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000468:	2028      	movs	r0, #40	; 0x28
 800046a:	f000 fe06 	bl	800107a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800046e:	bf00      	nop
 8000470:	3720      	adds	r7, #32
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000
 800047c:	40011000 	.word	0x40011000
 8000480:	40010c00 	.word	0x40010c00
 8000484:	10210000 	.word	0x10210000
 8000488:	40010800 	.word	0x40010800

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000494:	e7fe      	b.n	8000494 <Error_Handler+0x8>
	...

08000498 <keypad_scan>:
GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
uint8_t keyPressed = UNPRESSED;

static void keypad_scan(uint16_t GPIO_Pin) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 80004a2:	f000 fced 	bl	8000e80 <HAL_GetTick>
 80004a6:	4603      	mov	r3, r0
 80004a8:	4aa0      	ldr	r2, [pc, #640]	; (800072c <keypad_scan+0x294>)
 80004aa:	6013      	str	r3, [r2, #0]
	if (currentMillis - previousMillis > 10) {
 80004ac:	4b9f      	ldr	r3, [pc, #636]	; (800072c <keypad_scan+0x294>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b9f      	ldr	r3, [pc, #636]	; (8000730 <keypad_scan+0x298>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	1ad3      	subs	r3, r2, r3
 80004b6:	2b0a      	cmp	r3, #10
 80004b8:	f240 8173 	bls.w	80007a2 <keypad_scan+0x30a>
		/*Configure GPIO pins :  to GPIO_INPUT*/
		GPIO_InitStructPrivate.Pin = KEYPAD_R1_PIN | KEYPAD_R2_PIN
 80004bc:	4b9d      	ldr	r3, [pc, #628]	; (8000734 <keypad_scan+0x29c>)
 80004be:	f44f 5287 	mov.w	r2, #4320	; 0x10e0
 80004c2:	601a      	str	r2, [r3, #0]
				| KEYPAD_R3_PIN | KEYPAD_R4_PIN;
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80004c4:	4b9b      	ldr	r3, [pc, #620]	; (8000734 <keypad_scan+0x29c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80004ca:	4b9a      	ldr	r3, [pc, #616]	; (8000734 <keypad_scan+0x29c>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	4b98      	ldr	r3, [pc, #608]	; (8000734 <keypad_scan+0x29c>)
 80004d2:	2202      	movs	r2, #2
 80004d4:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(KEYPAD_R_PORT, &GPIO_InitStructPrivate);
 80004d6:	4997      	ldr	r1, [pc, #604]	; (8000734 <keypad_scan+0x29c>)
 80004d8:	4897      	ldr	r0, [pc, #604]	; (8000738 <keypad_scan+0x2a0>)
 80004da:	f000 fde9 	bl	80010b0 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C4_PIN, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2108      	movs	r1, #8
 80004e2:	4896      	ldr	r0, [pc, #600]	; (800073c <keypad_scan+0x2a4>)
 80004e4:	f000 ff7f 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C3_PIN, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2104      	movs	r1, #4
 80004ec:	4893      	ldr	r0, [pc, #588]	; (800073c <keypad_scan+0x2a4>)
 80004ee:	f000 ff7a 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C2_PIN, 1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2102      	movs	r1, #2
 80004f6:	4891      	ldr	r0, [pc, #580]	; (800073c <keypad_scan+0x2a4>)
 80004f8:	f000 ff75 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C1_PIN, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2101      	movs	r1, #1
 8000500:	488e      	ldr	r0, [pc, #568]	; (800073c <keypad_scan+0x2a4>)
 8000502:	f000 ff70 	bl	80013e6 <HAL_GPIO_WritePin>
		if (GPIO_Pin == KEYPAD_R4_PIN
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800050c:	d10b      	bne.n	8000526 <keypad_scan+0x8e>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R4_PIN)) {
 800050e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000512:	4889      	ldr	r0, [pc, #548]	; (8000738 <keypad_scan+0x2a0>)
 8000514:	f000 ff50 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d103      	bne.n	8000526 <keypad_scan+0x8e>
			keyPressed = 15; //ASCII value of D
 800051e:	4b88      	ldr	r3, [pc, #544]	; (8000740 <keypad_scan+0x2a8>)
 8000520:	220f      	movs	r2, #15
 8000522:	701a      	strb	r2, [r3, #0]
 8000524:	e028      	b.n	8000578 <keypad_scan+0xe0>
		} else if (GPIO_Pin == KEYPAD_R3_PIN
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	2b80      	cmp	r3, #128	; 0x80
 800052a:	d10a      	bne.n	8000542 <keypad_scan+0xaa>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R3_PIN)) {
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	4882      	ldr	r0, [pc, #520]	; (8000738 <keypad_scan+0x2a0>)
 8000530:	f000 ff42 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d103      	bne.n	8000542 <keypad_scan+0xaa>
			keyPressed = 11; //ASCII value of C
 800053a:	4b81      	ldr	r3, [pc, #516]	; (8000740 <keypad_scan+0x2a8>)
 800053c:	220b      	movs	r2, #11
 800053e:	701a      	strb	r2, [r3, #0]
 8000540:	e01a      	b.n	8000578 <keypad_scan+0xe0>
		} else if (GPIO_Pin == KEYPAD_R2_PIN
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	2b40      	cmp	r3, #64	; 0x40
 8000546:	d10a      	bne.n	800055e <keypad_scan+0xc6>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R2_PIN)) {
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	487b      	ldr	r0, [pc, #492]	; (8000738 <keypad_scan+0x2a0>)
 800054c:	f000 ff34 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d103      	bne.n	800055e <keypad_scan+0xc6>
			keyPressed = 7; //ASCII value of B
 8000556:	4b7a      	ldr	r3, [pc, #488]	; (8000740 <keypad_scan+0x2a8>)
 8000558:	2207      	movs	r2, #7
 800055a:	701a      	strb	r2, [r3, #0]
 800055c:	e00c      	b.n	8000578 <keypad_scan+0xe0>
		} else if (GPIO_Pin == KEYPAD_R1_PIN
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	2b20      	cmp	r3, #32
 8000562:	d109      	bne.n	8000578 <keypad_scan+0xe0>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R1_PIN)) {
 8000564:	2120      	movs	r1, #32
 8000566:	4874      	ldr	r0, [pc, #464]	; (8000738 <keypad_scan+0x2a0>)
 8000568:	f000 ff26 	bl	80013b8 <HAL_GPIO_ReadPin>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d102      	bne.n	8000578 <keypad_scan+0xe0>
			keyPressed = 3; //ASCII value of A
 8000572:	4b73      	ldr	r3, [pc, #460]	; (8000740 <keypad_scan+0x2a8>)
 8000574:	2203      	movs	r2, #3
 8000576:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C4_PIN, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	2108      	movs	r1, #8
 800057c:	486f      	ldr	r0, [pc, #444]	; (800073c <keypad_scan+0x2a4>)
 800057e:	f000 ff32 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C3_PIN, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2104      	movs	r1, #4
 8000586:	486d      	ldr	r0, [pc, #436]	; (800073c <keypad_scan+0x2a4>)
 8000588:	f000 ff2d 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C2_PIN, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	2102      	movs	r1, #2
 8000590:	486a      	ldr	r0, [pc, #424]	; (800073c <keypad_scan+0x2a4>)
 8000592:	f000 ff28 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C1_PIN, 1);
 8000596:	2201      	movs	r2, #1
 8000598:	2101      	movs	r1, #1
 800059a:	4868      	ldr	r0, [pc, #416]	; (800073c <keypad_scan+0x2a4>)
 800059c:	f000 ff23 	bl	80013e6 <HAL_GPIO_WritePin>
		if (GPIO_Pin == KEYPAD_R4_PIN
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005a6:	d10b      	bne.n	80005c0 <keypad_scan+0x128>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R4_PIN)) {
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	4862      	ldr	r0, [pc, #392]	; (8000738 <keypad_scan+0x2a0>)
 80005ae:	f000 ff03 	bl	80013b8 <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d103      	bne.n	80005c0 <keypad_scan+0x128>
			keyPressed = 14; //ASCII value of #
 80005b8:	4b61      	ldr	r3, [pc, #388]	; (8000740 <keypad_scan+0x2a8>)
 80005ba:	220e      	movs	r2, #14
 80005bc:	701a      	strb	r2, [r3, #0]
 80005be:	e028      	b.n	8000612 <keypad_scan+0x17a>
		} else if (GPIO_Pin == KEYPAD_R3_PIN
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	2b80      	cmp	r3, #128	; 0x80
 80005c4:	d10a      	bne.n	80005dc <keypad_scan+0x144>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R3_PIN)) {
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	485b      	ldr	r0, [pc, #364]	; (8000738 <keypad_scan+0x2a0>)
 80005ca:	f000 fef5 	bl	80013b8 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d103      	bne.n	80005dc <keypad_scan+0x144>
			keyPressed = 10; //ASCII value of 9
 80005d4:	4b5a      	ldr	r3, [pc, #360]	; (8000740 <keypad_scan+0x2a8>)
 80005d6:	220a      	movs	r2, #10
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	e01a      	b.n	8000612 <keypad_scan+0x17a>
		} else if (GPIO_Pin == KEYPAD_R2_PIN
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	2b40      	cmp	r3, #64	; 0x40
 80005e0:	d10a      	bne.n	80005f8 <keypad_scan+0x160>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R2_PIN)) {
 80005e2:	2140      	movs	r1, #64	; 0x40
 80005e4:	4854      	ldr	r0, [pc, #336]	; (8000738 <keypad_scan+0x2a0>)
 80005e6:	f000 fee7 	bl	80013b8 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d103      	bne.n	80005f8 <keypad_scan+0x160>
			keyPressed = 6; //ASCII value of 6
 80005f0:	4b53      	ldr	r3, [pc, #332]	; (8000740 <keypad_scan+0x2a8>)
 80005f2:	2206      	movs	r2, #6
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e00c      	b.n	8000612 <keypad_scan+0x17a>
		} else if (GPIO_Pin == KEYPAD_R1_PIN
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	2b20      	cmp	r3, #32
 80005fc:	d109      	bne.n	8000612 <keypad_scan+0x17a>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R1_PIN)) {
 80005fe:	2120      	movs	r1, #32
 8000600:	484d      	ldr	r0, [pc, #308]	; (8000738 <keypad_scan+0x2a0>)
 8000602:	f000 fed9 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <keypad_scan+0x17a>
			keyPressed = 2; //ASCII value of 3
 800060c:	4b4c      	ldr	r3, [pc, #304]	; (8000740 <keypad_scan+0x2a8>)
 800060e:	2202      	movs	r2, #2
 8000610:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C4_PIN, 1);
 8000612:	2201      	movs	r2, #1
 8000614:	2108      	movs	r1, #8
 8000616:	4849      	ldr	r0, [pc, #292]	; (800073c <keypad_scan+0x2a4>)
 8000618:	f000 fee5 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C3_PIN, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	2104      	movs	r1, #4
 8000620:	4846      	ldr	r0, [pc, #280]	; (800073c <keypad_scan+0x2a4>)
 8000622:	f000 fee0 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C2_PIN, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2102      	movs	r1, #2
 800062a:	4844      	ldr	r0, [pc, #272]	; (800073c <keypad_scan+0x2a4>)
 800062c:	f000 fedb 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C1_PIN, 1);
 8000630:	2201      	movs	r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	4841      	ldr	r0, [pc, #260]	; (800073c <keypad_scan+0x2a4>)
 8000636:	f000 fed6 	bl	80013e6 <HAL_GPIO_WritePin>
		if (GPIO_Pin == KEYPAD_R4_PIN
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000640:	d10b      	bne.n	800065a <keypad_scan+0x1c2>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R4_PIN)) {
 8000642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000646:	483c      	ldr	r0, [pc, #240]	; (8000738 <keypad_scan+0x2a0>)
 8000648:	f000 feb6 	bl	80013b8 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d103      	bne.n	800065a <keypad_scan+0x1c2>
			keyPressed = 13; //ASCII value of 0
 8000652:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <keypad_scan+0x2a8>)
 8000654:	220d      	movs	r2, #13
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	e028      	b.n	80006ac <keypad_scan+0x214>
		} else if (GPIO_Pin == KEYPAD_R3_PIN
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	2b80      	cmp	r3, #128	; 0x80
 800065e:	d10a      	bne.n	8000676 <keypad_scan+0x1de>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R3_PIN)) {
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	4835      	ldr	r0, [pc, #212]	; (8000738 <keypad_scan+0x2a0>)
 8000664:	f000 fea8 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d103      	bne.n	8000676 <keypad_scan+0x1de>
			keyPressed = 9; //ASCII value of 8
 800066e:	4b34      	ldr	r3, [pc, #208]	; (8000740 <keypad_scan+0x2a8>)
 8000670:	2209      	movs	r2, #9
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e01a      	b.n	80006ac <keypad_scan+0x214>
		} else if (GPIO_Pin == KEYPAD_R2_PIN
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	2b40      	cmp	r3, #64	; 0x40
 800067a:	d10a      	bne.n	8000692 <keypad_scan+0x1fa>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R2_PIN)) {
 800067c:	2140      	movs	r1, #64	; 0x40
 800067e:	482e      	ldr	r0, [pc, #184]	; (8000738 <keypad_scan+0x2a0>)
 8000680:	f000 fe9a 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d103      	bne.n	8000692 <keypad_scan+0x1fa>
			keyPressed = 5; //ASCII value of 5
 800068a:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <keypad_scan+0x2a8>)
 800068c:	2205      	movs	r2, #5
 800068e:	701a      	strb	r2, [r3, #0]
 8000690:	e00c      	b.n	80006ac <keypad_scan+0x214>
		} else if (GPIO_Pin == KEYPAD_R1_PIN
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	2b20      	cmp	r3, #32
 8000696:	d109      	bne.n	80006ac <keypad_scan+0x214>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R1_PIN)) {
 8000698:	2120      	movs	r1, #32
 800069a:	4827      	ldr	r0, [pc, #156]	; (8000738 <keypad_scan+0x2a0>)
 800069c:	f000 fe8c 	bl	80013b8 <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d102      	bne.n	80006ac <keypad_scan+0x214>
			keyPressed = 1; //ASCII value of 2
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <keypad_scan+0x2a8>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C4_PIN, 1);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2108      	movs	r1, #8
 80006b0:	4822      	ldr	r0, [pc, #136]	; (800073c <keypad_scan+0x2a4>)
 80006b2:	f000 fe98 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C3_PIN, 1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2104      	movs	r1, #4
 80006ba:	4820      	ldr	r0, [pc, #128]	; (800073c <keypad_scan+0x2a4>)
 80006bc:	f000 fe93 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C2_PIN, 1);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2102      	movs	r1, #2
 80006c4:	481d      	ldr	r0, [pc, #116]	; (800073c <keypad_scan+0x2a4>)
 80006c6:	f000 fe8e 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C1_PIN, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2101      	movs	r1, #1
 80006ce:	481b      	ldr	r0, [pc, #108]	; (800073c <keypad_scan+0x2a4>)
 80006d0:	f000 fe89 	bl	80013e6 <HAL_GPIO_WritePin>
		if (GPIO_Pin == KEYPAD_R4_PIN
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006da:	d10b      	bne.n	80006f4 <keypad_scan+0x25c>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R4_PIN)) {
 80006dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e0:	4815      	ldr	r0, [pc, #84]	; (8000738 <keypad_scan+0x2a0>)
 80006e2:	f000 fe69 	bl	80013b8 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d103      	bne.n	80006f4 <keypad_scan+0x25c>
			keyPressed = 12; //ASCII value of *
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <keypad_scan+0x2a8>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	701a      	strb	r2, [r3, #0]
 80006f2:	e034      	b.n	800075e <keypad_scan+0x2c6>
		} else if (GPIO_Pin == KEYPAD_R3_PIN
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	2b80      	cmp	r3, #128	; 0x80
 80006f8:	d10a      	bne.n	8000710 <keypad_scan+0x278>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R3_PIN)) {
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <keypad_scan+0x2a0>)
 80006fe:	f000 fe5b 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d103      	bne.n	8000710 <keypad_scan+0x278>
			keyPressed = 8; //ASCII value of 7
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <keypad_scan+0x2a8>)
 800070a:	2208      	movs	r2, #8
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	e026      	b.n	800075e <keypad_scan+0x2c6>
		} else if (GPIO_Pin == KEYPAD_R2_PIN
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	2b40      	cmp	r3, #64	; 0x40
 8000714:	d116      	bne.n	8000744 <keypad_scan+0x2ac>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R2_PIN)) {
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <keypad_scan+0x2a0>)
 800071a:	f000 fe4d 	bl	80013b8 <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10f      	bne.n	8000744 <keypad_scan+0x2ac>
			keyPressed = 4; //ASCII value of 4
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <keypad_scan+0x2a8>)
 8000726:	2204      	movs	r2, #4
 8000728:	701a      	strb	r2, [r3, #0]
 800072a:	e018      	b.n	800075e <keypad_scan+0x2c6>
 800072c:	200001bc 	.word	0x200001bc
 8000730:	200001b8 	.word	0x200001b8
 8000734:	200001a8 	.word	0x200001a8
 8000738:	40010800 	.word	0x40010800
 800073c:	40010c00 	.word	0x40010c00
 8000740:	20000000 	.word	0x20000000
		} else if (GPIO_Pin == KEYPAD_R1_PIN
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	2b20      	cmp	r3, #32
 8000748:	d109      	bne.n	800075e <keypad_scan+0x2c6>
				&& !HAL_GPIO_ReadPin(KEYPAD_R_PORT, KEYPAD_R1_PIN)) {
 800074a:	2120      	movs	r1, #32
 800074c:	4817      	ldr	r0, [pc, #92]	; (80007ac <keypad_scan+0x314>)
 800074e:	f000 fe33 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <keypad_scan+0x2c6>
			keyPressed = 0; //ASCII value of 1
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <keypad_scan+0x318>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C4_PIN, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2108      	movs	r1, #8
 8000762:	4814      	ldr	r0, [pc, #80]	; (80007b4 <keypad_scan+0x31c>)
 8000764:	f000 fe3f 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C3_PIN, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2104      	movs	r1, #4
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <keypad_scan+0x31c>)
 800076e:	f000 fe3a 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C2_PIN, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2102      	movs	r1, #2
 8000776:	480f      	ldr	r0, [pc, #60]	; (80007b4 <keypad_scan+0x31c>)
 8000778:	f000 fe35 	bl	80013e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C1_PIN, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2101      	movs	r1, #1
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <keypad_scan+0x31c>)
 8000782:	f000 fe30 	bl	80013e6 <HAL_GPIO_WritePin>
		/*Configure GPIO pins : back to EXTI*/
		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_FALLING;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <keypad_scan+0x320>)
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <keypad_scan+0x324>)
 800078a:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <keypad_scan+0x320>)
 800078e:	2201      	movs	r2, #1
 8000790:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(KEYPAD_R_PORT, &GPIO_InitStructPrivate);
 8000792:	4909      	ldr	r1, [pc, #36]	; (80007b8 <keypad_scan+0x320>)
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <keypad_scan+0x314>)
 8000796:	f000 fc8b 	bl	80010b0 <HAL_GPIO_Init>
		previousMillis = currentMillis;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <keypad_scan+0x328>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <keypad_scan+0x32c>)
 80007a0:	6013      	str	r3, [r2, #0]
	}
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40010800 	.word	0x40010800
 80007b0:	20000000 	.word	0x20000000
 80007b4:	40010c00 	.word	0x40010c00
 80007b8:	200001a8 	.word	0x200001a8
 80007bc:	10210000 	.word	0x10210000
 80007c0:	200001bc 	.word	0x200001bc
 80007c4:	200001b8 	.word	0x200001b8

080007c8 <keypad_init>:
void keypad_init(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C4_PIN, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2108      	movs	r1, #8
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <keypad_init+0x30>)
 80007d2:	f000 fe08 	bl	80013e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C3_PIN, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2104      	movs	r1, #4
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <keypad_init+0x30>)
 80007dc:	f000 fe03 	bl	80013e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C2_PIN, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2102      	movs	r1, #2
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <keypad_init+0x30>)
 80007e6:	f000 fdfe 	bl	80013e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KEYPAD_C_PORT, KEYPAD_C1_PIN, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2101      	movs	r1, #1
 80007ee:	4802      	ldr	r0, [pc, #8]	; (80007f8 <keypad_init+0x30>)
 80007f0:	f000 fdf9 	bl	80013e6 <HAL_GPIO_WritePin>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40010c00 	.word	0x40010c00

080007fc <keypad_ReadFlag>:
uint8_t keypad_ReadFlag(void) {
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	return keyPressed;
 8000800:	4b02      	ldr	r3, [pc, #8]	; (800080c <keypad_ReadFlag+0x10>)
 8000802:	781b      	ldrb	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20000000 	.word	0x20000000

08000810 <keypad_ResetFlag>:
void keypad_ResetFlag(void) {
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
	keyPressed = UNPRESSED;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <keypad_ResetFlag+0x14>)
 8000816:	22ff      	movs	r2, #255	; 0xff
 8000818:	701a      	strb	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000

08000828 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
	keypad_scan(GPIO_Pin);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fe2f 	bl	8000498 <keypad_scan>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <sch_init>:
    // struct task *bottom;
    // uint32_t time_length;
} stack_task;
//******************START TIMER*********************
extern TIM_HandleTypeDef htim2;
void sch_init(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <sch_init+0x10>)
 800084a:	f001 fbb9 	bl	8001fc0 <HAL_TIM_Base_Start_IT>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000d0 	.word	0x200000d0

08000858 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance){
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	429a      	cmp	r2, r3
 800086a:	d101      	bne.n	8000870 <HAL_TIM_PeriodElapsedCallback+0x18>
		sch_update();
 800086c:	f000 f868 	bl	8000940 <sch_update>
	}
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000d0 	.word	0x200000d0

0800087c <sch_add_task>:
			period - the amount of cycle time to run task
 * @retval:	1 - add successfully
 * 			0 - add badly
 * */
bool sch_add_task(void (*pTask)(), uint16_t delay, uint16_t period)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	807b      	strh	r3, [r7, #2]
 8000888:	4613      	mov	r3, r2
 800088a:	803b      	strh	r3, [r7, #0]
    struct task *my_task = (struct task *)malloc(sizeof(struct task));
 800088c:	200c      	movs	r0, #12
 800088e:	f002 f823 	bl	80028d8 <malloc>
 8000892:	4603      	mov	r3, r0
 8000894:	60fb      	str	r3, [r7, #12]
    my_task->pTask = pTask;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	601a      	str	r2, [r3, #0]
    my_task->counter = delay *FREQ_OF_TIM/1000;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	887a      	ldrh	r2, [r7, #2]
 80008a0:	809a      	strh	r2, [r3, #4]
    my_task->period = period;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	883a      	ldrh	r2, [r7, #0]
 80008a6:	80da      	strh	r2, [r3, #6]
    my_task->next_task = 0;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
    if (stack_task.top == 0)
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <sch_add_task+0xc0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d104      	bne.n	80008c0 <sch_add_task+0x44>
    {
        stack_task.top = my_task;
 80008b6:	4a21      	ldr	r2, [pc, #132]	; (800093c <sch_add_task+0xc0>)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	6013      	str	r3, [r2, #0]
        // stack_task.bottom = stack_task.top;
        // stack_task.time_length = stack_task.top->counter;
        return 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	e039      	b.n	8000934 <sch_add_task+0xb8>
    //     stack_task.bottom->next_task = my_task;
    //     stack_task.bottom = stack_task.bottom->next_task;
    //     stack_task.time_length += my_task->counter;
    //     return 1;
    // }
    struct task *pre = stack_task.top;
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <sch_add_task+0xc0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	617b      	str	r3, [r7, #20]
    struct task *cur = stack_task.top;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <sch_add_task+0xc0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	613b      	str	r3, [r7, #16]
    while (cur && my_task->counter >= cur->counter)
 80008cc:	e00c      	b.n	80008e8 <sch_add_task+0x6c>
    {
        my_task->counter = my_task->counter - cur->counter;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	889a      	ldrh	r2, [r3, #4]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	889b      	ldrh	r3, [r3, #4]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	b29a      	uxth	r2, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	809a      	strh	r2, [r3, #4]
        pre = cur;
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	617b      	str	r3, [r7, #20]
        cur = cur->next_task;
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	613b      	str	r3, [r7, #16]
    while (cur && my_task->counter >= cur->counter)
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d005      	beq.n	80008fa <sch_add_task+0x7e>
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	889a      	ldrh	r2, [r3, #4]
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	889b      	ldrh	r3, [r3, #4]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d2e9      	bcs.n	80008ce <sch_add_task+0x52>
    }
    if (pre != cur)
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d006      	beq.n	8000910 <sch_add_task+0x94>
    {
        pre->next_task = my_task;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	609a      	str	r2, [r3, #8]
        my_task->next_task = cur;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	e005      	b.n	800091c <sch_add_task+0xa0>
    }
    else
    {
        my_task->next_task = cur;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	609a      	str	r2, [r3, #8]
        stack_task.top = my_task;
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <sch_add_task+0xc0>)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	6013      	str	r3, [r2, #0]
    }
    if (cur)
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d007      	beq.n	8000932 <sch_add_task+0xb6>
        cur->counter -= my_task->counter;
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	889a      	ldrh	r2, [r3, #4]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	889b      	ldrh	r3, [r3, #4]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b29a      	uxth	r2, r3
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	809a      	strh	r2, [r3, #4]
    return 1;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200001c0 	.word	0x200001c0

08000940 <sch_update>:
 * @brief:	decrease the remaining time of the top task
 * @para:	none
 * @retval:	none
 * */
void sch_update(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
    if (stack_task.top == 0)
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <sch_update+0x2c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d00b      	beq.n	8000964 <sch_update+0x24>
        return;
    if (stack_task.top->counter > 0)
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <sch_update+0x2c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	889b      	ldrh	r3, [r3, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d007      	beq.n	8000966 <sch_update+0x26>
    {
        stack_task.top->counter--;
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <sch_update+0x2c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	889a      	ldrh	r2, [r3, #4]
 800095c:	3a01      	subs	r2, #1
 800095e:	b292      	uxth	r2, r2
 8000960:	809a      	strh	r2, [r3, #4]
 8000962:	e000      	b.n	8000966 <sch_update+0x26>
        return;
 8000964:	bf00      	nop
    }
}
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	200001c0 	.word	0x200001c0

08000970 <sch_delete_task>:
 * @brief:	delete a task in the stack and release the memory
 * @para:	del_task - the task need to be deleted
 * @retval:	none
 * */
void sch_delete_task(struct task *del_task)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
    if (del_task == 0)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <sch_delete_task+0x16>
    {
        return;
    }
    free(del_task);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f001 ffb2 	bl	80028e8 <free>
 8000984:	e000      	b.n	8000988 <sch_delete_task+0x18>
        return;
 8000986:	bf00      	nop
}
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <sch_dispatch>:
 * @para:	none
 * @retval:	1 - run successfully
 *			0 - run badly
 * */
bool sch_dispatch(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
    if (stack_task.top == 0)
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <sch_dispatch+0x68>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d101      	bne.n	80009a2 <sch_dispatch+0x12>
        return 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	e026      	b.n	80009f0 <sch_dispatch+0x60>
    if (stack_task.top->counter == 0)
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <sch_dispatch+0x68>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	889b      	ldrh	r3, [r3, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d120      	bne.n	80009ee <sch_dispatch+0x5e>
    {
        (*stack_task.top->pTask)();
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <sch_dispatch+0x68>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4798      	blx	r3
        struct task *temp = stack_task.top;
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <sch_dispatch+0x68>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	607b      	str	r3, [r7, #4]
        stack_task.top = stack_task.top->next_task;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <sch_dispatch+0x68>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <sch_dispatch+0x68>)
 80009c2:	6013      	str	r3, [r2, #0]
        temp->next_task = 0;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
        if (temp->period != 0)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	88db      	ldrh	r3, [r3, #6]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d008      	beq.n	80009e4 <sch_dispatch+0x54>
        {
            sch_add_task(temp->pTask, temp->period, temp->period);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	88d9      	ldrh	r1, [r3, #6]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	88db      	ldrh	r3, [r3, #6]
 80009de:	461a      	mov	r2, r3
 80009e0:	f7ff ff4c 	bl	800087c <sch_add_task>
        }
        sch_delete_task(temp);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ffc3 	bl	8000970 <sch_delete_task>
        return 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <sch_dispatch+0x60>
    }
    return 0;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200001c0 	.word	0x200001c0

080009fc <toggle_led>:
 *      Author: HP
 */

#include"my_system.h"

static void toggle_led(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(DEBUG_LED_PORT, DEBUG_LED_PIN);
 8000a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <toggle_led+0x14>)
 8000a06:	f000 fd06 	bl	8001416 <HAL_GPIO_TogglePin>
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40011000 	.word	0x40011000

08000a14 <test_keypad>:
static void test_keypad(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	if(keypad_ReadFlag() == 5){
 8000a18:	f7ff fef0 	bl	80007fc <keypad_ReadFlag>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b05      	cmp	r3, #5
 8000a20:	d103      	bne.n	8000a2a <test_keypad+0x16>
		toggle_led();
 8000a22:	f7ff ffeb 	bl	80009fc <toggle_led>
		keypad_ResetFlag();
 8000a26:	f7ff fef3 	bl	8000810 <keypad_ResetFlag>
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <init>:
void init(void) {
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
	sch_init();
 8000a32:	f7ff ff07 	bl	8000844 <sch_init>
	keypad_init();
 8000a36:	f7ff fec7 	bl	80007c8 <keypad_init>
	//sch_add_task(toggle_led, 2000, 0);
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <loop>:

void loop(void) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
	sch_dispatch();
 8000a42:	f7ff ffa5 	bl	8000990 <sch_dispatch>
	test_keypad();
 8000a46:	f7ff ffe5 	bl	8000a14 <test_keypad>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_MspInit+0x5c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a14      	ldr	r2, [pc, #80]	; (8000aac <HAL_MspInit+0x5c>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_MspInit+0x5c>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x5c>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_MspInit+0x5c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_MspInit+0x5c>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_MspInit+0x60>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_MspInit+0x60>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <HAL_I2C_MspInit+0x70>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d123      	bne.n	8000b1c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_I2C_MspInit+0x74>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <HAL_I2C_MspInit+0x74>)
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_I2C_MspInit+0x74>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aec:	23c0      	movs	r3, #192	; 0xc0
 8000aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4619      	mov	r1, r3
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <HAL_I2C_MspInit+0x78>)
 8000b00:	f000 fad6 	bl	80010b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_I2C_MspInit+0x74>)
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_I2C_MspInit+0x74>)
 8000b0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b0e:	61d3      	str	r3, [r2, #28]
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_I2C_MspInit+0x74>)
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40005400 	.word	0x40005400
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010c00 	.word	0x40010c00

08000b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b40:	d113      	bne.n	8000b6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_TIM_Base_MspInit+0x44>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <HAL_TIM_Base_MspInit+0x44>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	61d3      	str	r3, [r2, #28]
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_TIM_Base_MspInit+0x44>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	201c      	movs	r0, #28
 8000b60:	f000 fa6f 	bl	8001042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b64:	201c      	movs	r0, #28
 8000b66:	f000 fa88 	bl	800107a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0318 	add.w	r3, r7, #24
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a37      	ldr	r2, [pc, #220]	; (8000c70 <HAL_UART_MspInit+0xf8>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d132      	bne.n	8000bfe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b98:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <HAL_UART_MspInit+0xfc>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a35      	ldr	r2, [pc, #212]	; (8000c74 <HAL_UART_MspInit+0xfc>)
 8000b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <HAL_UART_MspInit+0xfc>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <HAL_UART_MspInit+0xfc>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a2f      	ldr	r2, [pc, #188]	; (8000c74 <HAL_UART_MspInit+0xfc>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <HAL_UART_MspInit+0xfc>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4826      	ldr	r0, [pc, #152]	; (8000c78 <HAL_UART_MspInit+0x100>)
 8000bde:	f000 fa67 	bl	80010b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0318 	add.w	r3, r7, #24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4820      	ldr	r0, [pc, #128]	; (8000c78 <HAL_UART_MspInit+0x100>)
 8000bf8:	f000 fa5a 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bfc:	e034      	b.n	8000c68 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <HAL_UART_MspInit+0x104>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d12f      	bne.n	8000c68 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_UART_MspInit+0xfc>)
 8000c0a:	69db      	ldr	r3, [r3, #28]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_UART_MspInit+0xfc>)
 8000c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c12:	61d3      	str	r3, [r2, #28]
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_UART_MspInit+0xfc>)
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_UART_MspInit+0xfc>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_UART_MspInit+0xfc>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_UART_MspInit+0xfc>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480b      	ldr	r0, [pc, #44]	; (8000c78 <HAL_UART_MspInit+0x100>)
 8000c4c:	f000 fa30 	bl	80010b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c50:	2308      	movs	r3, #8
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_UART_MspInit+0x100>)
 8000c64:	f000 fa24 	bl	80010b0 <HAL_GPIO_Init>
}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013800 	.word	0x40013800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40004400 	.word	0x40004400

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr

08000cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc6:	f000 f8c9 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000cd2:	2020      	movs	r0, #32
 8000cd4:	f000 fbb8 	bl	8001448 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000cd8:	2040      	movs	r0, #64	; 0x40
 8000cda:	f000 fbb5 	bl	8001448 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000cde:	2080      	movs	r0, #128	; 0x80
 8000ce0:	f000 fbb2 	bl	8001448 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <TIM2_IRQHandler+0x10>)
 8000cee:	f001 f9b9 	bl	8002064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000d0 	.word	0x200000d0

08000cfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000d00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d04:	f000 fba0 	bl	8001448 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f001 fea0 	bl	8002a80 <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20005000 	.word	0x20005000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	200001c4 	.word	0x200001c4
 8000d74:	20000318 	.word	0x20000318

08000d78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d84:	f7ff fff8 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d8a:	490c      	ldr	r1, [pc, #48]	; (8000dbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da0:	4c09      	ldr	r4, [pc, #36]	; (8000dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f001 fe6d 	bl	8002a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff f9cb 	bl	800014c <main>
  bx lr
 8000db6:	4770      	bx	lr
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000dc0:	08002bb4 	.word	0x08002bb4
  ldr r2, =_sbss
 8000dc4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000dc8:	20000314 	.word	0x20000314

08000dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_2_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x28>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x28>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f923 	bl	800102c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	200f      	movs	r0, #15
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe30 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f93b 	bl	8001096 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f903 	bl	8001042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000004 	.word	0x20000004
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	20000008 	.word	0x20000008

08000e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_IncTick+0x1c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_IncTick+0x20>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <HAL_IncTick+0x20>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	2000000c 	.word	0x2000000c
 8000e7c:	200001c8 	.word	0x200001c8

08000e80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <HAL_GetTick+0x10>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	200001c8 	.word	0x200001c8

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4906      	ldr	r1, [pc, #24]	; (8000f2c <__NVIC_EnableIRQ+0x34>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff8:	d301      	bcc.n	8000ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00f      	b.n	800101e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <SysTick_Config+0x40>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001006:	210f      	movs	r1, #15
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f7ff ff90 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <SysTick_Config+0x40>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SysTick_Config+0x40>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff2d 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001054:	f7ff ff42 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff ff90 	bl	8000f84 <NVIC_EncodePriority>
 8001064:	4602      	mov	r2, r0
 8001066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff5f 	bl	8000f30 <__NVIC_SetPriority>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff35 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffa2 	bl	8000fe8 <SysTick_Config>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b08b      	sub	sp, #44	; 0x2c
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	e169      	b.n	8001398 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010c4:	2201      	movs	r2, #1
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f040 8158 	bne.w	8001392 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4a9a      	ldr	r2, [pc, #616]	; (8001350 <HAL_GPIO_Init+0x2a0>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d05e      	beq.n	80011aa <HAL_GPIO_Init+0xfa>
 80010ec:	4a98      	ldr	r2, [pc, #608]	; (8001350 <HAL_GPIO_Init+0x2a0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d875      	bhi.n	80011de <HAL_GPIO_Init+0x12e>
 80010f2:	4a98      	ldr	r2, [pc, #608]	; (8001354 <HAL_GPIO_Init+0x2a4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d058      	beq.n	80011aa <HAL_GPIO_Init+0xfa>
 80010f8:	4a96      	ldr	r2, [pc, #600]	; (8001354 <HAL_GPIO_Init+0x2a4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d86f      	bhi.n	80011de <HAL_GPIO_Init+0x12e>
 80010fe:	4a96      	ldr	r2, [pc, #600]	; (8001358 <HAL_GPIO_Init+0x2a8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d052      	beq.n	80011aa <HAL_GPIO_Init+0xfa>
 8001104:	4a94      	ldr	r2, [pc, #592]	; (8001358 <HAL_GPIO_Init+0x2a8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d869      	bhi.n	80011de <HAL_GPIO_Init+0x12e>
 800110a:	4a94      	ldr	r2, [pc, #592]	; (800135c <HAL_GPIO_Init+0x2ac>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d04c      	beq.n	80011aa <HAL_GPIO_Init+0xfa>
 8001110:	4a92      	ldr	r2, [pc, #584]	; (800135c <HAL_GPIO_Init+0x2ac>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d863      	bhi.n	80011de <HAL_GPIO_Init+0x12e>
 8001116:	4a92      	ldr	r2, [pc, #584]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d046      	beq.n	80011aa <HAL_GPIO_Init+0xfa>
 800111c:	4a90      	ldr	r2, [pc, #576]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d85d      	bhi.n	80011de <HAL_GPIO_Init+0x12e>
 8001122:	2b12      	cmp	r3, #18
 8001124:	d82a      	bhi.n	800117c <HAL_GPIO_Init+0xcc>
 8001126:	2b12      	cmp	r3, #18
 8001128:	d859      	bhi.n	80011de <HAL_GPIO_Init+0x12e>
 800112a:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <HAL_GPIO_Init+0x80>)
 800112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001130:	080011ab 	.word	0x080011ab
 8001134:	08001185 	.word	0x08001185
 8001138:	08001197 	.word	0x08001197
 800113c:	080011d9 	.word	0x080011d9
 8001140:	080011df 	.word	0x080011df
 8001144:	080011df 	.word	0x080011df
 8001148:	080011df 	.word	0x080011df
 800114c:	080011df 	.word	0x080011df
 8001150:	080011df 	.word	0x080011df
 8001154:	080011df 	.word	0x080011df
 8001158:	080011df 	.word	0x080011df
 800115c:	080011df 	.word	0x080011df
 8001160:	080011df 	.word	0x080011df
 8001164:	080011df 	.word	0x080011df
 8001168:	080011df 	.word	0x080011df
 800116c:	080011df 	.word	0x080011df
 8001170:	080011df 	.word	0x080011df
 8001174:	0800118d 	.word	0x0800118d
 8001178:	080011a1 	.word	0x080011a1
 800117c:	4a79      	ldr	r2, [pc, #484]	; (8001364 <HAL_GPIO_Init+0x2b4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001182:	e02c      	b.n	80011de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	623b      	str	r3, [r7, #32]
          break;
 800118a:	e029      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	3304      	adds	r3, #4
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e024      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	3308      	adds	r3, #8
 800119c:	623b      	str	r3, [r7, #32]
          break;
 800119e:	e01f      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	330c      	adds	r3, #12
 80011a6:	623b      	str	r3, [r7, #32]
          break;
 80011a8:	e01a      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011b2:	2304      	movs	r3, #4
 80011b4:	623b      	str	r3, [r7, #32]
          break;
 80011b6:	e013      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d105      	bne.n	80011cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c0:	2308      	movs	r3, #8
 80011c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	611a      	str	r2, [r3, #16]
          break;
 80011ca:	e009      	b.n	80011e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011cc:	2308      	movs	r3, #8
 80011ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	615a      	str	r2, [r3, #20]
          break;
 80011d6:	e003      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          break;
 80011de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2bff      	cmp	r3, #255	; 0xff
 80011e4:	d801      	bhi.n	80011ea <HAL_GPIO_Init+0x13a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	e001      	b.n	80011ee <HAL_GPIO_Init+0x13e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3304      	adds	r3, #4
 80011ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	2bff      	cmp	r3, #255	; 0xff
 80011f4:	d802      	bhi.n	80011fc <HAL_GPIO_Init+0x14c>
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	e002      	b.n	8001202 <HAL_GPIO_Init+0x152>
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	3b08      	subs	r3, #8
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	210f      	movs	r1, #15
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	401a      	ands	r2, r3
 8001214:	6a39      	ldr	r1, [r7, #32]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	431a      	orrs	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 80b1 	beq.w	8001392 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001230:	4b4d      	ldr	r3, [pc, #308]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b4a      	ldr	r3, [pc, #296]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001248:	4a48      	ldr	r2, [pc, #288]	; (800136c <HAL_GPIO_Init+0x2bc>)
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	3302      	adds	r3, #2
 8001250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001254:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a40      	ldr	r2, [pc, #256]	; (8001370 <HAL_GPIO_Init+0x2c0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d013      	beq.n	800129c <HAL_GPIO_Init+0x1ec>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a3f      	ldr	r2, [pc, #252]	; (8001374 <HAL_GPIO_Init+0x2c4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d00d      	beq.n	8001298 <HAL_GPIO_Init+0x1e8>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a3e      	ldr	r2, [pc, #248]	; (8001378 <HAL_GPIO_Init+0x2c8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d007      	beq.n	8001294 <HAL_GPIO_Init+0x1e4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a3d      	ldr	r2, [pc, #244]	; (800137c <HAL_GPIO_Init+0x2cc>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d101      	bne.n	8001290 <HAL_GPIO_Init+0x1e0>
 800128c:	2303      	movs	r3, #3
 800128e:	e006      	b.n	800129e <HAL_GPIO_Init+0x1ee>
 8001290:	2304      	movs	r3, #4
 8001292:	e004      	b.n	800129e <HAL_GPIO_Init+0x1ee>
 8001294:	2302      	movs	r3, #2
 8001296:	e002      	b.n	800129e <HAL_GPIO_Init+0x1ee>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <HAL_GPIO_Init+0x1ee>
 800129c:	2300      	movs	r3, #0
 800129e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a0:	f002 0203 	and.w	r2, r2, #3
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	4093      	lsls	r3, r2
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ae:	492f      	ldr	r1, [pc, #188]	; (800136c <HAL_GPIO_Init+0x2bc>)
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012c8:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	492c      	ldr	r1, [pc, #176]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	43db      	mvns	r3, r3
 80012de:	4928      	ldr	r1, [pc, #160]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	4922      	ldr	r1, [pc, #136]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60cb      	str	r3, [r1, #12]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	491e      	ldr	r1, [pc, #120]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001308:	4013      	ands	r3, r2
 800130a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4918      	ldr	r1, [pc, #96]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	4914      	ldr	r1, [pc, #80]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001330:	4013      	ands	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d021      	beq.n	8001384 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	490e      	ldr	r1, [pc, #56]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
 800134c:	e021      	b.n	8001392 <HAL_GPIO_Init+0x2e2>
 800134e:	bf00      	nop
 8001350:	10320000 	.word	0x10320000
 8001354:	10310000 	.word	0x10310000
 8001358:	10220000 	.word	0x10220000
 800135c:	10210000 	.word	0x10210000
 8001360:	10120000 	.word	0x10120000
 8001364:	10110000 	.word	0x10110000
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000
 8001370:	40010800 	.word	0x40010800
 8001374:	40010c00 	.word	0x40010c00
 8001378:	40011000 	.word	0x40011000
 800137c:	40011400 	.word	0x40011400
 8001380:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	43db      	mvns	r3, r3
 800138c:	4909      	ldr	r1, [pc, #36]	; (80013b4 <HAL_GPIO_Init+0x304>)
 800138e:	4013      	ands	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3301      	adds	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	fa22 f303 	lsr.w	r3, r2, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f47f ae8e 	bne.w	80010c4 <HAL_GPIO_Init+0x14>
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	372c      	adds	r7, #44	; 0x2c
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e001      	b.n	80013da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	807b      	strh	r3, [r7, #2]
 80013f2:	4613      	mov	r3, r2
 80013f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f6:	787b      	ldrb	r3, [r7, #1]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fc:	887a      	ldrh	r2, [r7, #2]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001402:	e003      	b.n	800140c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	041a      	lsls	r2, r3, #16
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	611a      	str	r2, [r3, #16]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	460b      	mov	r3, r1
 8001420:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001428:	887a      	ldrh	r2, [r7, #2]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4013      	ands	r3, r2
 800142e:	041a      	lsls	r2, r3, #16
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43d9      	mvns	r1, r3
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	400b      	ands	r3, r1
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f9de 	bl	8000828 <HAL_GPIO_EXTI_Callback>
  }
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e12b      	b.n	80016e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fb08 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2224      	movs	r2, #36	; 0x24
 80014a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014dc:	f000 fcda 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 80014e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4a81      	ldr	r2, [pc, #516]	; (80016ec <HAL_I2C_Init+0x274>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d807      	bhi.n	80014fc <HAL_I2C_Init+0x84>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4a80      	ldr	r2, [pc, #512]	; (80016f0 <HAL_I2C_Init+0x278>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	bf94      	ite	ls
 80014f4:	2301      	movls	r3, #1
 80014f6:	2300      	movhi	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	e006      	b.n	800150a <HAL_I2C_Init+0x92>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4a7d      	ldr	r2, [pc, #500]	; (80016f4 <HAL_I2C_Init+0x27c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	bf94      	ite	ls
 8001504:	2301      	movls	r3, #1
 8001506:	2300      	movhi	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0e7      	b.n	80016e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4a78      	ldr	r2, [pc, #480]	; (80016f8 <HAL_I2C_Init+0x280>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9b      	lsrs	r3, r3, #18
 800151c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	430a      	orrs	r2, r1
 8001530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a6a      	ldr	r2, [pc, #424]	; (80016ec <HAL_I2C_Init+0x274>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d802      	bhi.n	800154c <HAL_I2C_Init+0xd4>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3301      	adds	r3, #1
 800154a:	e009      	b.n	8001560 <HAL_I2C_Init+0xe8>
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	4a69      	ldr	r2, [pc, #420]	; (80016fc <HAL_I2C_Init+0x284>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	099b      	lsrs	r3, r3, #6
 800155e:	3301      	adds	r3, #1
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	430b      	orrs	r3, r1
 8001566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001572:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	495c      	ldr	r1, [pc, #368]	; (80016ec <HAL_I2C_Init+0x274>)
 800157c:	428b      	cmp	r3, r1
 800157e:	d819      	bhi.n	80015b4 <HAL_I2C_Init+0x13c>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e59      	subs	r1, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fbb1 f3f3 	udiv	r3, r1, r3
 800158e:	1c59      	adds	r1, r3, #1
 8001590:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001594:	400b      	ands	r3, r1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00a      	beq.n	80015b0 <HAL_I2C_Init+0x138>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1e59      	subs	r1, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015a8:	3301      	adds	r3, #1
 80015aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ae:	e051      	b.n	8001654 <HAL_I2C_Init+0x1dc>
 80015b0:	2304      	movs	r3, #4
 80015b2:	e04f      	b.n	8001654 <HAL_I2C_Init+0x1dc>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d111      	bne.n	80015e0 <HAL_I2C_Init+0x168>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e58      	subs	r0, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	440b      	add	r3, r1
 80015ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	e012      	b.n	8001606 <HAL_I2C_Init+0x18e>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e58      	subs	r0, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	0099      	lsls	r1, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Init+0x196>
 800160a:	2301      	movs	r3, #1
 800160c:	e022      	b.n	8001654 <HAL_I2C_Init+0x1dc>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10e      	bne.n	8001634 <HAL_I2C_Init+0x1bc>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1e58      	subs	r0, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6859      	ldr	r1, [r3, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	440b      	add	r3, r1
 8001624:	fbb0 f3f3 	udiv	r3, r0, r3
 8001628:	3301      	adds	r3, #1
 800162a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001632:	e00f      	b.n	8001654 <HAL_I2C_Init+0x1dc>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1e58      	subs	r0, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	0099      	lsls	r1, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	fbb0 f3f3 	udiv	r3, r0, r3
 800164a:	3301      	adds	r3, #1
 800164c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	6809      	ldr	r1, [r1, #0]
 8001658:	4313      	orrs	r3, r2
 800165a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001682:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6911      	ldr	r1, [r2, #16]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68d2      	ldr	r2, [r2, #12]
 800168e:	4311      	orrs	r1, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	430b      	orrs	r3, r1
 8001696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2220      	movs	r2, #32
 80016ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	000186a0 	.word	0x000186a0
 80016f0:	001e847f 	.word	0x001e847f
 80016f4:	003d08ff 	.word	0x003d08ff
 80016f8:	431bde83 	.word	0x431bde83
 80016fc:	10624dd3 	.word	0x10624dd3

08001700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e272      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8087 	beq.w	800182e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001720:	4b92      	ldr	r3, [pc, #584]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b04      	cmp	r3, #4
 800172a:	d00c      	beq.n	8001746 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800172c:	4b8f      	ldr	r3, [pc, #572]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d112      	bne.n	800175e <HAL_RCC_OscConfig+0x5e>
 8001738:	4b8c      	ldr	r3, [pc, #560]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001744:	d10b      	bne.n	800175e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001746:	4b89      	ldr	r3, [pc, #548]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d06c      	beq.n	800182c <HAL_RCC_OscConfig+0x12c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d168      	bne.n	800182c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e24c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x76>
 8001768:	4b80      	ldr	r3, [pc, #512]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a7f      	ldr	r2, [pc, #508]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 800176e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e02e      	b.n	80017d4 <HAL_RCC_OscConfig+0xd4>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x98>
 800177e:	4b7b      	ldr	r3, [pc, #492]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a7a      	ldr	r2, [pc, #488]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b78      	ldr	r3, [pc, #480]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a77      	ldr	r2, [pc, #476]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e01d      	b.n	80017d4 <HAL_RCC_OscConfig+0xd4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0xbc>
 80017a2:	4b72      	ldr	r3, [pc, #456]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a71      	ldr	r2, [pc, #452]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b6f      	ldr	r3, [pc, #444]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6e      	ldr	r2, [pc, #440]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0xd4>
 80017bc:	4b6b      	ldr	r3, [pc, #428]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6a      	ldr	r2, [pc, #424]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a67      	ldr	r2, [pc, #412]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d013      	beq.n	8001804 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb50 	bl	8000e80 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fb4c 	bl	8000e80 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e200      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b5d      	ldr	r3, [pc, #372]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0xe4>
 8001802:	e014      	b.n	800182e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fb3c 	bl	8000e80 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fb38 	bl	8000e80 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1ec      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	4b53      	ldr	r3, [pc, #332]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x10c>
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d063      	beq.n	8001902 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800183a:	4b4c      	ldr	r3, [pc, #304]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001846:	4b49      	ldr	r3, [pc, #292]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b08      	cmp	r3, #8
 8001850:	d11c      	bne.n	800188c <HAL_RCC_OscConfig+0x18c>
 8001852:	4b46      	ldr	r3, [pc, #280]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d116      	bne.n	800188c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x176>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e1c0      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b3d      	ldr	r3, [pc, #244]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4939      	ldr	r1, [pc, #228]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	e03a      	b.n	8001902 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001894:	4b36      	ldr	r3, [pc, #216]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7ff faf1 	bl	8000e80 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff faed 	bl	8000e80 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1a1      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	4b2d      	ldr	r3, [pc, #180]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4927      	ldr	r1, [pc, #156]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fad0 	bl	8000e80 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff facc 	bl	8000e80 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e180      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d03a      	beq.n	8001984 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d019      	beq.n	800194a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <HAL_RCC_OscConfig+0x274>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff fab0 	bl	8000e80 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff faac 	bl	8000e80 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e160      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001942:	2001      	movs	r0, #1
 8001944:	f000 face 	bl	8001ee4 <RCC_Delay>
 8001948:	e01c      	b.n	8001984 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_RCC_OscConfig+0x274>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fa96 	bl	8000e80 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001956:	e00f      	b.n	8001978 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fa92 	bl	8000e80 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d908      	bls.n	8001978 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e146      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	42420000 	.word	0x42420000
 8001974:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	4b92      	ldr	r3, [pc, #584]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e9      	bne.n	8001958 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80a6 	beq.w	8001ade <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001996:	4b8b      	ldr	r3, [pc, #556]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10d      	bne.n	80019be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a87      	ldr	r2, [pc, #540]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b85      	ldr	r3, [pc, #532]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ba:	2301      	movs	r3, #1
 80019bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b82      	ldr	r3, [pc, #520]	; (8001bc8 <HAL_RCC_OscConfig+0x4c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d118      	bne.n	80019fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ca:	4b7f      	ldr	r3, [pc, #508]	; (8001bc8 <HAL_RCC_OscConfig+0x4c8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a7e      	ldr	r2, [pc, #504]	; (8001bc8 <HAL_RCC_OscConfig+0x4c8>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fa53 	bl	8000e80 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019de:	f7ff fa4f 	bl	8000e80 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b64      	cmp	r3, #100	; 0x64
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e103      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	4b75      	ldr	r3, [pc, #468]	; (8001bc8 <HAL_RCC_OscConfig+0x4c8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x312>
 8001a04:	4b6f      	ldr	r3, [pc, #444]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4a6e      	ldr	r2, [pc, #440]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6213      	str	r3, [r2, #32]
 8001a10:	e02d      	b.n	8001a6e <HAL_RCC_OscConfig+0x36e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x334>
 8001a1a:	4b6a      	ldr	r3, [pc, #424]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a69      	ldr	r2, [pc, #420]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6213      	str	r3, [r2, #32]
 8001a26:	4b67      	ldr	r3, [pc, #412]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a66      	ldr	r2, [pc, #408]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	f023 0304 	bic.w	r3, r3, #4
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	e01c      	b.n	8001a6e <HAL_RCC_OscConfig+0x36e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x356>
 8001a3c:	4b61      	ldr	r3, [pc, #388]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4a60      	ldr	r2, [pc, #384]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6213      	str	r3, [r2, #32]
 8001a48:	4b5e      	ldr	r3, [pc, #376]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a5d      	ldr	r2, [pc, #372]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	e00b      	b.n	8001a6e <HAL_RCC_OscConfig+0x36e>
 8001a56:	4b5b      	ldr	r3, [pc, #364]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a5a      	ldr	r2, [pc, #360]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	6213      	str	r3, [r2, #32]
 8001a62:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4a57      	ldr	r2, [pc, #348]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	f023 0304 	bic.w	r3, r3, #4
 8001a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d015      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fa03 	bl	8000e80 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff f9ff 	bl	8000e80 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0b1      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	4b4b      	ldr	r3, [pc, #300]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ee      	beq.n	8001a7e <HAL_RCC_OscConfig+0x37e>
 8001aa0:	e014      	b.n	8001acc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff f9ed 	bl	8000e80 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7ff f9e9 	bl	8000e80 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e09b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1ee      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d105      	bne.n	8001ade <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad2:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a3b      	ldr	r2, [pc, #236]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001adc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8087 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d061      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d146      	bne.n	8001b8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afc:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <HAL_RCC_OscConfig+0x4cc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff f9bd 	bl	8000e80 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff f9b9 	bl	8000e80 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e06d      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b30:	d108      	bne.n	8001b44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b32:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	4921      	ldr	r1, [pc, #132]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a19      	ldr	r1, [r3, #32]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	430b      	orrs	r3, r1
 8001b56:	491b      	ldr	r1, [pc, #108]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_RCC_OscConfig+0x4cc>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff f98d 	bl	8000e80 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff f989 	bl	8000e80 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e03d      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x46a>
 8001b88:	e035      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_RCC_OscConfig+0x4cc>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff f976 	bl	8000e80 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff f972 	bl	8000e80 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e026      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x498>
 8001bb6:	e01e      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e019      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_OscConfig+0x500>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0d0      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c18:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d910      	bls.n	8001c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 0207 	bic.w	r2, r3, #7
 8001c2e:	4965      	ldr	r1, [pc, #404]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b8      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	494d      	ldr	r1, [pc, #308]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d040      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d115      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e073      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06b      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce2:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f023 0203 	bic.w	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4936      	ldr	r1, [pc, #216]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff f8c4 	bl	8000e80 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff f8c0 	bl	8000e80 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e053      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 020c 	and.w	r2, r3, #12
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1eb      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d210      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
 8001d3a:	4922      	ldr	r1, [pc, #136]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e032      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4916      	ldr	r1, [pc, #88]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d92:	f000 f821 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490a      	ldr	r1, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f822 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08002b80 	.word	0x08002b80
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	20000008 	.word	0x20000008

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d002      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x30>
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0x36>
 8001e06:	e027      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0a:	613b      	str	r3, [r7, #16]
      break;
 8001e0c:	e027      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	0c9b      	lsrs	r3, r3, #18
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d010      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0c5b      	lsrs	r3, r3, #17
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e3a:	fb03 f202 	mul.w	r2, r3, r2
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e004      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e4c:	fb02 f303 	mul.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	613b      	str	r3, [r7, #16]
      break;
 8001e56:	e002      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e5a:	613b      	str	r3, [r7, #16]
      break;
 8001e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5e:	693b      	ldr	r3, [r7, #16]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	007a1200 	.word	0x007a1200
 8001e74:	08002b98 	.word	0x08002b98
 8001e78:	08002ba8 	.word	0x08002ba8
 8001e7c:	003d0900 	.word	0x003d0900

08001e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e84:	4b02      	ldr	r3, [pc, #8]	; (8001e90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e98:	f7ff fff2 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4903      	ldr	r1, [pc, #12]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	08002b90 	.word	0x08002b90

08001ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ec0:	f7ff ffde 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	0adb      	lsrs	r3, r3, #11
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4903      	ldr	r1, [pc, #12]	; (8001ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08002b90 	.word	0x08002b90

08001ee4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <RCC_Delay+0x34>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <RCC_Delay+0x38>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	0a5b      	lsrs	r3, r3, #9
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f00:	bf00      	nop
  }
  while (Delay --);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	60fa      	str	r2, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f9      	bne.n	8001f00 <RCC_Delay+0x1c>
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	20000004 	.word	0x20000004
 8001f1c:	10624dd3 	.word	0x10624dd3

08001f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e041      	b.n	8001fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe fdf2 	bl	8000b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4610      	mov	r0, r2
 8001f60:	f000 fa74 	bl	800244c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d001      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e03a      	b.n	800204e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_TIM_Base_Start_IT+0x98>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00e      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x58>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002002:	d009      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x58>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <HAL_TIM_Base_Start_IT+0x9c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d004      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x58>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a13      	ldr	r2, [pc, #76]	; (8002060 <HAL_TIM_Base_Start_IT+0xa0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d111      	bne.n	800203c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b06      	cmp	r3, #6
 8002028:	d010      	beq.n	800204c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0201 	orr.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203a:	e007      	b.n	800204c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40000400 	.word	0x40000400
 8002060:	40000800 	.word	0x40000800

08002064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b02      	cmp	r3, #2
 8002078:	d122      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b02      	cmp	r3, #2
 8002086:	d11b      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0202 	mvn.w	r2, #2
 8002090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f9b4 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 80020ac:	e005      	b.n	80020ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f9a7 	bl	8002402 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f9b6 	bl	8002426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d122      	bne.n	8002114 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d11b      	bne.n	8002114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0204 	mvn.w	r2, #4
 80020e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2202      	movs	r2, #2
 80020ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f98a 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f97d 	bl	8002402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f98c 	bl	8002426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b08      	cmp	r3, #8
 8002120:	d122      	bne.n	8002168 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b08      	cmp	r3, #8
 800212e:	d11b      	bne.n	8002168 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0208 	mvn.w	r2, #8
 8002138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2204      	movs	r2, #4
 800213e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f960 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f953 	bl	8002402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f962 	bl	8002426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b10      	cmp	r3, #16
 8002174:	d122      	bne.n	80021bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b10      	cmp	r3, #16
 8002182:	d11b      	bne.n	80021bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0210 	mvn.w	r2, #16
 800218c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2208      	movs	r2, #8
 8002192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f936 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 80021a8:	e005      	b.n	80021b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f929 	bl	8002402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f938 	bl	8002426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d10e      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0201 	mvn.w	r2, #1
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fb38 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b80      	cmp	r3, #128	; 0x80
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d107      	bne.n	8002214 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fa7b 	bl	800270a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	d10e      	bne.n	8002240 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222c:	2b40      	cmp	r3, #64	; 0x40
 800222e:	d107      	bne.n	8002240 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f8fc 	bl	8002438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b20      	cmp	r3, #32
 800224c:	d10e      	bne.n	800226c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b20      	cmp	r3, #32
 800225a:	d107      	bne.n	800226c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0220 	mvn.w	r2, #32
 8002264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fa46 	bl	80026f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_TIM_ConfigClockSource+0x1c>
 800228c:	2302      	movs	r3, #2
 800228e:	e0b4      	b.n	80023fa <HAL_TIM_ConfigClockSource+0x186>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c8:	d03e      	beq.n	8002348 <HAL_TIM_ConfigClockSource+0xd4>
 80022ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ce:	f200 8087 	bhi.w	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d6:	f000 8086 	beq.w	80023e6 <HAL_TIM_ConfigClockSource+0x172>
 80022da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022de:	d87f      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e0:	2b70      	cmp	r3, #112	; 0x70
 80022e2:	d01a      	beq.n	800231a <HAL_TIM_ConfigClockSource+0xa6>
 80022e4:	2b70      	cmp	r3, #112	; 0x70
 80022e6:	d87b      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e8:	2b60      	cmp	r3, #96	; 0x60
 80022ea:	d050      	beq.n	800238e <HAL_TIM_ConfigClockSource+0x11a>
 80022ec:	2b60      	cmp	r3, #96	; 0x60
 80022ee:	d877      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022f0:	2b50      	cmp	r3, #80	; 0x50
 80022f2:	d03c      	beq.n	800236e <HAL_TIM_ConfigClockSource+0xfa>
 80022f4:	2b50      	cmp	r3, #80	; 0x50
 80022f6:	d873      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d058      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0x13a>
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d86f      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002300:	2b30      	cmp	r3, #48	; 0x30
 8002302:	d064      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x15a>
 8002304:	2b30      	cmp	r3, #48	; 0x30
 8002306:	d86b      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002308:	2b20      	cmp	r3, #32
 800230a:	d060      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x15a>
 800230c:	2b20      	cmp	r3, #32
 800230e:	d867      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002310:	2b00      	cmp	r3, #0
 8002312:	d05c      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x15a>
 8002314:	2b10      	cmp	r3, #16
 8002316:	d05a      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x15a>
 8002318:	e062      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800232a:	f000 f968 	bl	80025fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800233c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	609a      	str	r2, [r3, #8]
      break;
 8002346:	e04f      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002358:	f000 f951 	bl	80025fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800236a:	609a      	str	r2, [r3, #8]
      break;
 800236c:	e03c      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800237a:	461a      	mov	r2, r3
 800237c:	f000 f8c8 	bl	8002510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2150      	movs	r1, #80	; 0x50
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f91f 	bl	80025ca <TIM_ITRx_SetConfig>
      break;
 800238c:	e02c      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800239a:	461a      	mov	r2, r3
 800239c:	f000 f8e6 	bl	800256c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2160      	movs	r1, #96	; 0x60
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f90f 	bl	80025ca <TIM_ITRx_SetConfig>
      break;
 80023ac:	e01c      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ba:	461a      	mov	r2, r3
 80023bc:	f000 f8a8 	bl	8002510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2140      	movs	r1, #64	; 0x40
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f8ff 	bl	80025ca <TIM_ITRx_SetConfig>
      break;
 80023cc:	e00c      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f000 f8f6 	bl	80025ca <TIM_ITRx_SetConfig>
      break;
 80023de:	e003      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      break;
 80023e4:	e000      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
	...

0800244c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a29      	ldr	r2, [pc, #164]	; (8002504 <TIM_Base_SetConfig+0xb8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00b      	beq.n	800247c <TIM_Base_SetConfig+0x30>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246a:	d007      	beq.n	800247c <TIM_Base_SetConfig+0x30>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a26      	ldr	r2, [pc, #152]	; (8002508 <TIM_Base_SetConfig+0xbc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <TIM_Base_SetConfig+0x30>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a25      	ldr	r2, [pc, #148]	; (800250c <TIM_Base_SetConfig+0xc0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d108      	bne.n	800248e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <TIM_Base_SetConfig+0xb8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00b      	beq.n	80024ae <TIM_Base_SetConfig+0x62>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249c:	d007      	beq.n	80024ae <TIM_Base_SetConfig+0x62>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a19      	ldr	r2, [pc, #100]	; (8002508 <TIM_Base_SetConfig+0xbc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d003      	beq.n	80024ae <TIM_Base_SetConfig+0x62>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <TIM_Base_SetConfig+0xc0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d108      	bne.n	80024c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a07      	ldr	r2, [pc, #28]	; (8002504 <TIM_Base_SetConfig+0xb8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d103      	bne.n	80024f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	615a      	str	r2, [r3, #20]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40000400 	.word	0x40000400
 800250c:	40000800 	.word	0x40000800

08002510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f023 0201 	bic.w	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800253a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f023 030a 	bic.w	r3, r3, #10
 800254c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	621a      	str	r2, [r3, #32]
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	f023 0210 	bic.w	r2, r3, #16
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	031b      	lsls	r3, r3, #12
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	621a      	str	r2, [r3, #32]
}
 80025c0:	bf00      	nop
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f043 0307 	orr.w	r3, r3, #7
 80025ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr

080025fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025fe:	b480      	push	{r7}
 8002600:	b087      	sub	sp, #28
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002618:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	021a      	lsls	r2, r3, #8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	431a      	orrs	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4313      	orrs	r3, r2
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	609a      	str	r2, [r3, #8]
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002650:	2302      	movs	r3, #2
 8002652:	e046      	b.n	80026e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a16      	ldr	r2, [pc, #88]	; (80026ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00e      	beq.n	80026b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a0:	d009      	beq.n	80026b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d004      	beq.n	80026b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a10      	ldr	r2, [pc, #64]	; (80026f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10c      	bne.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	40012c00 	.word	0x40012c00
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40000800 	.word	0x40000800

080026f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e042      	b.n	80027b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fa18 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	; 0x24
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800275e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f82b 	bl	80027bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027f6:	f023 030c 	bic.w	r3, r3, #12
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	430b      	orrs	r3, r1
 8002802:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2c      	ldr	r2, [pc, #176]	; (80028d0 <UART_SetConfig+0x114>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d103      	bne.n	800282c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002824:	f7ff fb4a 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	e002      	b.n	8002832 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800282c:	f7ff fb32 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8002830:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009a      	lsls	r2, r3, #2
 800283c:	441a      	add	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <UART_SetConfig+0x118>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	0119      	lsls	r1, r3, #4
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	009a      	lsls	r2, r3, #2
 800285c:	441a      	add	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	fbb2 f2f3 	udiv	r2, r2, r3
 8002868:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <UART_SetConfig+0x118>)
 800286a:	fba3 0302 	umull	r0, r3, r3, r2
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2064      	movs	r0, #100	; 0x64
 8002872:	fb00 f303 	mul.w	r3, r0, r3
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	3332      	adds	r3, #50	; 0x32
 800287c:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <UART_SetConfig+0x118>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002888:	4419      	add	r1, r3
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	009a      	lsls	r2, r3, #2
 8002894:	441a      	add	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <UART_SetConfig+0x118>)
 80028a2:	fba3 0302 	umull	r0, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2064      	movs	r0, #100	; 0x64
 80028aa:	fb00 f303 	mul.w	r3, r0, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	3332      	adds	r3, #50	; 0x32
 80028b4:	4a07      	ldr	r2, [pc, #28]	; (80028d4 <UART_SetConfig+0x118>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	f003 020f 	and.w	r2, r3, #15
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	440a      	add	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40013800 	.word	0x40013800
 80028d4:	51eb851f 	.word	0x51eb851f

080028d8 <malloc>:
 80028d8:	4b02      	ldr	r3, [pc, #8]	; (80028e4 <malloc+0xc>)
 80028da:	4601      	mov	r1, r0
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	f000 b82b 	b.w	8002938 <_malloc_r>
 80028e2:	bf00      	nop
 80028e4:	2000005c 	.word	0x2000005c

080028e8 <free>:
 80028e8:	4b02      	ldr	r3, [pc, #8]	; (80028f4 <free+0xc>)
 80028ea:	4601      	mov	r1, r0
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	f000 b8f3 	b.w	8002ad8 <_free_r>
 80028f2:	bf00      	nop
 80028f4:	2000005c 	.word	0x2000005c

080028f8 <sbrk_aligned>:
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	4e0e      	ldr	r6, [pc, #56]	; (8002934 <sbrk_aligned+0x3c>)
 80028fc:	460c      	mov	r4, r1
 80028fe:	6831      	ldr	r1, [r6, #0]
 8002900:	4605      	mov	r5, r0
 8002902:	b911      	cbnz	r1, 800290a <sbrk_aligned+0x12>
 8002904:	f000 f8ac 	bl	8002a60 <_sbrk_r>
 8002908:	6030      	str	r0, [r6, #0]
 800290a:	4621      	mov	r1, r4
 800290c:	4628      	mov	r0, r5
 800290e:	f000 f8a7 	bl	8002a60 <_sbrk_r>
 8002912:	1c43      	adds	r3, r0, #1
 8002914:	d00a      	beq.n	800292c <sbrk_aligned+0x34>
 8002916:	1cc4      	adds	r4, r0, #3
 8002918:	f024 0403 	bic.w	r4, r4, #3
 800291c:	42a0      	cmp	r0, r4
 800291e:	d007      	beq.n	8002930 <sbrk_aligned+0x38>
 8002920:	1a21      	subs	r1, r4, r0
 8002922:	4628      	mov	r0, r5
 8002924:	f000 f89c 	bl	8002a60 <_sbrk_r>
 8002928:	3001      	adds	r0, #1
 800292a:	d101      	bne.n	8002930 <sbrk_aligned+0x38>
 800292c:	f04f 34ff 	mov.w	r4, #4294967295
 8002930:	4620      	mov	r0, r4
 8002932:	bd70      	pop	{r4, r5, r6, pc}
 8002934:	200001d0 	.word	0x200001d0

08002938 <_malloc_r>:
 8002938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800293c:	1ccd      	adds	r5, r1, #3
 800293e:	f025 0503 	bic.w	r5, r5, #3
 8002942:	3508      	adds	r5, #8
 8002944:	2d0c      	cmp	r5, #12
 8002946:	bf38      	it	cc
 8002948:	250c      	movcc	r5, #12
 800294a:	2d00      	cmp	r5, #0
 800294c:	4607      	mov	r7, r0
 800294e:	db01      	blt.n	8002954 <_malloc_r+0x1c>
 8002950:	42a9      	cmp	r1, r5
 8002952:	d905      	bls.n	8002960 <_malloc_r+0x28>
 8002954:	230c      	movs	r3, #12
 8002956:	2600      	movs	r6, #0
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4630      	mov	r0, r6
 800295c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002960:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002a34 <_malloc_r+0xfc>
 8002964:	f000 f868 	bl	8002a38 <__malloc_lock>
 8002968:	f8d8 3000 	ldr.w	r3, [r8]
 800296c:	461c      	mov	r4, r3
 800296e:	bb5c      	cbnz	r4, 80029c8 <_malloc_r+0x90>
 8002970:	4629      	mov	r1, r5
 8002972:	4638      	mov	r0, r7
 8002974:	f7ff ffc0 	bl	80028f8 <sbrk_aligned>
 8002978:	1c43      	adds	r3, r0, #1
 800297a:	4604      	mov	r4, r0
 800297c:	d155      	bne.n	8002a2a <_malloc_r+0xf2>
 800297e:	f8d8 4000 	ldr.w	r4, [r8]
 8002982:	4626      	mov	r6, r4
 8002984:	2e00      	cmp	r6, #0
 8002986:	d145      	bne.n	8002a14 <_malloc_r+0xdc>
 8002988:	2c00      	cmp	r4, #0
 800298a:	d048      	beq.n	8002a1e <_malloc_r+0xe6>
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	4631      	mov	r1, r6
 8002990:	4638      	mov	r0, r7
 8002992:	eb04 0903 	add.w	r9, r4, r3
 8002996:	f000 f863 	bl	8002a60 <_sbrk_r>
 800299a:	4581      	cmp	r9, r0
 800299c:	d13f      	bne.n	8002a1e <_malloc_r+0xe6>
 800299e:	6821      	ldr	r1, [r4, #0]
 80029a0:	4638      	mov	r0, r7
 80029a2:	1a6d      	subs	r5, r5, r1
 80029a4:	4629      	mov	r1, r5
 80029a6:	f7ff ffa7 	bl	80028f8 <sbrk_aligned>
 80029aa:	3001      	adds	r0, #1
 80029ac:	d037      	beq.n	8002a1e <_malloc_r+0xe6>
 80029ae:	6823      	ldr	r3, [r4, #0]
 80029b0:	442b      	add	r3, r5
 80029b2:	6023      	str	r3, [r4, #0]
 80029b4:	f8d8 3000 	ldr.w	r3, [r8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d038      	beq.n	8002a2e <_malloc_r+0xf6>
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	42a2      	cmp	r2, r4
 80029c0:	d12b      	bne.n	8002a1a <_malloc_r+0xe2>
 80029c2:	2200      	movs	r2, #0
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	e00f      	b.n	80029e8 <_malloc_r+0xb0>
 80029c8:	6822      	ldr	r2, [r4, #0]
 80029ca:	1b52      	subs	r2, r2, r5
 80029cc:	d41f      	bmi.n	8002a0e <_malloc_r+0xd6>
 80029ce:	2a0b      	cmp	r2, #11
 80029d0:	d917      	bls.n	8002a02 <_malloc_r+0xca>
 80029d2:	1961      	adds	r1, r4, r5
 80029d4:	42a3      	cmp	r3, r4
 80029d6:	6025      	str	r5, [r4, #0]
 80029d8:	bf18      	it	ne
 80029da:	6059      	strne	r1, [r3, #4]
 80029dc:	6863      	ldr	r3, [r4, #4]
 80029de:	bf08      	it	eq
 80029e0:	f8c8 1000 	streq.w	r1, [r8]
 80029e4:	5162      	str	r2, [r4, r5]
 80029e6:	604b      	str	r3, [r1, #4]
 80029e8:	4638      	mov	r0, r7
 80029ea:	f104 060b 	add.w	r6, r4, #11
 80029ee:	f000 f829 	bl	8002a44 <__malloc_unlock>
 80029f2:	f026 0607 	bic.w	r6, r6, #7
 80029f6:	1d23      	adds	r3, r4, #4
 80029f8:	1af2      	subs	r2, r6, r3
 80029fa:	d0ae      	beq.n	800295a <_malloc_r+0x22>
 80029fc:	1b9b      	subs	r3, r3, r6
 80029fe:	50a3      	str	r3, [r4, r2]
 8002a00:	e7ab      	b.n	800295a <_malloc_r+0x22>
 8002a02:	42a3      	cmp	r3, r4
 8002a04:	6862      	ldr	r2, [r4, #4]
 8002a06:	d1dd      	bne.n	80029c4 <_malloc_r+0x8c>
 8002a08:	f8c8 2000 	str.w	r2, [r8]
 8002a0c:	e7ec      	b.n	80029e8 <_malloc_r+0xb0>
 8002a0e:	4623      	mov	r3, r4
 8002a10:	6864      	ldr	r4, [r4, #4]
 8002a12:	e7ac      	b.n	800296e <_malloc_r+0x36>
 8002a14:	4634      	mov	r4, r6
 8002a16:	6876      	ldr	r6, [r6, #4]
 8002a18:	e7b4      	b.n	8002984 <_malloc_r+0x4c>
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	e7cc      	b.n	80029b8 <_malloc_r+0x80>
 8002a1e:	230c      	movs	r3, #12
 8002a20:	4638      	mov	r0, r7
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	f000 f80e 	bl	8002a44 <__malloc_unlock>
 8002a28:	e797      	b.n	800295a <_malloc_r+0x22>
 8002a2a:	6025      	str	r5, [r4, #0]
 8002a2c:	e7dc      	b.n	80029e8 <_malloc_r+0xb0>
 8002a2e:	605b      	str	r3, [r3, #4]
 8002a30:	deff      	udf	#255	; 0xff
 8002a32:	bf00      	nop
 8002a34:	200001cc 	.word	0x200001cc

08002a38 <__malloc_lock>:
 8002a38:	4801      	ldr	r0, [pc, #4]	; (8002a40 <__malloc_lock+0x8>)
 8002a3a:	f000 b84b 	b.w	8002ad4 <__retarget_lock_acquire_recursive>
 8002a3e:	bf00      	nop
 8002a40:	20000310 	.word	0x20000310

08002a44 <__malloc_unlock>:
 8002a44:	4801      	ldr	r0, [pc, #4]	; (8002a4c <__malloc_unlock+0x8>)
 8002a46:	f000 b846 	b.w	8002ad6 <__retarget_lock_release_recursive>
 8002a4a:	bf00      	nop
 8002a4c:	20000310 	.word	0x20000310

08002a50 <memset>:
 8002a50:	4603      	mov	r3, r0
 8002a52:	4402      	add	r2, r0
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d100      	bne.n	8002a5a <memset+0xa>
 8002a58:	4770      	bx	lr
 8002a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a5e:	e7f9      	b.n	8002a54 <memset+0x4>

08002a60 <_sbrk_r>:
 8002a60:	b538      	push	{r3, r4, r5, lr}
 8002a62:	2300      	movs	r3, #0
 8002a64:	4d05      	ldr	r5, [pc, #20]	; (8002a7c <_sbrk_r+0x1c>)
 8002a66:	4604      	mov	r4, r0
 8002a68:	4608      	mov	r0, r1
 8002a6a:	602b      	str	r3, [r5, #0]
 8002a6c:	f7fe f94e 	bl	8000d0c <_sbrk>
 8002a70:	1c43      	adds	r3, r0, #1
 8002a72:	d102      	bne.n	8002a7a <_sbrk_r+0x1a>
 8002a74:	682b      	ldr	r3, [r5, #0]
 8002a76:	b103      	cbz	r3, 8002a7a <_sbrk_r+0x1a>
 8002a78:	6023      	str	r3, [r4, #0]
 8002a7a:	bd38      	pop	{r3, r4, r5, pc}
 8002a7c:	2000030c 	.word	0x2000030c

08002a80 <__errno>:
 8002a80:	4b01      	ldr	r3, [pc, #4]	; (8002a88 <__errno+0x8>)
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	2000005c 	.word	0x2000005c

08002a8c <__libc_init_array>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	2600      	movs	r6, #0
 8002a90:	4d0c      	ldr	r5, [pc, #48]	; (8002ac4 <__libc_init_array+0x38>)
 8002a92:	4c0d      	ldr	r4, [pc, #52]	; (8002ac8 <__libc_init_array+0x3c>)
 8002a94:	1b64      	subs	r4, r4, r5
 8002a96:	10a4      	asrs	r4, r4, #2
 8002a98:	42a6      	cmp	r6, r4
 8002a9a:	d109      	bne.n	8002ab0 <__libc_init_array+0x24>
 8002a9c:	f000 f864 	bl	8002b68 <_init>
 8002aa0:	2600      	movs	r6, #0
 8002aa2:	4d0a      	ldr	r5, [pc, #40]	; (8002acc <__libc_init_array+0x40>)
 8002aa4:	4c0a      	ldr	r4, [pc, #40]	; (8002ad0 <__libc_init_array+0x44>)
 8002aa6:	1b64      	subs	r4, r4, r5
 8002aa8:	10a4      	asrs	r4, r4, #2
 8002aaa:	42a6      	cmp	r6, r4
 8002aac:	d105      	bne.n	8002aba <__libc_init_array+0x2e>
 8002aae:	bd70      	pop	{r4, r5, r6, pc}
 8002ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab4:	4798      	blx	r3
 8002ab6:	3601      	adds	r6, #1
 8002ab8:	e7ee      	b.n	8002a98 <__libc_init_array+0xc>
 8002aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002abe:	4798      	blx	r3
 8002ac0:	3601      	adds	r6, #1
 8002ac2:	e7f2      	b.n	8002aaa <__libc_init_array+0x1e>
 8002ac4:	08002bac 	.word	0x08002bac
 8002ac8:	08002bac 	.word	0x08002bac
 8002acc:	08002bac 	.word	0x08002bac
 8002ad0:	08002bb0 	.word	0x08002bb0

08002ad4 <__retarget_lock_acquire_recursive>:
 8002ad4:	4770      	bx	lr

08002ad6 <__retarget_lock_release_recursive>:
 8002ad6:	4770      	bx	lr

08002ad8 <_free_r>:
 8002ad8:	b538      	push	{r3, r4, r5, lr}
 8002ada:	4605      	mov	r5, r0
 8002adc:	2900      	cmp	r1, #0
 8002ade:	d040      	beq.n	8002b62 <_free_r+0x8a>
 8002ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ae4:	1f0c      	subs	r4, r1, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bfb8      	it	lt
 8002aea:	18e4      	addlt	r4, r4, r3
 8002aec:	f7ff ffa4 	bl	8002a38 <__malloc_lock>
 8002af0:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <_free_r+0x8c>)
 8002af2:	6813      	ldr	r3, [r2, #0]
 8002af4:	b933      	cbnz	r3, 8002b04 <_free_r+0x2c>
 8002af6:	6063      	str	r3, [r4, #4]
 8002af8:	6014      	str	r4, [r2, #0]
 8002afa:	4628      	mov	r0, r5
 8002afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b00:	f7ff bfa0 	b.w	8002a44 <__malloc_unlock>
 8002b04:	42a3      	cmp	r3, r4
 8002b06:	d908      	bls.n	8002b1a <_free_r+0x42>
 8002b08:	6820      	ldr	r0, [r4, #0]
 8002b0a:	1821      	adds	r1, r4, r0
 8002b0c:	428b      	cmp	r3, r1
 8002b0e:	bf01      	itttt	eq
 8002b10:	6819      	ldreq	r1, [r3, #0]
 8002b12:	685b      	ldreq	r3, [r3, #4]
 8002b14:	1809      	addeq	r1, r1, r0
 8002b16:	6021      	streq	r1, [r4, #0]
 8002b18:	e7ed      	b.n	8002af6 <_free_r+0x1e>
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	b10b      	cbz	r3, 8002b24 <_free_r+0x4c>
 8002b20:	42a3      	cmp	r3, r4
 8002b22:	d9fa      	bls.n	8002b1a <_free_r+0x42>
 8002b24:	6811      	ldr	r1, [r2, #0]
 8002b26:	1850      	adds	r0, r2, r1
 8002b28:	42a0      	cmp	r0, r4
 8002b2a:	d10b      	bne.n	8002b44 <_free_r+0x6c>
 8002b2c:	6820      	ldr	r0, [r4, #0]
 8002b2e:	4401      	add	r1, r0
 8002b30:	1850      	adds	r0, r2, r1
 8002b32:	4283      	cmp	r3, r0
 8002b34:	6011      	str	r1, [r2, #0]
 8002b36:	d1e0      	bne.n	8002afa <_free_r+0x22>
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4408      	add	r0, r1
 8002b3e:	6010      	str	r0, [r2, #0]
 8002b40:	6053      	str	r3, [r2, #4]
 8002b42:	e7da      	b.n	8002afa <_free_r+0x22>
 8002b44:	d902      	bls.n	8002b4c <_free_r+0x74>
 8002b46:	230c      	movs	r3, #12
 8002b48:	602b      	str	r3, [r5, #0]
 8002b4a:	e7d6      	b.n	8002afa <_free_r+0x22>
 8002b4c:	6820      	ldr	r0, [r4, #0]
 8002b4e:	1821      	adds	r1, r4, r0
 8002b50:	428b      	cmp	r3, r1
 8002b52:	bf01      	itttt	eq
 8002b54:	6819      	ldreq	r1, [r3, #0]
 8002b56:	685b      	ldreq	r3, [r3, #4]
 8002b58:	1809      	addeq	r1, r1, r0
 8002b5a:	6021      	streq	r1, [r4, #0]
 8002b5c:	6063      	str	r3, [r4, #4]
 8002b5e:	6054      	str	r4, [r2, #4]
 8002b60:	e7cb      	b.n	8002afa <_free_r+0x22>
 8002b62:	bd38      	pop	{r3, r4, r5, pc}
 8002b64:	200001cc 	.word	0x200001cc

08002b68 <_init>:
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6a:	bf00      	nop
 8002b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6e:	bc08      	pop	{r3}
 8002b70:	469e      	mov	lr, r3
 8002b72:	4770      	bx	lr

08002b74 <_fini>:
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b76:	bf00      	nop
 8002b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7a:	bc08      	pop	{r3}
 8002b7c:	469e      	mov	lr, r3
 8002b7e:	4770      	bx	lr
