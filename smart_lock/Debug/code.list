
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d3c  08004d3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004d3c  08004d3c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d3c  08004d3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d3c  08004d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000070  08004db4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004db4  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105a8  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a27  00000000  00000000  00030684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  000330b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d59  00000000  00000000  000341c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000195cc  00000000  00000000  00034f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d84  00000000  00000000  0004e4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d3dd  00000000  00000000  00064271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bf0  00000000  00000000  000f1650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f6240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bcc 	.word	0x08004bcc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004bcc 	.word	0x08004bcc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f001 fa92 	bl	800168c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f80f 	bl	800018a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f916 	bl	800039c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000170:	f000 f874 	bl	800025c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000174:	f000 f844 	bl	8000200 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000178:	f000 f8bc 	bl	80002f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800017c:	f000 f8e4 	bl	8000348 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000180:	f001 f8a6 	bl	80012d0 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000184:	f001 f8be 	bl	8001304 <loop>
 8000188:	e7fc      	b.n	8000184 <main+0x24>

0800018a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018a:	b580      	push	{r7, lr}
 800018c:	b090      	sub	sp, #64	; 0x40
 800018e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000190:	f107 0318 	add.w	r3, r7, #24
 8000194:	2228      	movs	r2, #40	; 0x28
 8000196:	2100      	movs	r1, #0
 8000198:	4618      	mov	r0, r3
 800019a:	f004 f929 	bl	80043f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	605a      	str	r2, [r3, #4]
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	60da      	str	r2, [r3, #12]
 80001aa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ac:	2302      	movs	r3, #2
 80001ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b0:	2301      	movs	r3, #1
 80001b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b4:	2310      	movs	r3, #16
 80001b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001b8:	2300      	movs	r3, #0
 80001ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001bc:	f107 0318 	add.w	r3, r7, #24
 80001c0:	4618      	mov	r0, r3
 80001c2:	f002 faf9 	bl	80027b8 <HAL_RCC_OscConfig>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001cc:	f000 f962 	bl	8000494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d0:	230f      	movs	r3, #15
 80001d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f002 fd67 	bl	8002cbc <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001f4:	f000 f94e 	bl	8000494 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	; 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000204:	4b12      	ldr	r3, [pc, #72]	; (8000250 <MX_I2C1_Init+0x50>)
 8000206:	4a13      	ldr	r2, [pc, #76]	; (8000254 <MX_I2C1_Init+0x54>)
 8000208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800020a:	4b11      	ldr	r3, [pc, #68]	; (8000250 <MX_I2C1_Init+0x50>)
 800020c:	4a12      	ldr	r2, [pc, #72]	; (8000258 <MX_I2C1_Init+0x58>)
 800020e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000210:	4b0f      	ldr	r3, [pc, #60]	; (8000250 <MX_I2C1_Init+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000216:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <MX_I2C1_Init+0x50>)
 8000218:	2200      	movs	r2, #0
 800021a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <MX_I2C1_Init+0x50>)
 800021e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000224:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <MX_I2C1_Init+0x50>)
 8000226:	2200      	movs	r2, #0
 8000228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <MX_I2C1_Init+0x50>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <MX_I2C1_Init+0x50>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <MX_I2C1_Init+0x50>)
 8000238:	2200      	movs	r2, #0
 800023a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <MX_I2C1_Init+0x50>)
 800023e:	f001 fe1f 	bl	8001e80 <HAL_I2C_Init>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000248:	f000 f924 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000008c 	.word	0x2000008c
 8000254:	40005400 	.word	0x40005400
 8000258:	000186a0 	.word	0x000186a0

0800025c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b086      	sub	sp, #24
 8000260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000262:	f107 0308 	add.w	r3, r7, #8
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000270:	463b      	mov	r3, r7
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000278:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <MX_TIM2_Init+0x94>)
 800027a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800027e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000280:	4b1b      	ldr	r3, [pc, #108]	; (80002f0 <MX_TIM2_Init+0x94>)
 8000282:	2207      	movs	r2, #7
 8000284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000286:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <MX_TIM2_Init+0x94>)
 8000288:	2200      	movs	r2, #0
 800028a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <MX_TIM2_Init+0x94>)
 800028e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <MX_TIM2_Init+0x94>)
 8000296:	2200      	movs	r2, #0
 8000298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <MX_TIM2_Init+0x94>)
 800029c:	2200      	movs	r2, #0
 800029e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002a0:	4813      	ldr	r0, [pc, #76]	; (80002f0 <MX_TIM2_Init+0x94>)
 80002a2:	f002 fe99 	bl	8002fd8 <HAL_TIM_Base_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002ac:	f000 f8f2 	bl	8000494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002b6:	f107 0308 	add.w	r3, r7, #8
 80002ba:	4619      	mov	r1, r3
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <MX_TIM2_Init+0x94>)
 80002be:	f003 f835 	bl	800332c <HAL_TIM_ConfigClockSource>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002c8:	f000 f8e4 	bl	8000494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002cc:	2300      	movs	r3, #0
 80002ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002d4:	463b      	mov	r3, r7
 80002d6:	4619      	mov	r1, r3
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_TIM2_Init+0x94>)
 80002da:	f003 fa0b 	bl	80036f4 <HAL_TIMEx_MasterConfigSynchronization>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002e4:	f000 f8d6 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002e8:	bf00      	nop
 80002ea:	3718      	adds	r7, #24
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200000e0 	.word	0x200000e0

080002f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 80002fa:	4a12      	ldr	r2, [pc, #72]	; (8000344 <MX_USART1_UART_Init+0x50>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 800032c:	f003 fa52 	bl	80037d4 <HAL_UART_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000336:	f000 f8ad 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000128 	.word	0x20000128
 8000344:	40013800 	.word	0x40013800

08000348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 800034e:	4a12      	ldr	r2, [pc, #72]	; (8000398 <MX_USART2_UART_Init+0x50>)
 8000350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 8000354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000366:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800036c:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 800036e:	220c      	movs	r2, #12
 8000370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 8000380:	f003 fa28 	bl	80037d4 <HAL_UART_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800038a:	f000 f883 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000170 	.word	0x20000170
 8000398:	40004400 	.word	0x40004400

0800039c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b088      	sub	sp, #32
 80003a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b0:	4b34      	ldr	r3, [pc, #208]	; (8000484 <MX_GPIO_Init+0xe8>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a33      	ldr	r2, [pc, #204]	; (8000484 <MX_GPIO_Init+0xe8>)
 80003b6:	f043 0310 	orr.w	r3, r3, #16
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <MX_GPIO_Init+0xe8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0310 	and.w	r3, r3, #16
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <MX_GPIO_Init+0xe8>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a2d      	ldr	r2, [pc, #180]	; (8000484 <MX_GPIO_Init+0xe8>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b2b      	ldr	r3, [pc, #172]	; (8000484 <MX_GPIO_Init+0xe8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	60bb      	str	r3, [r7, #8]
 80003de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e0:	4b28      	ldr	r3, [pc, #160]	; (8000484 <MX_GPIO_Init+0xe8>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a27      	ldr	r2, [pc, #156]	; (8000484 <MX_GPIO_Init+0xe8>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b25      	ldr	r3, [pc, #148]	; (8000484 <MX_GPIO_Init+0xe8>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fe:	4822      	ldr	r0, [pc, #136]	; (8000488 <MX_GPIO_Init+0xec>)
 8000400:	f001 fd25 	bl	8001e4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f640 4102 	movw	r1, #3074	; 0xc02
 800040a:	4820      	ldr	r0, [pc, #128]	; (800048c <MX_GPIO_Init+0xf0>)
 800040c:	f001 fd1f 	bl	8001e4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	4619      	mov	r1, r3
 8000428:	4817      	ldr	r0, [pc, #92]	; (8000488 <MX_GPIO_Init+0xec>)
 800042a:	f001 fb75 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800042e:	2310      	movs	r3, #16
 8000430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000436:	2301      	movs	r3, #1
 8000438:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	f107 0310 	add.w	r3, r7, #16
 800043e:	4619      	mov	r1, r3
 8000440:	4813      	ldr	r0, [pc, #76]	; (8000490 <MX_GPIO_Init+0xf4>)
 8000442:	f001 fb69 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000446:	2301      	movs	r3, #1
 8000448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800044e:	2301      	movs	r3, #1
 8000450:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	4619      	mov	r1, r3
 8000458:	480c      	ldr	r0, [pc, #48]	; (800048c <MX_GPIO_Init+0xf0>)
 800045a:	f001 fb5d 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 800045e:	f640 4302 	movw	r3, #3074	; 0xc02
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_GPIO_Init+0xf0>)
 8000478:	f001 fb4e 	bl	8001b18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800047c:	bf00      	nop
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000
 8000488:	40011000 	.word	0x40011000
 800048c:	40010c00 	.word	0x40010c00
 8000490:	40010800 	.word	0x40010800

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	e7fe      	b.n	800049c <Error_Handler+0x8>

0800049e <cal>:

enum {
	INIT, SLEEP, PASSWORD, WRONG, UNLOCK, CHANGE_PASS
} st_lock;

uint8_t cal(uint8_t button_id) {
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	71fb      	strb	r3, [r7, #7]
	return button_id / 4 + button_id % 4 + button_id / 4 * 2 + 1;
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	b2da      	uxtb	r2, r3
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	f003 0303 	and.w	r3, r3, #3
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	4413      	add	r3, r2
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	089b      	lsrs	r3, r3, #2
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	4413      	add	r3, r2
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	3301      	adds	r3, #1
 80004ca:	b2db      	uxtb	r3, r3
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <fsm_lock>:
//
bool wrong_input_flag = 0;
// flag for refill pass. 0: nothing, 1: refill password
bool change_pass_flag = 0;

void fsm_lock(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	switch (st_lock) {
 80004dc:	4b29      	ldr	r3, [pc, #164]	; (8000584 <fsm_lock+0xac>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b05      	cmp	r3, #5
 80004e2:	d84c      	bhi.n	800057e <fsm_lock+0xa6>
 80004e4:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <fsm_lock+0x14>)
 80004e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ea:	bf00      	nop
 80004ec:	08000505 	.word	0x08000505
 80004f0:	08000509 	.word	0x08000509
 80004f4:	08000513 	.word	0x08000513
 80004f8:	0800053b 	.word	0x0800053b
 80004fc:	08000565 	.word	0x08000565
 8000500:	08000527 	.word	0x08000527
	case INIT:
		switch_lock_to_sleep();
 8000504:	f000 f9b2 	bl	800086c <switch_lock_to_sleep>
	case SLEEP:
		lock_close();
 8000508:	f000 fd3a 	bl	8000f80 <lock_close>
		fsm_keypad();
 800050c:	f000 f842 	bl	8000594 <fsm_keypad>
		break;
 8000510:	e035      	b.n	800057e <fsm_lock+0xa6>
	case PASSWORD:
		// if over 15s not do anything, return to sleep
		if (time_out()) {
 8000512:	f000 f9f5 	bl	8000900 <time_out>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <fsm_lock+0x48>
			switch_lock_to_sleep();
 800051c:	f000 f9a6 	bl	800086c <switch_lock_to_sleep>
		}
		fsm_keypad();
 8000520:	f000 f838 	bl	8000594 <fsm_keypad>
		break;
 8000524:	e02b      	b.n	800057e <fsm_lock+0xa6>
	case CHANGE_PASS:
		// if over 15s not do anything, return to sleep
		if (time_out()) {
 8000526:	f000 f9eb 	bl	8000900 <time_out>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <fsm_lock+0x5c>
			switch_lock_to_sleep();
 8000530:	f000 f99c 	bl	800086c <switch_lock_to_sleep>
		}
		fsm_keypad();
 8000534:	f000 f82e 	bl	8000594 <fsm_keypad>
		break;
 8000538:	e021      	b.n	800057e <fsm_lock+0xa6>
	case WRONG:
		//
		if (wrong_input_cnt > 3) {
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <fsm_lock+0xb0>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b03      	cmp	r3, #3
 8000540:	d908      	bls.n	8000554 <fsm_lock+0x7c>
			wrong_input_flag = 1;
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <fsm_lock+0xb4>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
			timer_for_st = BLOCK_TIME;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <fsm_lock+0xb8>)
 800054a:	2205      	movs	r2, #5
 800054c:	801a      	strh	r2, [r3, #0]
			wrong_input_cnt = 0;
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <fsm_lock+0xb0>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
		}
		if (time_out()) {
 8000554:	f000 f9d4 	bl	8000900 <time_out>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00c      	beq.n	8000578 <fsm_lock+0xa0>
			switch_lock_to_sleep();
 800055e:	f000 f985 	bl	800086c <switch_lock_to_sleep>
		}
		break;
 8000562:	e009      	b.n	8000578 <fsm_lock+0xa0>
	case UNLOCK:
		lock_open();
 8000564:	f000 fd00 	bl	8000f68 <lock_open>
		if (time_out()) {
 8000568:	f000 f9ca 	bl	8000900 <time_out>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d004      	beq.n	800057c <fsm_lock+0xa4>
			switch_lock_to_sleep();
 8000572:	f000 f97b 	bl	800086c <switch_lock_to_sleep>
		}
		break;
 8000576:	e001      	b.n	800057c <fsm_lock+0xa4>
		break;
 8000578:	bf00      	nop
 800057a:	e000      	b.n	800057e <fsm_lock+0xa6>
		break;
 800057c:	bf00      	nop
	}
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200001b8 	.word	0x200001b8
 8000588:	200001b9 	.word	0x200001b9
 800058c:	200001ba 	.word	0x200001ba
 8000590:	20000000 	.word	0x20000000

08000594 <fsm_keypad>:

static void fsm_keypad(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	uint8_t key_id = keypad_IsPressed();
 800059a:	f000 fa95 	bl	8000ac8 <keypad_IsPressed>
 800059e:	4603      	mov	r3, r0
 80005a0:	71bb      	strb	r3, [r7, #6]
	switch (key_id) {
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	f200 80f1 	bhi.w	800078c <fsm_keypad+0x1f8>
 80005aa:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <fsm_keypad+0x1c>)
 80005ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b0:	080005f1 	.word	0x080005f1
 80005b4:	080005f1 	.word	0x080005f1
 80005b8:	080005f1 	.word	0x080005f1
 80005bc:	0800078d 	.word	0x0800078d
 80005c0:	080005f1 	.word	0x080005f1
 80005c4:	080005f1 	.word	0x080005f1
 80005c8:	080005f1 	.word	0x080005f1
 80005cc:	0800078d 	.word	0x0800078d
 80005d0:	080005f1 	.word	0x080005f1
 80005d4:	080005f1 	.word	0x080005f1
 80005d8:	080005f1 	.word	0x080005f1
 80005dc:	080006cb 	.word	0x080006cb
 80005e0:	0800078d 	.word	0x0800078d
 80005e4:	080005f1 	.word	0x080005f1
 80005e8:	080006fb 	.word	0x080006fb
 80005ec:	0800078d 	.word	0x0800078d
	case 8:
	case 9:
	case 10:
	case 13:
		uint8_t number;
		switch (st_lock) {
 80005f0:	4b6d      	ldr	r3, [pc, #436]	; (80007a8 <fsm_keypad+0x214>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	d037      	beq.n	8000668 <fsm_keypad+0xd4>
 80005f8:	2b05      	cmp	r3, #5
 80005fa:	dc60      	bgt.n	80006be <fsm_keypad+0x12a>
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d002      	beq.n	8000606 <fsm_keypad+0x72>
 8000600:	2b02      	cmp	r3, #2
 8000602:	d016      	beq.n	8000632 <fsm_keypad+0x9e>
					switch_lock_to_wrong();
				}
			}
			break;
		default:
			break;
 8000604:	e05b      	b.n	80006be <fsm_keypad+0x12a>
			if (key_id == 13) {
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	2b0d      	cmp	r3, #13
 800060a:	d102      	bne.n	8000612 <fsm_keypad+0x7e>
				number = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	e005      	b.n	800061e <fsm_keypad+0x8a>
				number = cal(key_id);
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff42 	bl	800049e <cal>
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
			if (pw_update(number)) {
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fcdb 	bl	8000fdc <pw_update>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d04a      	beq.n	80006c2 <fsm_keypad+0x12e>
				switch_lock_to_password();
 800062c:	f000 f908 	bl	8000840 <switch_lock_to_password>
			break;
 8000630:	e047      	b.n	80006c2 <fsm_keypad+0x12e>
			if (key_id == 13) {
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	2b0d      	cmp	r3, #13
 8000636:	d102      	bne.n	800063e <fsm_keypad+0xaa>
				number = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	e005      	b.n	800064a <fsm_keypad+0xb6>
				number = cal(key_id);
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff2c 	bl	800049e <cal>
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
			if (pw_update(number)) {
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fcc5 	bl	8000fdc <pw_update>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d004      	beq.n	8000662 <fsm_keypad+0xce>
				reset_timer();
 8000658:	f000 f91c 	bl	8000894 <reset_timer>
				lcd_displayPW();
 800065c:	f000 fa64 	bl	8000b28 <lcd_displayPW>
			break;
 8000660:	e032      	b.n	80006c8 <fsm_keypad+0x134>
				switch_lock_to_wrong();
 8000662:	f000 f8cf 	bl	8000804 <switch_lock_to_wrong>
			break;
 8000666:	e02f      	b.n	80006c8 <fsm_keypad+0x134>
			if (key_id == 13) {
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b0d      	cmp	r3, #13
 800066c:	d102      	bne.n	8000674 <fsm_keypad+0xe0>
				number = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	71fb      	strb	r3, [r7, #7]
 8000672:	e005      	b.n	8000680 <fsm_keypad+0xec>
				number = cal(key_id);
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff11 	bl	800049e <cal>
 800067c:	4603      	mov	r3, r0
 800067e:	71fb      	strb	r3, [r7, #7]
			if (change_pass_flag) {
 8000680:	4b4a      	ldr	r3, [pc, #296]	; (80007ac <fsm_keypad+0x218>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00b      	beq.n	80006a0 <fsm_keypad+0x10c>
				if (pw_update_change(number)) {
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fc84 	bl	8000f98 <pw_update_change>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d017      	beq.n	80006c6 <fsm_keypad+0x132>
					reset_timer();
 8000696:	f000 f8fd 	bl	8000894 <reset_timer>
					lcd_displayPW_change();
 800069a:	f000 fa85 	bl	8000ba8 <lcd_displayPW_change>
			break;
 800069e:	e012      	b.n	80006c6 <fsm_keypad+0x132>
				if (pw_update(number)) {
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fc9a 	bl	8000fdc <pw_update>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d004      	beq.n	80006b8 <fsm_keypad+0x124>
					reset_timer();
 80006ae:	f000 f8f1 	bl	8000894 <reset_timer>
					lcd_displayPW();
 80006b2:	f000 fa39 	bl	8000b28 <lcd_displayPW>
			break;
 80006b6:	e006      	b.n	80006c6 <fsm_keypad+0x132>
					switch_lock_to_wrong();
 80006b8:	f000 f8a4 	bl	8000804 <switch_lock_to_wrong>
			break;
 80006bc:	e003      	b.n	80006c6 <fsm_keypad+0x132>
			break;
 80006be:	bf00      	nop
 80006c0:	e067      	b.n	8000792 <fsm_keypad+0x1fe>
			break;
 80006c2:	bf00      	nop
 80006c4:	e065      	b.n	8000792 <fsm_keypad+0x1fe>
			break;
 80006c6:	bf00      	nop
		}
		break;
 80006c8:	e063      	b.n	8000792 <fsm_keypad+0x1fe>
		break;
	case 7:
		break;

	case 11:
		switch (st_lock) {
 80006ca:	4b37      	ldr	r3, [pc, #220]	; (80007a8 <fsm_keypad+0x214>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d15e      	bne.n	8000790 <fsm_keypad+0x1fc>
		case SLEEP:
			reset_timer();
 80006d2:	f000 f8df 	bl	8000894 <reset_timer>
			LCD_display("FILL OLD PASS", "");
 80006d6:	4936      	ldr	r1, [pc, #216]	; (80007b0 <fsm_keypad+0x21c>)
 80006d8:	4836      	ldr	r0, [pc, #216]	; (80007b4 <fsm_keypad+0x220>)
 80006da:	f000 fb43 	bl	8000d64 <LCD_display>
			sch_add_task(run_timer, 0, ONE_SECOND);
 80006de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e2:	2100      	movs	r1, #0
 80006e4:	4834      	ldr	r0, [pc, #208]	; (80007b8 <fsm_keypad+0x224>)
 80006e6:	f000 fd03 	bl	80010f0 <sch_add_task>
			change_pass_flag = 1;
 80006ea:	4b30      	ldr	r3, [pc, #192]	; (80007ac <fsm_keypad+0x218>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
			st_lock = PASSWORD;
 80006f0:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <fsm_keypad+0x214>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	701a      	strb	r2, [r3, #0]
			break;
 80006f6:	bf00      	nop
		default:
		}
		break;
 80006f8:	e04a      	b.n	8000790 <fsm_keypad+0x1fc>

	case 12:
		break;

	case 14:
		switch (st_lock) {
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <fsm_keypad+0x214>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d002      	beq.n	8000708 <fsm_keypad+0x174>
 8000702:	2b05      	cmp	r3, #5
 8000704:	d01b      	beq.n	800073e <fsm_keypad+0x1aa>
				}
			}
			break;
		default:
		}
		break;
 8000706:	e044      	b.n	8000792 <fsm_keypad+0x1fe>
			if (!pw_checkInPW()) {
 8000708:	f000 fcac 	bl	8001064 <pw_checkInPW>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d102      	bne.n	8000718 <fsm_keypad+0x184>
				switch_lock_to_wrong();
 8000712:	f000 f877 	bl	8000804 <switch_lock_to_wrong>
			break;
 8000716:	e038      	b.n	800078a <fsm_keypad+0x1f6>
				if (change_pass_flag) {
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <fsm_keypad+0x218>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d00b      	beq.n	8000738 <fsm_keypad+0x1a4>
					reset_timer();
 8000720:	f000 f8b8 	bl	8000894 <reset_timer>
					LCD_display("FILL NEW PASS", "");
 8000724:	4922      	ldr	r1, [pc, #136]	; (80007b0 <fsm_keypad+0x21c>)
 8000726:	4825      	ldr	r0, [pc, #148]	; (80007bc <fsm_keypad+0x228>)
 8000728:	f000 fb1c 	bl	8000d64 <LCD_display>
					pw_ResetIdx();
 800072c:	f000 fcac 	bl	8001088 <pw_ResetIdx>
					st_lock = CHANGE_PASS;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <fsm_keypad+0x214>)
 8000732:	2205      	movs	r2, #5
 8000734:	701a      	strb	r2, [r3, #0]
			break;
 8000736:	e028      	b.n	800078a <fsm_keypad+0x1f6>
					switch_lock_to_unlock();
 8000738:	f000 f848 	bl	80007cc <switch_lock_to_unlock>
			break;
 800073c:	e025      	b.n	800078a <fsm_keypad+0x1f6>
			if (change_pass_flag) {
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <fsm_keypad+0x218>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d009      	beq.n	800075a <fsm_keypad+0x1c6>
				LCD_display("REFILL PASS", "");
 8000746:	491a      	ldr	r1, [pc, #104]	; (80007b0 <fsm_keypad+0x21c>)
 8000748:	481d      	ldr	r0, [pc, #116]	; (80007c0 <fsm_keypad+0x22c>)
 800074a:	f000 fb0b 	bl	8000d64 <LCD_display>
				pw_ResetIdx();
 800074e:	f000 fc9b 	bl	8001088 <pw_ResetIdx>
				change_pass_flag = 0;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <fsm_keypad+0x218>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
			break;
 8000758:	e016      	b.n	8000788 <fsm_keypad+0x1f4>
				if (pw_checkInPW_change()) {
 800075a:	f000 fc71 	bl	8001040 <pw_checkInPW_change>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d00f      	beq.n	8000784 <fsm_keypad+0x1f0>
					pw_UpdatePass();
 8000764:	f000 fc9c 	bl	80010a0 <pw_UpdatePass>
					switch_lock_to_sleep();
 8000768:	f000 f880 	bl	800086c <switch_lock_to_sleep>
					sch_add_task(lcd_displaySuccess, 0, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	2100      	movs	r1, #0
 8000770:	4814      	ldr	r0, [pc, #80]	; (80007c4 <fsm_keypad+0x230>)
 8000772:	f000 fcbd 	bl	80010f0 <sch_add_task>
					sch_add_task(lcd_displayNormal, ONE_SECOND, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800077c:	4812      	ldr	r0, [pc, #72]	; (80007c8 <fsm_keypad+0x234>)
 800077e:	f000 fcb7 	bl	80010f0 <sch_add_task>
			break;
 8000782:	e001      	b.n	8000788 <fsm_keypad+0x1f4>
					switch_lock_to_wrong();
 8000784:	f000 f83e 	bl	8000804 <switch_lock_to_wrong>
			break;
 8000788:	bf00      	nop
		break;
 800078a:	e002      	b.n	8000792 <fsm_keypad+0x1fe>

	case 15:
		break;
	default:
		break;
 800078c:	bf00      	nop
 800078e:	e000      	b.n	8000792 <fsm_keypad+0x1fe>
		break;
 8000790:	bf00      	nop
	}
	if (key_id != UNPRESSED) {
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	2bff      	cmp	r3, #255	; 0xff
 8000796:	d003      	beq.n	80007a0 <fsm_keypad+0x20c>
		keypad_ResetFlag(key_id);
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f9b0 	bl	8000b00 <keypad_ResetFlag>
	}
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200001b8 	.word	0x200001b8
 80007ac:	200001bb 	.word	0x200001bb
 80007b0:	08004be4 	.word	0x08004be4
 80007b4:	08004be8 	.word	0x08004be8
 80007b8:	080008ad 	.word	0x080008ad
 80007bc:	08004bf8 	.word	0x08004bf8
 80007c0:	08004c08 	.word	0x08004c08
 80007c4:	08000b79 	.word	0x08000b79
 80007c8:	08000b91 	.word	0x08000b91

080007cc <switch_lock_to_unlock>:
static void switch_lock_to_unlock(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	LCD_display("    UNLOCK DOOR", "");
 80007d0:	4907      	ldr	r1, [pc, #28]	; (80007f0 <switch_lock_to_unlock+0x24>)
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <switch_lock_to_unlock+0x28>)
 80007d4:	f000 fac6 	bl	8000d64 <LCD_display>
	timer_for_st = UNLOCK_TIME;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <switch_lock_to_unlock+0x2c>)
 80007da:	220a      	movs	r2, #10
 80007dc:	801a      	strh	r2, [r3, #0]
	wrong_input_cnt = 0;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <switch_lock_to_unlock+0x30>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
	st_lock = UNLOCK;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <switch_lock_to_unlock+0x34>)
 80007e6:	2204      	movs	r2, #4
 80007e8:	701a      	strb	r2, [r3, #0]
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	08004be4 	.word	0x08004be4
 80007f4:	08004c14 	.word	0x08004c14
 80007f8:	20000000 	.word	0x20000000
 80007fc:	200001b9 	.word	0x200001b9
 8000800:	200001b8 	.word	0x200001b8

08000804 <switch_lock_to_wrong>:
static void switch_lock_to_wrong(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	timer_for_st = 1;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <switch_lock_to_wrong+0x28>)
 800080a:	2201      	movs	r2, #1
 800080c:	801a      	strh	r2, [r3, #0]
	wrong_input_cnt++;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <switch_lock_to_wrong+0x2c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <switch_lock_to_wrong+0x2c>)
 8000818:	701a      	strb	r2, [r3, #0]
	LCD_display("INVALID INPUT", "PLEASE REFILL");
 800081a:	4906      	ldr	r1, [pc, #24]	; (8000834 <switch_lock_to_wrong+0x30>)
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <switch_lock_to_wrong+0x34>)
 800081e:	f000 faa1 	bl	8000d64 <LCD_display>
	st_lock = WRONG;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <switch_lock_to_wrong+0x38>)
 8000824:	2203      	movs	r2, #3
 8000826:	701a      	strb	r2, [r3, #0]
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000000 	.word	0x20000000
 8000830:	200001b9 	.word	0x200001b9
 8000834:	08004c24 	.word	0x08004c24
 8000838:	08004c34 	.word	0x08004c34
 800083c:	200001b8 	.word	0x200001b8

08000840 <switch_lock_to_password>:
static void switch_lock_to_password(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	reset_timer();
 8000844:	f000 f826 	bl	8000894 <reset_timer>
	lcd_displayPW();
 8000848:	f000 f96e 	bl	8000b28 <lcd_displayPW>
	sch_add_task(run_timer, 0, ONE_SECOND);
 800084c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000850:	2100      	movs	r1, #0
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <switch_lock_to_password+0x24>)
 8000854:	f000 fc4c 	bl	80010f0 <sch_add_task>
	st_lock = PASSWORD;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <switch_lock_to_password+0x28>)
 800085a:	2202      	movs	r2, #2
 800085c:	701a      	strb	r2, [r3, #0]
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	080008ad 	.word	0x080008ad
 8000868:	200001b8 	.word	0x200001b8

0800086c <switch_lock_to_sleep>:
static void switch_lock_to_sleep(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	pw_ResetIdx();
 8000870:	f000 fc0a 	bl	8001088 <pw_ResetIdx>
	LCD_display("    WELCOME TO", "     MY ROOM");
 8000874:	4904      	ldr	r1, [pc, #16]	; (8000888 <switch_lock_to_sleep+0x1c>)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <switch_lock_to_sleep+0x20>)
 8000878:	f000 fa74 	bl	8000d64 <LCD_display>
	st_lock = SLEEP;
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <switch_lock_to_sleep+0x24>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	08004c44 	.word	0x08004c44
 800088c:	08004c54 	.word	0x08004c54
 8000890:	200001b8 	.word	0x200001b8

08000894 <reset_timer>:
static void reset_timer(void) {
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
	timer_for_st = TIMER;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <reset_timer+0x14>)
 800089a:	220f      	movs	r2, #15
 800089c:	801a      	strh	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000000 	.word	0x20000000

080008ac <run_timer>:
static void run_timer(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
	if (wrong_input_flag == 1) {
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <run_timer+0x44>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d10c      	bne.n	80008d4 <run_timer+0x28>
		char str[17];
		sprintf(str, "REMAIN %ds", timer_for_st);
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <run_timer+0x48>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	490d      	ldr	r1, [pc, #52]	; (80008f8 <run_timer+0x4c>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 fd73 	bl	80043b0 <siprintf>
		LCD_display("BLOCK INPUT", str);
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <run_timer+0x50>)
 80008d0:	f000 fa48 	bl	8000d64 <LCD_display>
	}
	if (timer_for_st > 0) {
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <run_timer+0x48>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d005      	beq.n	80008e8 <run_timer+0x3c>
		timer_for_st--;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <run_timer+0x48>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <run_timer+0x48>)
 80008e6:	801a      	strh	r2, [r3, #0]
	}
}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200001ba 	.word	0x200001ba
 80008f4:	20000000 	.word	0x20000000
 80008f8:	08004c64 	.word	0x08004c64
 80008fc:	08004c70 	.word	0x08004c70

08000900 <time_out>:
static bool time_out(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

	if (timer_for_st == 0) {
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <time_out+0x34>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d10f      	bne.n	800092c <time_out+0x2c>
		if (wrong_input_flag == 1 && st_lock == WRONG) {
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <time_out+0x38>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d106      	bne.n	8000922 <time_out+0x22>
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <time_out+0x3c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d102      	bne.n	8000922 <time_out+0x22>
			wrong_input_flag = 0;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <time_out+0x38>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
		}
		sch_remove_task(run_timer);
 8000922:	4807      	ldr	r0, [pc, #28]	; (8000940 <time_out+0x40>)
 8000924:	f000 fca4 	bl	8001270 <sch_remove_task>
		return 1;
 8000928:	2301      	movs	r3, #1
 800092a:	e000      	b.n	800092e <time_out+0x2e>
	}
	return 0;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000000 	.word	0x20000000
 8000938:	200001ba 	.word	0x200001ba
 800093c:	200001b8 	.word	0x200001b8
 8000940:	080008ad 	.word	0x080008ad

08000944 <time_out>:
#define KEYPAD_TIMEOUT	50 // 50ms

uint8_t key_buf[16];
uint16_t timer = KEYPAD_TIMEOUT * 100;

static bool time_out(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	DelayUS(10);
 8000948:	200a      	movs	r0, #10
 800094a:	f000 fae7 	bl	8000f1c <DelayUS>
	if (timer > 0) {
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <time_out+0x30>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d005      	beq.n	8000962 <time_out+0x1e>
		timer--;
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <time_out+0x30>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	3b01      	subs	r3, #1
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <time_out+0x30>)
 8000960:	801a      	strh	r2, [r3, #0]
	}
	if (timer == 0)
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <time_out+0x30>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <time_out+0x2a>
		return 1;
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <time_out+0x2c>
	return 0;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000002 	.word	0x20000002

08000978 <keypad_IsTouch>:
static bool keypad_IsTouch(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	timer = KEYPAD_TIMEOUT * 100;
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <keypad_IsTouch+0x54>)
 800097e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000982:	801a      	strh	r2, [r3, #0]
	//------------DV start-----------------
	//read each 10us, end loop when over KEYPAD_TIMEOUT or read 0 signal
	while (HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN)) {
 8000984:	e006      	b.n	8000994 <keypad_IsTouch+0x1c>
		if (time_out())
 8000986:	f7ff ffdd 	bl	8000944 <time_out>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <keypad_IsTouch+0x1c>
			return 0;
 8000990:	2300      	movs	r3, #0
 8000992:	e019      	b.n	80009c8 <keypad_IsTouch+0x50>
	while (HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN)) {
 8000994:	2101      	movs	r1, #1
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <keypad_IsTouch+0x58>)
 8000998:	f001 fa42 	bl	8001e20 <HAL_GPIO_ReadPin>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d1f1      	bne.n	8000986 <keypad_IsTouch+0xe>
	}
	//read each 10us, end loop when over KEYPAD_TIMEOUT or read 1 signal
	while (!HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN)) {
 80009a2:	e006      	b.n	80009b2 <keypad_IsTouch+0x3a>
		if (time_out())
 80009a4:	f7ff ffce 	bl	8000944 <time_out>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <keypad_IsTouch+0x3a>
			return 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e00a      	b.n	80009c8 <keypad_IsTouch+0x50>
	while (!HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN)) {
 80009b2:	2101      	movs	r1, #1
 80009b4:	4806      	ldr	r0, [pc, #24]	; (80009d0 <keypad_IsTouch+0x58>)
 80009b6:	f001 fa33 	bl	8001e20 <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d0f1      	beq.n	80009a4 <keypad_IsTouch+0x2c>
	}
	//------------DV end-----------------
	DelayUS(10); // for TW
 80009c0:	200a      	movs	r0, #10
 80009c2:	f000 faab 	bl	8000f1c <DelayUS>
	return 1;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000002 	.word	0x20000002
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <keypad_bit>:
static void keypad_bit(uint8_t i) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_SCL_PIN, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2102      	movs	r1, #2
 80009e2:	4816      	ldr	r0, [pc, #88]	; (8000a3c <keypad_bit+0x68>)
 80009e4:	f001 fa33 	bl	8001e4e <HAL_GPIO_WritePin>
	DelayUS(2);
 80009e8:	2002      	movs	r0, #2
 80009ea:	f000 fa97 	bl	8000f1c <DelayUS>
	uint8_t bit = !HAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_SDO_PIN);
 80009ee:	2101      	movs	r1, #1
 80009f0:	4812      	ldr	r0, [pc, #72]	; (8000a3c <keypad_bit+0x68>)
 80009f2:	f001 fa15 	bl	8001e20 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	bf0c      	ite	eq
 80009fc:	2301      	moveq	r3, #1
 80009fe:	2300      	movne	r3, #0
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	73fb      	strb	r3, [r7, #15]
	if (bit == 0) {
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d104      	bne.n	8000a14 <keypad_bit+0x40>
		key_buf[i] = 0;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <keypad_bit+0x6c>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	54d1      	strb	r1, [r2, r3]
 8000a12:	e006      	b.n	8000a22 <keypad_bit+0x4e>
	} else {
		key_buf[i]++;
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <keypad_bit+0x6c>)
 8000a18:	5cd2      	ldrb	r2, [r2, r3]
 8000a1a:	3201      	adds	r2, #1
 8000a1c:	b2d1      	uxtb	r1, r2
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <keypad_bit+0x6c>)
 8000a20:	54d1      	strb	r1, [r2, r3]
	}
	HAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_SCL_PIN, 1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2102      	movs	r1, #2
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <keypad_bit+0x68>)
 8000a28:	f001 fa11 	bl	8001e4e <HAL_GPIO_WritePin>
	DelayUS(2);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f000 fa75 	bl	8000f1c <DelayUS>
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40010c00 	.word	0x40010c00
 8000a40:	200001bc 	.word	0x200001bc

08000a44 <keypad_scan>:
static void keypad_scan() {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 16; i++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71fb      	strb	r3, [r7, #7]
 8000a4e:	e006      	b.n	8000a5e <keypad_scan+0x1a>
		keypad_bit(i);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ffbe 	bl	80009d4 <keypad_bit>
	for (uint8_t i = 0; i < 16; i++) {
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	71fb      	strb	r3, [r7, #7]
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d9f5      	bls.n	8000a50 <keypad_scan+0xc>
	}
	HAL_Delay(2); //for Tout
 8000a64:	2002      	movs	r0, #2
 8000a66:	f000 fe73 	bl	8001750 <HAL_Delay>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <keypad_init>:
void keypad_init(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 16; i++) {
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	e006      	b.n	8000a8e <keypad_init+0x1a>
		key_buf[i] = 0;
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <keypad_init+0x34>)
 8000a84:	2100      	movs	r1, #0
 8000a86:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 16; i++) {
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d9f5      	bls.n	8000a80 <keypad_init+0xc>
	}
	HAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_SCL_PIN, 1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2102      	movs	r1, #2
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <keypad_init+0x38>)
 8000a9a:	f001 f9d8 	bl	8001e4e <HAL_GPIO_WritePin>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001bc 	.word	0x200001bc
 8000aac:	40010c00 	.word	0x40010c00

08000ab0 <keypad_read>:

void keypad_read(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	if (keypad_IsTouch()) {
 8000ab4:	f7ff ff60 	bl	8000978 <keypad_IsTouch>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <keypad_read+0x12>
		keypad_scan();
 8000abe:	f7ff ffc1 	bl	8000a44 <keypad_scan>
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <keypad_IsPressed>:
uint8_t keypad_IsPressed(void) {
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 15; i++) {
 8000ace:	2300      	movs	r3, #0
 8000ad0:	71fb      	strb	r3, [r7, #7]
 8000ad2:	e009      	b.n	8000ae8 <keypad_IsPressed+0x20>
		if (key_buf[i] > 0)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	4a09      	ldr	r2, [pc, #36]	; (8000afc <keypad_IsPressed+0x34>)
 8000ad8:	5cd3      	ldrb	r3, [r2, r3]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <keypad_IsPressed+0x1a>
			return i;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	e006      	b.n	8000af0 <keypad_IsPressed+0x28>
	for (uint8_t i = 0; i < 15; i++) {
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b0e      	cmp	r3, #14
 8000aec:	d9f2      	bls.n	8000ad4 <keypad_IsPressed+0xc>
	}
	return UNPRESSED;
 8000aee:	23ff      	movs	r3, #255	; 0xff
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200001bc 	.word	0x200001bc

08000b00 <keypad_ResetFlag>:
void keypad_ResetFlag(uint8_t id) {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	if (id > 15)
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d804      	bhi.n	8000b1a <keypad_ResetFlag+0x1a>
		return;
	key_buf[id] = 0;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <keypad_ResetFlag+0x24>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	54d1      	strb	r1, [r2, r3]
 8000b18:	e000      	b.n	8000b1c <keypad_ResetFlag+0x1c>
		return;
 8000b1a:	bf00      	nop
}
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	200001bc 	.word	0x200001bc

08000b28 <lcd_displayPW>:
void DelayInit(void);
void DelayUS(uint32_t);
void LCD_Home();


void lcd_displayPW(void){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
	char str[20];
	uint8_t i = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	75fb      	strb	r3, [r7, #23]
	for(; i < pw_idxGet();i++){
 8000b32:	e008      	b.n	8000b46 <lcd_displayPW+0x1e>
		str[i] = '*';
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	3318      	adds	r3, #24
 8000b38:	443b      	add	r3, r7
 8000b3a:	222a      	movs	r2, #42	; 0x2a
 8000b3c:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(; i < pw_idxGet();i++){
 8000b40:	7dfb      	ldrb	r3, [r7, #23]
 8000b42:	3301      	adds	r3, #1
 8000b44:	75fb      	strb	r3, [r7, #23]
 8000b46:	f000 fa71 	bl	800102c <pw_idxGet>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	7dfb      	ldrb	r3, [r7, #23]
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d3ef      	bcc.n	8000b34 <lcd_displayPW+0xc>
	}
	str[i] = '\0';
 8000b54:	7dfb      	ldrb	r3, [r7, #23]
 8000b56:	3318      	adds	r3, #24
 8000b58:	443b      	add	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f803 2c18 	strb.w	r2, [r3, #-24]
	LCD_display("PIN", str);
 8000b60:	463b      	mov	r3, r7
 8000b62:	4619      	mov	r1, r3
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <lcd_displayPW+0x4c>)
 8000b66:	f000 f8fd 	bl	8000d64 <LCD_display>
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	08004c7c 	.word	0x08004c7c

08000b78 <lcd_displaySuccess>:
void lcd_displaySuccess(void){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	LCD_display("     CHANGE", "  SUCCESSFULLY");
 8000b7c:	4902      	ldr	r1, [pc, #8]	; (8000b88 <lcd_displaySuccess+0x10>)
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <lcd_displaySuccess+0x14>)
 8000b80:	f000 f8f0 	bl	8000d64 <LCD_display>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	08004c80 	.word	0x08004c80
 8000b8c:	08004c90 	.word	0x08004c90

08000b90 <lcd_displayNormal>:
void lcd_displayNormal(void){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	LCD_display("    WELCOME TO", "     MY ROOM");
 8000b94:	4902      	ldr	r1, [pc, #8]	; (8000ba0 <lcd_displayNormal+0x10>)
 8000b96:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <lcd_displayNormal+0x14>)
 8000b98:	f000 f8e4 	bl	8000d64 <LCD_display>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	08004c9c 	.word	0x08004c9c
 8000ba4:	08004cac 	.word	0x08004cac

08000ba8 <lcd_displayPW_change>:
void lcd_displayPW_change(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
	char str[20];
	uint8_t i = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	75fb      	strb	r3, [r7, #23]
	for(; i < pw_idxGet();i++){
 8000bb2:	e008      	b.n	8000bc6 <lcd_displayPW_change+0x1e>
		str[i] = '*';
 8000bb4:	7dfb      	ldrb	r3, [r7, #23]
 8000bb6:	3318      	adds	r3, #24
 8000bb8:	443b      	add	r3, r7
 8000bba:	222a      	movs	r2, #42	; 0x2a
 8000bbc:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(; i < pw_idxGet();i++){
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	75fb      	strb	r3, [r7, #23]
 8000bc6:	f000 fa31 	bl	800102c <pw_idxGet>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d3ef      	bcc.n	8000bb4 <lcd_displayPW_change+0xc>
	}
	str[i] = '\0';
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	3318      	adds	r3, #24
 8000bd8:	443b      	add	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f803 2c18 	strb.w	r2, [r3, #-24]
	LCD_display("PIN 5 DIGITS", str);
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <lcd_displayPW_change+0x4c>)
 8000be6:	f000 f8bd 	bl	8000d64 <LCD_display>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	08004cbc 	.word	0x08004cbc

08000bf8 <LCD_Init>:

void LCD_Init() {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	dpRows = 2;
 8000bfc:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <LCD_Init+0xc8>)
 8000bfe:	2202      	movs	r2, #2
 8000c00:	701a      	strb	r2, [r3, #0]

	dpBacklight = LCD_BACKLIGHT;
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <LCD_Init+0xcc>)
 8000c04:	2208      	movs	r2, #8
 8000c06:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_5x8DOTS | LCD_2LINE;
 8000c08:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <LCD_Init+0xd0>)
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	701a      	strb	r2, [r3, #0]

	/* Wait for initialization */
	DelayInit();
 8000c0e:	f000 f95d 	bl	8000ecc <DelayInit>
	HAL_Delay(50);
 8000c12:	2032      	movs	r0, #50	; 0x32
 8000c14:	f000 fd9c 	bl	8001750 <HAL_Delay>

	ExpanderWrite(dpBacklight);
 8000c18:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <LCD_Init+0xcc>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f91b 	bl	8000e58 <ExpanderWrite>
	HAL_Delay(1000);
 8000c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c26:	f000 fd93 	bl	8001750 <HAL_Delay>

	/* 4bit Mode */
	Write4Bits(0x03 << 4);
 8000c2a:	2030      	movs	r0, #48	; 0x30
 8000c2c:	f000 f903 	bl	8000e36 <Write4Bits>
	DelayUS(4500);
 8000c30:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c34:	f000 f972 	bl	8000f1c <DelayUS>

	Write4Bits(0x03 << 4);
 8000c38:	2030      	movs	r0, #48	; 0x30
 8000c3a:	f000 f8fc 	bl	8000e36 <Write4Bits>
	DelayUS(4500);
 8000c3e:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c42:	f000 f96b 	bl	8000f1c <DelayUS>

	Write4Bits(0x03 << 4);
 8000c46:	2030      	movs	r0, #48	; 0x30
 8000c48:	f000 f8f5 	bl	8000e36 <Write4Bits>
	DelayUS(4500);
 8000c4c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c50:	f000 f964 	bl	8000f1c <DelayUS>

	Write4Bits(0x02 << 4);
 8000c54:	2020      	movs	r0, #32
 8000c56:	f000 f8ee 	bl	8000e36 <Write4Bits>
	DelayUS(100);
 8000c5a:	2064      	movs	r0, #100	; 0x64
 8000c5c:	f000 f95e 	bl	8000f1c <DelayUS>

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <LCD_Init+0xd0>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	f043 0320 	orr.w	r3, r3, #32
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f8a6 	bl	8000dbc <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF;
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <LCD_Init+0xd4>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	701a      	strb	r2, [r3, #0]
	//LCD_Display();
	dpControl |= LCD_DISPLAYON;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <LCD_Init+0xd4>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <LCD_Init+0xd4>)
 8000c82:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <LCD_Init+0xd4>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f894 	bl	8000dbc <SendCommand>
	LCD_Clear();
 8000c94:	f000 f81e 	bl	8000cd4 <LCD_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <LCD_Init+0xd8>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <LCD_Init+0xd8>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f887 	bl	8000dbc <SendCommand>
	DelayUS(4500);
 8000cae:	f241 1094 	movw	r0, #4500	; 0x1194
 8000cb2:	f000 f933 	bl	8000f1c <DelayUS>

	LCD_Home();
 8000cb6:	f000 f818 	bl	8000cea <LCD_Home>

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200001cf 	.word	0x200001cf
 8000cc4:	200001d0 	.word	0x200001d0
 8000cc8:	200001cc 	.word	0x200001cc
 8000ccc:	200001cd 	.word	0x200001cd
 8000cd0:	200001ce 	.word	0x200001ce

08000cd4 <LCD_Clear>:

void LCD_Clear() {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f000 f86f 	bl	8000dbc <SendCommand>
	DelayUS(2000);
 8000cde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ce2:	f000 f91b 	bl	8000f1c <DelayUS>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <LCD_Home>:

void LCD_Home() {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f000 f864 	bl	8000dbc <SendCommand>
	DelayUS(2000);
 8000cf4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cf8:	f000 f910 	bl	8000f1c <DelayUS>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row) {
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	460a      	mov	r2, r1
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <LCD_SetCursor+0x5c>)
 8000d12:	f107 0408 	add.w	r4, r7, #8
 8000d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= dpRows) {
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <LCD_SetCursor+0x60>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	79ba      	ldrb	r2, [r7, #6]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d303      	bcc.n	8000d2e <LCD_SetCursor+0x2e>
		row = dpRows - 1;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <LCD_SetCursor+0x60>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	71bb      	strb	r3, [r7, #6]
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	3318      	adds	r3, #24
 8000d34:	443b      	add	r3, r7
 8000d36:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	4413      	add	r3, r2
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f835 	bl	8000dbc <SendCommand>
}
 8000d52:	bf00      	nop
 8000d54:	371c      	adds	r7, #28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd90      	pop	{r4, r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	08004ccc 	.word	0x08004ccc
 8000d60:	200001cf 	.word	0x200001cf

08000d64 <LCD_display>:
void LCD_Display() {
	dpControl |= LCD_DISPLAYON;
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void LCD_display(const char c1[], const char c2[]) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	LCD_Clear();
 8000d6e:	f7ff ffb1 	bl	8000cd4 <LCD_Clear>
	LCD_SetCursor(0, 0);
 8000d72:	2100      	movs	r1, #0
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff ffc3 	bl	8000d00 <LCD_SetCursor>
	while (*c1)
 8000d7a:	e006      	b.n	8000d8a <LCD_display+0x26>
		SendChar(*c1++);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f827 	bl	8000dd8 <SendChar>
	while (*c1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f4      	bne.n	8000d7c <LCD_display+0x18>
	LCD_SetCursor(0, 1);
 8000d92:	2101      	movs	r1, #1
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff ffb3 	bl	8000d00 <LCD_SetCursor>
	while (*c2)
 8000d9a:	e006      	b.n	8000daa <LCD_display+0x46>
		SendChar(*c2++);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	603a      	str	r2, [r7, #0]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f817 	bl	8000dd8 <SendChar>
	while (*c2)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f4      	bne.n	8000d9c <LCD_display+0x38>
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <SendCommand>:

void SendCommand(uint8_t cmd) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	Send(cmd, 0);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f812 	bl	8000df4 <Send>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <SendChar>:

void SendChar(uint8_t ch) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	Send(ch, RS);
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2101      	movs	r1, #1
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f804 	bl	8000df4 <Send>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <Send>:

void Send(uint8_t value, uint8_t mode) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xF0;
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f023 030f 	bic.w	r3, r3, #15
 8000e0a:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xF0;
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	73bb      	strb	r3, [r7, #14]
	Write4Bits((highnib) | mode);
 8000e12:	7bfa      	ldrb	r2, [r7, #15]
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f80b 	bl	8000e36 <Write4Bits>
	Write4Bits((lownib) | mode);
 8000e20:	7bba      	ldrb	r2, [r7, #14]
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f804 	bl	8000e36 <Write4Bits>
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <Write4Bits>:

void Write4Bits(uint8_t value) {
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(value);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f808 	bl	8000e58 <ExpanderWrite>
	PulseEnable(value);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f820 	bl	8000e90 <PulseEnable>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <ExpanderWrite>:

void ExpanderWrite(uint8_t _data) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	uint8_t data = _data | dpBacklight;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <ExpanderWrite+0x30>)
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 8000e6e:	f107 020f 	add.w	r2, r7, #15
 8000e72:	230a      	movs	r3, #10
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	217e      	movs	r1, #126	; 0x7e
 8000e7a:	4804      	ldr	r0, [pc, #16]	; (8000e8c <ExpanderWrite+0x34>)
 8000e7c:	f001 f944 	bl	8002108 <HAL_I2C_Master_Transmit>
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200001d0 	.word	0x200001d0
 8000e8c:	2000008c 	.word	0x2000008c

08000e90 <PulseEnable>:

void PulseEnable(uint8_t _data) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(_data | ENABLE);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ffd8 	bl	8000e58 <ExpanderWrite>
	DelayUS(20);
 8000ea8:	2014      	movs	r0, #20
 8000eaa:	f000 f837 	bl	8000f1c <DelayUS>

	ExpanderWrite(_data & ~ENABLE);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ffce 	bl	8000e58 <ExpanderWrite>
	DelayUS(20);
 8000ebc:	2014      	movs	r0, #20
 8000ebe:	f000 f82d 	bl	8000f1c <DelayUS>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <DelayInit>:

void DelayInit(void) {
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <DelayInit+0x48>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <DelayInit+0x48>)
 8000ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000eda:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <DelayInit+0x48>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <DelayInit+0x48>)
 8000ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ee6:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <DelayInit+0x4c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <DelayInit+0x4c>)
 8000eee:	f023 0301 	bic.w	r3, r3, #1
 8000ef2:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <DelayInit+0x4c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <DelayInit+0x4c>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <DelayInit+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8000f06:	bf00      	nop
	__ASM volatile ("NOP");
 8000f08:	bf00      	nop
	__ASM volatile ("NOP");
 8000f0a:	bf00      	nop
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	e000edf0 	.word	0xe000edf0
 8000f18:	e0001000 	.word	0xe0001000

08000f1c <DelayUS>:

void DelayUS(uint32_t us) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <DelayUS+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <DelayUS+0x44>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	0c9a      	lsrs	r2, r3, #18
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <DelayUS+0x48>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <DelayUS+0x48>)
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f6      	bhi.n	8000f3e <DelayUS+0x22>
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	20000014 	.word	0x20000014
 8000f60:	431bde83 	.word	0x431bde83
 8000f64:	e0001000 	.word	0xe0001000

08000f68 <lock_open>:
 */

#include "my_lock.h"


void lock_open(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LOCK_PORT, LOCK_PIN, 1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f72:	4802      	ldr	r0, [pc, #8]	; (8000f7c <lock_open+0x14>)
 8000f74:	f000 ff6b 	bl	8001e4e <HAL_GPIO_WritePin>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40010c00 	.word	0x40010c00

08000f80 <lock_close>:

void lock_close(void){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LOCK_PORT, LOCK_PIN, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f8a:	4802      	ldr	r0, [pc, #8]	; (8000f94 <lock_close+0x14>)
 8000f8c:	f000 ff5f 	bl	8001e4e <HAL_GPIO_WritePin>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40010c00 	.word	0x40010c00

08000f98 <pw_update_change>:
char password[LENGTH_OF_PASS + 1] = "74664";
char change_pass[LENGTH_OF_PASS + 1] = "74664";
char password_buf[17] = "";

uint8_t pw_idx = 0;
bool pw_update_change(uint8_t number) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	if (pw_idx >= LENGTH_OF_PASS) {
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <pw_update_change+0x3c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d901      	bls.n	8000fae <pw_update_change+0x16>
		return 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e00c      	b.n	8000fc8 <pw_update_change+0x30>
	}
	change_pass[pw_idx++] = number + '0';
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <pw_update_change+0x3c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	b2d1      	uxtb	r1, r2
 8000fb6:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <pw_update_change+0x3c>)
 8000fb8:	7011      	strb	r1, [r2, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	3330      	adds	r3, #48	; 0x30
 8000fc0:	b2d9      	uxtb	r1, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <pw_update_change+0x40>)
 8000fc4:	5499      	strb	r1, [r3, r2]
	return 1;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200001e5 	.word	0x200001e5
 8000fd8:	2000000c 	.word	0x2000000c

08000fdc <pw_update>:

bool pw_update(uint8_t number) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	if (pw_idx >= 16) {
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <pw_update+0x48>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	d901      	bls.n	8000ff2 <pw_update+0x16>
		return 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e012      	b.n	8001018 <pw_update+0x3c>
	}
	password_buf[pw_idx++] = number + '0';
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <pw_update+0x48>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	b2d1      	uxtb	r1, r2
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <pw_update+0x48>)
 8000ffc:	7011      	strb	r1, [r2, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	3330      	adds	r3, #48	; 0x30
 8001004:	b2d9      	uxtb	r1, r3
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <pw_update+0x4c>)
 8001008:	5499      	strb	r1, [r3, r2]
	password_buf[pw_idx] = '\0';
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <pw_update+0x48>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <pw_update+0x4c>)
 8001012:	2100      	movs	r1, #0
 8001014:	5499      	strb	r1, [r3, r2]
	return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200001e5 	.word	0x200001e5
 8001028:	200001d4 	.word	0x200001d4

0800102c <pw_idxGet>:
uint8_t pw_idxGet(void) {
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
	return pw_idx;
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <pw_idxGet+0x10>)
 8001032:	781b      	ldrb	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	200001e5 	.word	0x200001e5

08001040 <pw_checkInPW_change>:
char* pw_ReturnInput(void) {
	return password_buf;
}
bool pw_checkInPW_change(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	return strcmp(change_pass, password_buf) == 0;
 8001044:	4905      	ldr	r1, [pc, #20]	; (800105c <pw_checkInPW_change+0x1c>)
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <pw_checkInPW_change+0x20>)
 8001048:	f7ff f880 	bl	800014c <strcmp>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf0c      	ite	eq
 8001052:	2301      	moveq	r3, #1
 8001054:	2300      	movne	r3, #0
 8001056:	b2db      	uxtb	r3, r3
}
 8001058:	4618      	mov	r0, r3
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200001d4 	.word	0x200001d4
 8001060:	2000000c 	.word	0x2000000c

08001064 <pw_checkInPW>:
bool pw_checkInPW(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	return strcmp(password, password_buf) == 0;
 8001068:	4905      	ldr	r1, [pc, #20]	; (8001080 <pw_checkInPW+0x1c>)
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <pw_checkInPW+0x20>)
 800106c:	f7ff f86e 	bl	800014c <strcmp>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf0c      	ite	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	2300      	movne	r3, #0
 800107a:	b2db      	uxtb	r3, r3
}
 800107c:	4618      	mov	r0, r3
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200001d4 	.word	0x200001d4
 8001084:	20000004 	.word	0x20000004

08001088 <pw_ResetIdx>:
void pw_ResetIdx(void) {
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
	pw_idx = 0;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <pw_ResetIdx+0x14>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	200001e5 	.word	0x200001e5

080010a0 <pw_UpdatePass>:
void pw_UpdatePass(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	strcpy(password, change_pass);
 80010a4:	4902      	ldr	r1, [pc, #8]	; (80010b0 <pw_UpdatePass+0x10>)
 80010a6:	4803      	ldr	r0, [pc, #12]	; (80010b4 <pw_UpdatePass+0x14>)
 80010a8:	f003 f9e6 	bl	8004478 <strcpy>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	20000004 	.word	0x20000004

080010b8 <sch_init>:
struct {
	struct task *top;
} stack_task;
//******************START TIMER*********************
extern TIM_HandleTypeDef htim2;
void sch_init(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <sch_init+0x10>)
 80010be:	f001 ffdb 	bl	8003078 <HAL_TIM_Base_Start_IT>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000e0 	.word	0x200000e0

080010cc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d101      	bne.n	80010e4 <HAL_TIM_PeriodElapsedCallback+0x18>
		sch_update();
 80010e0:	f000 f868 	bl	80011b4 <sch_update>
	}
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200000e0 	.word	0x200000e0

080010f0 <sch_add_task>:
 delay - the amount of time after which the task will run
 period - the amount of cycle time to run task
 * @retval:	1 - add successfully
 * 			0 - add badly
 * */
bool sch_add_task(void (*pTask)(), uint16_t delay, uint16_t period) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	803b      	strh	r3, [r7, #0]
	struct task *my_task = (struct task*) malloc(sizeof(struct task));
 8001100:	200c      	movs	r0, #12
 8001102:	f003 f899 	bl	8004238 <malloc>
 8001106:	4603      	mov	r3, r0
 8001108:	60fb      	str	r3, [r7, #12]
	my_task->pTask = pTask;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	601a      	str	r2, [r3, #0]
	my_task->counter = delay * FREQ_OF_TIM / 1000;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	809a      	strh	r2, [r3, #4]
	my_task->period = period;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	883a      	ldrh	r2, [r7, #0]
 800111a:	80da      	strh	r2, [r3, #6]
	my_task->next_task = 0;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
	if (stack_task.top == 0) {
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <sch_add_task+0xc0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d104      	bne.n	8001134 <sch_add_task+0x44>
		stack_task.top = my_task;
 800112a:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <sch_add_task+0xc0>)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6013      	str	r3, [r2, #0]
		// stack_task.bottom = stack_task.top;
		// stack_task.time_length = stack_task.top->counter;
		return 1;
 8001130:	2301      	movs	r3, #1
 8001132:	e039      	b.n	80011a8 <sch_add_task+0xb8>
	//     stack_task.bottom->next_task = my_task;
	//     stack_task.bottom = stack_task.bottom->next_task;
	//     stack_task.time_length += my_task->counter;
	//     return 1;
	// }
	struct task *pre = stack_task.top;
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <sch_add_task+0xc0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	617b      	str	r3, [r7, #20]
	struct task *cur = stack_task.top;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <sch_add_task+0xc0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	613b      	str	r3, [r7, #16]
	while (cur && my_task->counter >= cur->counter) {
 8001140:	e00c      	b.n	800115c <sch_add_task+0x6c>
		my_task->counter = my_task->counter - cur->counter;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	889a      	ldrh	r2, [r3, #4]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	889b      	ldrh	r3, [r3, #4]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b29a      	uxth	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	809a      	strh	r2, [r3, #4]
		pre = cur;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	617b      	str	r3, [r7, #20]
		cur = cur->next_task;
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	613b      	str	r3, [r7, #16]
	while (cur && my_task->counter >= cur->counter) {
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d005      	beq.n	800116e <sch_add_task+0x7e>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	889a      	ldrh	r2, [r3, #4]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	889b      	ldrh	r3, [r3, #4]
 800116a:	429a      	cmp	r2, r3
 800116c:	d2e9      	bcs.n	8001142 <sch_add_task+0x52>
	}
	if (pre != cur) {
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	429a      	cmp	r2, r3
 8001174:	d006      	beq.n	8001184 <sch_add_task+0x94>
		pre->next_task = my_task;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	609a      	str	r2, [r3, #8]
		my_task->next_task = cur;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	e005      	b.n	8001190 <sch_add_task+0xa0>
	} else {
		my_task->next_task = cur;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	609a      	str	r2, [r3, #8]
		stack_task.top = my_task;
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <sch_add_task+0xc0>)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6013      	str	r3, [r2, #0]
	}
	if (cur)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <sch_add_task+0xb6>
		cur->counter -= my_task->counter;
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	889a      	ldrh	r2, [r3, #4]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	889b      	ldrh	r3, [r3, #4]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	809a      	strh	r2, [r3, #4]
	return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200001e8 	.word	0x200001e8

080011b4 <sch_update>:
/*
 * @brief:	decrease the remaining time of the top task
 * @para:	none
 * @retval:	none
 * */
void sch_update(void) {
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	if (stack_task.top == 0)
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <sch_update+0x2c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <sch_update+0x24>
		return;
	if (stack_task.top->counter > 0) {
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <sch_update+0x2c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	889b      	ldrh	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d007      	beq.n	80011da <sch_update+0x26>
		stack_task.top->counter--;
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <sch_update+0x2c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	889a      	ldrh	r2, [r3, #4]
 80011d0:	3a01      	subs	r2, #1
 80011d2:	b292      	uxth	r2, r2
 80011d4:	809a      	strh	r2, [r3, #4]
 80011d6:	e000      	b.n	80011da <sch_update+0x26>
		return;
 80011d8:	bf00      	nop
	}
}
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	200001e8 	.word	0x200001e8

080011e4 <sch_delete_task>:
/*
 * @brief:	delete a task in the stack and release the memory
 * @para:	del_task - the task need to be deleted
 * @retval:	none
 * */
static void sch_delete_task(struct task *del_task) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	if (del_task == 0) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <sch_delete_task+0x16>
		return;
	}
	free(del_task);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f003 f828 	bl	8004248 <free>
 80011f8:	e000      	b.n	80011fc <sch_delete_task+0x18>
		return;
 80011fa:	bf00      	nop
}
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <sch_dispatch>:
 * @brief:	run the top task and update if over remainning time
 * @para:	none
 * @retval:	1 - run successfully
 *			0 - run badly
 * */
bool sch_dispatch(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	if (stack_task.top == 0)
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <sch_dispatch+0x68>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <sch_dispatch+0x12>
		return 0;
 8001212:	2300      	movs	r3, #0
 8001214:	e026      	b.n	8001264 <sch_dispatch+0x60>
	if (stack_task.top->counter == 0) {
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <sch_dispatch+0x68>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d120      	bne.n	8001262 <sch_dispatch+0x5e>
		(*stack_task.top->pTask)();
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <sch_dispatch+0x68>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4798      	blx	r3
		struct task *temp = stack_task.top;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <sch_dispatch+0x68>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	607b      	str	r3, [r7, #4]
		stack_task.top = stack_task.top->next_task;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <sch_dispatch+0x68>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <sch_dispatch+0x68>)
 8001236:	6013      	str	r3, [r2, #0]
		temp->next_task = 0;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
		if (temp->period != 0) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	88db      	ldrh	r3, [r3, #6]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <sch_dispatch+0x54>
			sch_add_task(temp->pTask, temp->period, temp->period);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6818      	ldr	r0, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	88d9      	ldrh	r1, [r3, #6]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	88db      	ldrh	r3, [r3, #6]
 8001252:	461a      	mov	r2, r3
 8001254:	f7ff ff4c 	bl	80010f0 <sch_add_task>
		}
		sch_delete_task(temp);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ffc3 	bl	80011e4 <sch_delete_task>
		return 1;
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <sch_dispatch+0x60>
	}
	return 0;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200001e8 	.word	0x200001e8

08001270 <sch_remove_task>:
void sch_remove_task(void (*pTask)()) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	struct task *cur = stack_task.top;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <sch_remove_task+0x5c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
	struct task *pre = cur;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	60bb      	str	r3, [r7, #8]
	while (cur) {
 8001282:	e01b      	b.n	80012bc <sch_remove_task+0x4c>
		if (pTask == cur->pTask) {
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d111      	bne.n	80012b2 <sch_remove_task+0x42>
			if (pre == cur) {
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	429a      	cmp	r2, r3
 8001294:	d105      	bne.n	80012a2 <sch_remove_task+0x32>
				stack_task.top = stack_task.top->next_task;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <sch_remove_task+0x5c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <sch_remove_task+0x5c>)
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	e003      	b.n	80012aa <sch_remove_task+0x3a>
			} else {
				pre->next_task = cur->next_task;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	609a      	str	r2, [r3, #8]
			}
			sch_delete_task(cur);
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff ff9a 	bl	80011e4 <sch_delete_task>
			return;
 80012b0:	e008      	b.n	80012c4 <sch_remove_task+0x54>
		}
		pre = cur;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
		cur = cur->next_task;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	60fb      	str	r3, [r7, #12]
	while (cur) {
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1e0      	bne.n	8001284 <sch_remove_task+0x14>
	}
	return;
 80012c2:	bf00      	nop
}
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200001e8 	.word	0x200001e8

080012d0 <init>:
static void test_lock(void) {
	sch_add_task(lock_open, 0, 0);
	sch_add_task(lock_close, 5000, 0);
}
#endif
void init(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	sch_init();
 80012d4:	f7ff fef0 	bl	80010b8 <sch_init>
	LCD_Init();
 80012d8:	f7ff fc8e 	bl	8000bf8 <LCD_Init>
	LCD_Clear();
 80012dc:	f7ff fcfa 	bl	8000cd4 <LCD_Clear>
	keypad_init();
 80012e0:	f7ff fbc8 	bl	8000a74 <keypad_init>
	sch_add_task(keypad_read, 0, 75);
 80012e4:	224b      	movs	r2, #75	; 0x4b
 80012e6:	2100      	movs	r1, #0
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <init+0x2c>)
 80012ea:	f7ff ff01 	bl	80010f0 <sch_add_task>
	sch_add_task(fsm_lock, 0, 10);
 80012ee:	220a      	movs	r2, #10
 80012f0:	2100      	movs	r1, #0
 80012f2:	4803      	ldr	r0, [pc, #12]	; (8001300 <init+0x30>)
 80012f4:	f7ff fefc 	bl	80010f0 <sch_add_task>
	//sch_add_task(toggle_led, 0, 1000);
	//sch_add_task(test_lock, 0, 7000);

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	08000ab1 	.word	0x08000ab1
 8001300:	080004d9 	.word	0x080004d9

08001304 <loop>:

void loop(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	sch_dispatch();
 8001308:	f7ff ff7c 	bl	8001204 <sch_dispatch>
	//test_keypad();

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_MspInit+0x5c>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4a14      	ldr	r2, [pc, #80]	; (800136c <HAL_MspInit+0x5c>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6193      	str	r3, [r2, #24]
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_MspInit+0x5c>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_MspInit+0x5c>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_MspInit+0x5c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_MspInit+0x5c>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_MspInit+0x60>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_MspInit+0x60>)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	40021000 	.word	0x40021000
 8001370:	40010000 	.word	0x40010000

08001374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <HAL_I2C_MspInit+0x70>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d123      	bne.n	80013dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_I2C_MspInit+0x74>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <HAL_I2C_MspInit+0x74>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_I2C_MspInit+0x74>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ac:	23c0      	movs	r3, #192	; 0xc0
 80013ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b0:	2312      	movs	r3, #18
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	480b      	ldr	r0, [pc, #44]	; (80013ec <HAL_I2C_MspInit+0x78>)
 80013c0:	f000 fbaa 	bl	8001b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_I2C_MspInit+0x74>)
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_I2C_MspInit+0x74>)
 80013ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ce:	61d3      	str	r3, [r2, #28]
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_I2C_MspInit+0x74>)
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40005400 	.word	0x40005400
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010c00 	.word	0x40010c00

080013f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001400:	d113      	bne.n	800142a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_TIM_Base_MspInit+0x44>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <HAL_TIM_Base_MspInit+0x44>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_TIM_Base_MspInit+0x44>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	201c      	movs	r0, #28
 8001420:	f000 fa91 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001424:	201c      	movs	r0, #28
 8001426:	f000 faaa 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a3b      	ldr	r2, [pc, #236]	; (8001540 <HAL_UART_MspInit+0x108>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d13a      	bne.n	80014ce <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001458:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <HAL_UART_MspInit+0x10c>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a39      	ldr	r2, [pc, #228]	; (8001544 <HAL_UART_MspInit+0x10c>)
 800145e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b37      	ldr	r3, [pc, #220]	; (8001544 <HAL_UART_MspInit+0x10c>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <HAL_UART_MspInit+0x10c>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a33      	ldr	r2, [pc, #204]	; (8001544 <HAL_UART_MspInit+0x10c>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_UART_MspInit+0x10c>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	4619      	mov	r1, r3
 800149c:	482a      	ldr	r0, [pc, #168]	; (8001548 <HAL_UART_MspInit+0x110>)
 800149e:	f000 fb3b 	bl	8001b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0318 	add.w	r3, r7, #24
 80014b4:	4619      	mov	r1, r3
 80014b6:	4824      	ldr	r0, [pc, #144]	; (8001548 <HAL_UART_MspInit+0x110>)
 80014b8:	f000 fb2e 	bl	8001b18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	2025      	movs	r0, #37	; 0x25
 80014c2:	f000 fa40 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014c6:	2025      	movs	r0, #37	; 0x25
 80014c8:	f000 fa59 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014cc:	e034      	b.n	8001538 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <HAL_UART_MspInit+0x114>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d12f      	bne.n	8001538 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_UART_MspInit+0x10c>)
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_UART_MspInit+0x10c>)
 80014de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e2:	61d3      	str	r3, [r2, #28]
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_UART_MspInit+0x10c>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_UART_MspInit+0x10c>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_UART_MspInit+0x10c>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_UART_MspInit+0x10c>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001508:	2304      	movs	r3, #4
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	4619      	mov	r1, r3
 800151a:	480b      	ldr	r0, [pc, #44]	; (8001548 <HAL_UART_MspInit+0x110>)
 800151c:	f000 fafc 	bl	8001b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001520:	2308      	movs	r3, #8
 8001522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 0318 	add.w	r3, r7, #24
 8001530:	4619      	mov	r1, r3
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <HAL_UART_MspInit+0x110>)
 8001534:	f000 faf0 	bl	8001b18 <HAL_GPIO_Init>
}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40013800 	.word	0x40013800
 8001544:	40021000 	.word	0x40021000
 8001548:	40010800 	.word	0x40010800
 800154c:	40004400 	.word	0x40004400

08001550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <NMI_Handler+0x4>

08001556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <MemManage_Handler+0x4>

08001562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <BusFault_Handler+0x4>

08001568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <UsageFault_Handler+0x4>

0800156e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001596:	f000 f8bf 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <TIM2_IRQHandler+0x10>)
 80015a6:	f001 fdb9 	bl	800311c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200000e0 	.word	0x200000e0

080015b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <USART1_IRQHandler+0x10>)
 80015ba:	f002 f95b 	bl	8003874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000128 	.word	0x20000128

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <_sbrk+0x5c>)
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_sbrk+0x60>)
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f8:	f002 ff12 	bl	8004420 <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	220c      	movs	r2, #12
 8001600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20005000 	.word	0x20005000
 8001628:	00000400 	.word	0x00000400
 800162c:	200001ec 	.word	0x200001ec
 8001630:	20000340 	.word	0x20000340

08001634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001640:	f7ff fff8 	bl	8001634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001646:	490c      	ldr	r1, [pc, #48]	; (8001678 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001648:	4a0c      	ldr	r2, [pc, #48]	; (800167c <LoopFillZerobss+0x16>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a09      	ldr	r2, [pc, #36]	; (8001680 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800165c:	4c09      	ldr	r4, [pc, #36]	; (8001684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f002 fedf 	bl	800442c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800166e:	f7fe fd77 	bl	8000160 <main>
  bx lr
 8001672:	4770      	bx	lr
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800167c:	08004d44 	.word	0x08004d44
  ldr r2, =_sbss
 8001680:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001684:	2000033c 	.word	0x2000033c

08001688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC1_2_IRQHandler>
	...

0800168c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_Init+0x28>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_Init+0x28>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 f947 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	200f      	movs	r0, #15
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fe32 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40022000 	.word	0x40022000

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f95f 	bl	800199a <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 f927 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000014 	.word	0x20000014
 8001710:	2000001c 	.word	0x2000001c
 8001714:	20000018 	.word	0x20000018

08001718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_IncTick+0x1c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_IncTick+0x20>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a03      	ldr	r2, [pc, #12]	; (8001738 <HAL_IncTick+0x20>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	2000001c 	.word	0x2000001c
 8001738:	200001f0 	.word	0x200001f0

0800173c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b02      	ldr	r3, [pc, #8]	; (800174c <HAL_GetTick+0x10>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	200001f0 	.word	0x200001f0

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff fff0 	bl	800173c <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffe0 	bl	800173c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000001c 	.word	0x2000001c

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db0b      	blt.n	8001826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4906      	ldr	r1, [pc, #24]	; (8001830 <__NVIC_EnableIRQ+0x34>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff90 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff2d 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff42 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff90 	bl	8001888 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5f 	bl	8001834 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff35 	bl	80017fc <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b085      	sub	sp, #20
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d008      	beq.n	80019dc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2204      	movs	r2, #4
 80019ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e020      	b.n	8001a1e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 020e 	bic.w	r2, r2, #14
 80019ea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a04:	2101      	movs	r1, #1
 8001a06:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d005      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2204      	movs	r2, #4
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	e051      	b.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 020e 	bic.w	r2, r2, #14
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a22      	ldr	r2, [pc, #136]	; (8001afc <HAL_DMA_Abort_IT+0xd4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d029      	beq.n	8001aca <HAL_DMA_Abort_IT+0xa2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <HAL_DMA_Abort_IT+0xd8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d022      	beq.n	8001ac6 <HAL_DMA_Abort_IT+0x9e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <HAL_DMA_Abort_IT+0xdc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01a      	beq.n	8001ac0 <HAL_DMA_Abort_IT+0x98>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <HAL_DMA_Abort_IT+0xe0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d012      	beq.n	8001aba <HAL_DMA_Abort_IT+0x92>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <HAL_DMA_Abort_IT+0xe4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_DMA_Abort_IT+0x8c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <HAL_DMA_Abort_IT+0xe8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d102      	bne.n	8001aae <HAL_DMA_Abort_IT+0x86>
 8001aa8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001aac:	e00e      	b.n	8001acc <HAL_DMA_Abort_IT+0xa4>
 8001aae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab2:	e00b      	b.n	8001acc <HAL_DMA_Abort_IT+0xa4>
 8001ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab8:	e008      	b.n	8001acc <HAL_DMA_Abort_IT+0xa4>
 8001aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abe:	e005      	b.n	8001acc <HAL_DMA_Abort_IT+0xa4>
 8001ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac4:	e002      	b.n	8001acc <HAL_DMA_Abort_IT+0xa4>
 8001ac6:	2310      	movs	r3, #16
 8001ac8:	e000      	b.n	8001acc <HAL_DMA_Abort_IT+0xa4>
 8001aca:	2301      	movs	r3, #1
 8001acc:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_DMA_Abort_IT+0xec>)
 8001ace:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
    } 
  }
  return status;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40020008 	.word	0x40020008
 8001b00:	4002001c 	.word	0x4002001c
 8001b04:	40020030 	.word	0x40020030
 8001b08:	40020044 	.word	0x40020044
 8001b0c:	40020058 	.word	0x40020058
 8001b10:	4002006c 	.word	0x4002006c
 8001b14:	40020000 	.word	0x40020000

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b08b      	sub	sp, #44	; 0x2c
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2a:	e169      	b.n	8001e00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	f040 8158 	bne.w	8001dfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4a9a      	ldr	r2, [pc, #616]	; (8001db8 <HAL_GPIO_Init+0x2a0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d05e      	beq.n	8001c12 <HAL_GPIO_Init+0xfa>
 8001b54:	4a98      	ldr	r2, [pc, #608]	; (8001db8 <HAL_GPIO_Init+0x2a0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d875      	bhi.n	8001c46 <HAL_GPIO_Init+0x12e>
 8001b5a:	4a98      	ldr	r2, [pc, #608]	; (8001dbc <HAL_GPIO_Init+0x2a4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d058      	beq.n	8001c12 <HAL_GPIO_Init+0xfa>
 8001b60:	4a96      	ldr	r2, [pc, #600]	; (8001dbc <HAL_GPIO_Init+0x2a4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d86f      	bhi.n	8001c46 <HAL_GPIO_Init+0x12e>
 8001b66:	4a96      	ldr	r2, [pc, #600]	; (8001dc0 <HAL_GPIO_Init+0x2a8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d052      	beq.n	8001c12 <HAL_GPIO_Init+0xfa>
 8001b6c:	4a94      	ldr	r2, [pc, #592]	; (8001dc0 <HAL_GPIO_Init+0x2a8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d869      	bhi.n	8001c46 <HAL_GPIO_Init+0x12e>
 8001b72:	4a94      	ldr	r2, [pc, #592]	; (8001dc4 <HAL_GPIO_Init+0x2ac>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d04c      	beq.n	8001c12 <HAL_GPIO_Init+0xfa>
 8001b78:	4a92      	ldr	r2, [pc, #584]	; (8001dc4 <HAL_GPIO_Init+0x2ac>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d863      	bhi.n	8001c46 <HAL_GPIO_Init+0x12e>
 8001b7e:	4a92      	ldr	r2, [pc, #584]	; (8001dc8 <HAL_GPIO_Init+0x2b0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d046      	beq.n	8001c12 <HAL_GPIO_Init+0xfa>
 8001b84:	4a90      	ldr	r2, [pc, #576]	; (8001dc8 <HAL_GPIO_Init+0x2b0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d85d      	bhi.n	8001c46 <HAL_GPIO_Init+0x12e>
 8001b8a:	2b12      	cmp	r3, #18
 8001b8c:	d82a      	bhi.n	8001be4 <HAL_GPIO_Init+0xcc>
 8001b8e:	2b12      	cmp	r3, #18
 8001b90:	d859      	bhi.n	8001c46 <HAL_GPIO_Init+0x12e>
 8001b92:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <HAL_GPIO_Init+0x80>)
 8001b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b98:	08001c13 	.word	0x08001c13
 8001b9c:	08001bed 	.word	0x08001bed
 8001ba0:	08001bff 	.word	0x08001bff
 8001ba4:	08001c41 	.word	0x08001c41
 8001ba8:	08001c47 	.word	0x08001c47
 8001bac:	08001c47 	.word	0x08001c47
 8001bb0:	08001c47 	.word	0x08001c47
 8001bb4:	08001c47 	.word	0x08001c47
 8001bb8:	08001c47 	.word	0x08001c47
 8001bbc:	08001c47 	.word	0x08001c47
 8001bc0:	08001c47 	.word	0x08001c47
 8001bc4:	08001c47 	.word	0x08001c47
 8001bc8:	08001c47 	.word	0x08001c47
 8001bcc:	08001c47 	.word	0x08001c47
 8001bd0:	08001c47 	.word	0x08001c47
 8001bd4:	08001c47 	.word	0x08001c47
 8001bd8:	08001c47 	.word	0x08001c47
 8001bdc:	08001bf5 	.word	0x08001bf5
 8001be0:	08001c09 	.word	0x08001c09
 8001be4:	4a79      	ldr	r2, [pc, #484]	; (8001dcc <HAL_GPIO_Init+0x2b4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bea:	e02c      	b.n	8001c46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e029      	b.n	8001c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	623b      	str	r3, [r7, #32]
          break;
 8001bfc:	e024      	b.n	8001c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	3308      	adds	r3, #8
 8001c04:	623b      	str	r3, [r7, #32]
          break;
 8001c06:	e01f      	b.n	8001c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	330c      	adds	r3, #12
 8001c0e:	623b      	str	r3, [r7, #32]
          break;
 8001c10:	e01a      	b.n	8001c48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d102      	bne.n	8001c20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	623b      	str	r3, [r7, #32]
          break;
 8001c1e:	e013      	b.n	8001c48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d105      	bne.n	8001c34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c28:	2308      	movs	r3, #8
 8001c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	611a      	str	r2, [r3, #16]
          break;
 8001c32:	e009      	b.n	8001c48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c34:	2308      	movs	r3, #8
 8001c36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	615a      	str	r2, [r3, #20]
          break;
 8001c3e:	e003      	b.n	8001c48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
          break;
 8001c44:	e000      	b.n	8001c48 <HAL_GPIO_Init+0x130>
          break;
 8001c46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2bff      	cmp	r3, #255	; 0xff
 8001c4c:	d801      	bhi.n	8001c52 <HAL_GPIO_Init+0x13a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	e001      	b.n	8001c56 <HAL_GPIO_Init+0x13e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3304      	adds	r3, #4
 8001c56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2bff      	cmp	r3, #255	; 0xff
 8001c5c:	d802      	bhi.n	8001c64 <HAL_GPIO_Init+0x14c>
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	e002      	b.n	8001c6a <HAL_GPIO_Init+0x152>
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	3b08      	subs	r3, #8
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	210f      	movs	r1, #15
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	6a39      	ldr	r1, [r7, #32]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	431a      	orrs	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80b1 	beq.w	8001dfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c98:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <HAL_GPIO_Init+0x2b8>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a4c      	ldr	r2, [pc, #304]	; (8001dd0 <HAL_GPIO_Init+0x2b8>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_GPIO_Init+0x2b8>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cb0:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <HAL_GPIO_Init+0x2bc>)
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a40      	ldr	r2, [pc, #256]	; (8001dd8 <HAL_GPIO_Init+0x2c0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d013      	beq.n	8001d04 <HAL_GPIO_Init+0x1ec>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3f      	ldr	r2, [pc, #252]	; (8001ddc <HAL_GPIO_Init+0x2c4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00d      	beq.n	8001d00 <HAL_GPIO_Init+0x1e8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3e      	ldr	r2, [pc, #248]	; (8001de0 <HAL_GPIO_Init+0x2c8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d007      	beq.n	8001cfc <HAL_GPIO_Init+0x1e4>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a3d      	ldr	r2, [pc, #244]	; (8001de4 <HAL_GPIO_Init+0x2cc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <HAL_GPIO_Init+0x1e0>
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e006      	b.n	8001d06 <HAL_GPIO_Init+0x1ee>
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	e004      	b.n	8001d06 <HAL_GPIO_Init+0x1ee>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e002      	b.n	8001d06 <HAL_GPIO_Init+0x1ee>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_GPIO_Init+0x1ee>
 8001d04:	2300      	movs	r3, #0
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	f002 0203 	and.w	r2, r2, #3
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	4093      	lsls	r3, r2
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d16:	492f      	ldr	r1, [pc, #188]	; (8001dd4 <HAL_GPIO_Init+0x2bc>)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	492c      	ldr	r1, [pc, #176]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	4928      	ldr	r1, [pc, #160]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d58:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	4922      	ldr	r1, [pc, #136]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60cb      	str	r3, [r1, #12]
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	491e      	ldr	r1, [pc, #120]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4918      	ldr	r1, [pc, #96]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4914      	ldr	r1, [pc, #80]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d021      	beq.n	8001dec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	490e      	ldr	r1, [pc, #56]	; (8001de8 <HAL_GPIO_Init+0x2d0>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e021      	b.n	8001dfa <HAL_GPIO_Init+0x2e2>
 8001db6:	bf00      	nop
 8001db8:	10320000 	.word	0x10320000
 8001dbc:	10310000 	.word	0x10310000
 8001dc0:	10220000 	.word	0x10220000
 8001dc4:	10210000 	.word	0x10210000
 8001dc8:	10120000 	.word	0x10120000
 8001dcc:	10110000 	.word	0x10110000
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	40010800 	.word	0x40010800
 8001ddc:	40010c00 	.word	0x40010c00
 8001de0:	40011000 	.word	0x40011000
 8001de4:	40011400 	.word	0x40011400
 8001de8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	4909      	ldr	r1, [pc, #36]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f47f ae8e 	bne.w	8001b2c <HAL_GPIO_Init+0x14>
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	372c      	adds	r7, #44	; 0x2c
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40010400 	.word	0x40010400

08001e20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e001      	b.n	8001e42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	807b      	strh	r3, [r7, #2]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e5e:	787b      	ldrb	r3, [r7, #1]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e64:	887a      	ldrh	r2, [r7, #2]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e6a:	e003      	b.n	8001e74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	041a      	lsls	r2, r3, #16
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	611a      	str	r2, [r3, #16]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e12b      	b.n	80020ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fa64 	bl	8001374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ed2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ee4:	f001 f832 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8001ee8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4a81      	ldr	r2, [pc, #516]	; (80020f4 <HAL_I2C_Init+0x274>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d807      	bhi.n	8001f04 <HAL_I2C_Init+0x84>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a80      	ldr	r2, [pc, #512]	; (80020f8 <HAL_I2C_Init+0x278>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	bf94      	ite	ls
 8001efc:	2301      	movls	r3, #1
 8001efe:	2300      	movhi	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e006      	b.n	8001f12 <HAL_I2C_Init+0x92>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4a7d      	ldr	r2, [pc, #500]	; (80020fc <HAL_I2C_Init+0x27c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	bf94      	ite	ls
 8001f0c:	2301      	movls	r3, #1
 8001f0e:	2300      	movhi	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0e7      	b.n	80020ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a78      	ldr	r2, [pc, #480]	; (8002100 <HAL_I2C_Init+0x280>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	0c9b      	lsrs	r3, r3, #18
 8001f24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a6a      	ldr	r2, [pc, #424]	; (80020f4 <HAL_I2C_Init+0x274>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d802      	bhi.n	8001f54 <HAL_I2C_Init+0xd4>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3301      	adds	r3, #1
 8001f52:	e009      	b.n	8001f68 <HAL_I2C_Init+0xe8>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	4a69      	ldr	r2, [pc, #420]	; (8002104 <HAL_I2C_Init+0x284>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	3301      	adds	r3, #1
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	495c      	ldr	r1, [pc, #368]	; (80020f4 <HAL_I2C_Init+0x274>)
 8001f84:	428b      	cmp	r3, r1
 8001f86:	d819      	bhi.n	8001fbc <HAL_I2C_Init+0x13c>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1e59      	subs	r1, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f96:	1c59      	adds	r1, r3, #1
 8001f98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f9c:	400b      	ands	r3, r1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_I2C_Init+0x138>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1e59      	subs	r1, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb6:	e051      	b.n	800205c <HAL_I2C_Init+0x1dc>
 8001fb8:	2304      	movs	r3, #4
 8001fba:	e04f      	b.n	800205c <HAL_I2C_Init+0x1dc>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d111      	bne.n	8001fe8 <HAL_I2C_Init+0x168>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e58      	subs	r0, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	440b      	add	r3, r1
 8001fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	e012      	b.n	800200e <HAL_I2C_Init+0x18e>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1e58      	subs	r0, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	0099      	lsls	r1, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Init+0x196>
 8002012:	2301      	movs	r3, #1
 8002014:	e022      	b.n	800205c <HAL_I2C_Init+0x1dc>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10e      	bne.n	800203c <HAL_I2C_Init+0x1bc>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1e58      	subs	r0, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	440b      	add	r3, r1
 800202c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002030:	3301      	adds	r3, #1
 8002032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203a:	e00f      	b.n	800205c <HAL_I2C_Init+0x1dc>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e58      	subs	r0, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	0099      	lsls	r1, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002052:	3301      	adds	r3, #1
 8002054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	6809      	ldr	r1, [r1, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800208a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6911      	ldr	r1, [r2, #16]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68d2      	ldr	r2, [r2, #12]
 8002096:	4311      	orrs	r1, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	430b      	orrs	r3, r1
 800209e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	000186a0 	.word	0x000186a0
 80020f8:	001e847f 	.word	0x001e847f
 80020fc:	003d08ff 	.word	0x003d08ff
 8002100:	431bde83 	.word	0x431bde83
 8002104:	10624dd3 	.word	0x10624dd3

08002108 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	461a      	mov	r2, r3
 8002114:	460b      	mov	r3, r1
 8002116:	817b      	strh	r3, [r7, #10]
 8002118:	4613      	mov	r3, r2
 800211a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff fb0e 	bl	800173c <HAL_GetTick>
 8002120:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b20      	cmp	r3, #32
 800212c:	f040 80e0 	bne.w	80022f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2319      	movs	r3, #25
 8002136:	2201      	movs	r2, #1
 8002138:	4970      	ldr	r1, [pc, #448]	; (80022fc <HAL_I2C_Master_Transmit+0x1f4>)
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f964 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002146:	2302      	movs	r3, #2
 8002148:	e0d3      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_I2C_Master_Transmit+0x50>
 8002154:	2302      	movs	r3, #2
 8002156:	e0cc      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d007      	beq.n	800217e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2221      	movs	r2, #33	; 0x21
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2210      	movs	r2, #16
 800219a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	893a      	ldrh	r2, [r7, #8]
 80021ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4a50      	ldr	r2, [pc, #320]	; (8002300 <HAL_I2C_Master_Transmit+0x1f8>)
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021c0:	8979      	ldrh	r1, [r7, #10]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	6a3a      	ldr	r2, [r7, #32]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f89c 	bl	8002304 <I2C_MasterRequestWrite>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e08d      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021ec:	e066      	b.n	80022bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	6a39      	ldr	r1, [r7, #32]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fa22 	bl	800263c <I2C_WaitOnTXEFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00d      	beq.n	800221a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2b04      	cmp	r3, #4
 8002204:	d107      	bne.n	8002216 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002214:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e06b      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b04      	cmp	r3, #4
 8002256:	d11b      	bne.n	8002290 <HAL_I2C_Master_Transmit+0x188>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	2b00      	cmp	r3, #0
 800225e:	d017      	beq.n	8002290 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	6a39      	ldr	r1, [r7, #32]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fa19 	bl	80026cc <I2C_WaitOnBTFFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d107      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e01a      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d194      	bne.n	80021ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e000      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
  }
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	00100002 	.word	0x00100002
 8002300:	ffff0000 	.word	0xffff0000

08002304 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	460b      	mov	r3, r1
 8002312:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b08      	cmp	r3, #8
 800231e:	d006      	beq.n	800232e <I2C_MasterRequestWrite+0x2a>
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d003      	beq.n	800232e <I2C_MasterRequestWrite+0x2a>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800232c:	d108      	bne.n	8002340 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e00b      	b.n	8002358 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	2b12      	cmp	r3, #18
 8002346:	d107      	bne.n	8002358 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002356:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f84f 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00d      	beq.n	800238c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800237e:	d103      	bne.n	8002388 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e035      	b.n	80023f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002394:	d108      	bne.n	80023a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002396:	897b      	ldrh	r3, [r7, #10]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023a4:	611a      	str	r2, [r3, #16]
 80023a6:	e01b      	b.n	80023e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023a8:	897b      	ldrh	r3, [r7, #10]
 80023aa:	11db      	asrs	r3, r3, #7
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f003 0306 	and.w	r3, r3, #6
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f063 030f 	orn	r3, r3, #15
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <I2C_MasterRequestWrite+0xfc>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f898 	bl	80024fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e010      	b.n	80023f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023d6:	897b      	ldrh	r3, [r7, #10]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <I2C_MasterRequestWrite+0x100>)
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f888 	bl	80024fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	00010008 	.word	0x00010008
 8002404:	00010002 	.word	0x00010002

08002408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002418:	e048      	b.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d044      	beq.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002422:	f7ff f98b 	bl	800173c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d302      	bcc.n	8002438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d139      	bne.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	0c1b      	lsrs	r3, r3, #16
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d10d      	bne.n	800245e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	43da      	mvns	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4013      	ands	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	e00c      	b.n	8002478 <I2C_WaitOnFlagUntilTimeout+0x70>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	43da      	mvns	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4013      	ands	r3, r2
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	429a      	cmp	r2, r3
 800247c:	d116      	bne.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f043 0220 	orr.w	r2, r3, #32
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e023      	b.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	0c1b      	lsrs	r3, r3, #16
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10d      	bne.n	80024d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	43da      	mvns	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4013      	ands	r3, r2
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	e00c      	b.n	80024ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	43da      	mvns	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4013      	ands	r3, r2
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d093      	beq.n	800241a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800250a:	e071      	b.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800251a:	d123      	bne.n	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002534:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f043 0204 	orr.w	r2, r3, #4
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e067      	b.n	8002634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256a:	d041      	beq.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256c:	f7ff f8e6 	bl	800173c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d302      	bcc.n	8002582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d136      	bne.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d10c      	bne.n	80025a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	43da      	mvns	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4013      	ands	r3, r2
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	bf14      	ite	ne
 800259e:	2301      	movne	r3, #1
 80025a0:	2300      	moveq	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	e00b      	b.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	43da      	mvns	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4013      	ands	r3, r2
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f043 0220 	orr.w	r2, r3, #32
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e021      	b.n	8002634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	0c1b      	lsrs	r3, r3, #16
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10c      	bne.n	8002614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	43da      	mvns	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4013      	ands	r3, r2
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	e00b      	b.n	800262c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4013      	ands	r3, r2
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf14      	ite	ne
 8002626:	2301      	movne	r3, #1
 8002628:	2300      	moveq	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	f47f af6d 	bne.w	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002648:	e034      	b.n	80026b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f886 	bl	800275c <I2C_IsAcknowledgeFailed>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e034      	b.n	80026c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d028      	beq.n	80026b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002662:	f7ff f86b 	bl	800173c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	d302      	bcc.n	8002678 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d11d      	bne.n	80026b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	d016      	beq.n	80026b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e007      	b.n	80026c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b80      	cmp	r3, #128	; 0x80
 80026c0:	d1c3      	bne.n	800264a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026d8:	e034      	b.n	8002744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f83e 	bl	800275c <I2C_IsAcknowledgeFailed>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e034      	b.n	8002754 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d028      	beq.n	8002744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f2:	f7ff f823 	bl	800173c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d302      	bcc.n	8002708 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d11d      	bne.n	8002744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b04      	cmp	r3, #4
 8002714:	d016      	beq.n	8002744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e007      	b.n	8002754 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b04      	cmp	r3, #4
 8002750:	d1c3      	bne.n	80026da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002772:	d11b      	bne.n	80027ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800277c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f043 0204 	orr.w	r2, r3, #4
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e272      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8087 	beq.w	80028e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d8:	4b92      	ldr	r3, [pc, #584]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d00c      	beq.n	80027fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027e4:	4b8f      	ldr	r3, [pc, #572]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d112      	bne.n	8002816 <HAL_RCC_OscConfig+0x5e>
 80027f0:	4b8c      	ldr	r3, [pc, #560]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fc:	d10b      	bne.n	8002816 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fe:	4b89      	ldr	r3, [pc, #548]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d06c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x12c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d168      	bne.n	80028e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e24c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x76>
 8002820:	4b80      	ldr	r3, [pc, #512]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a7f      	ldr	r2, [pc, #508]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	e02e      	b.n	800288c <HAL_RCC_OscConfig+0xd4>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x98>
 8002836:	4b7b      	ldr	r3, [pc, #492]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a7a      	ldr	r2, [pc, #488]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 800283c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b78      	ldr	r3, [pc, #480]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a77      	ldr	r2, [pc, #476]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e01d      	b.n	800288c <HAL_RCC_OscConfig+0xd4>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0xbc>
 800285a:	4b72      	ldr	r3, [pc, #456]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a71      	ldr	r2, [pc, #452]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b6f      	ldr	r3, [pc, #444]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a6e      	ldr	r2, [pc, #440]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0xd4>
 8002874:	4b6b      	ldr	r3, [pc, #428]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a6a      	ldr	r2, [pc, #424]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 800287a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b68      	ldr	r3, [pc, #416]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a67      	ldr	r2, [pc, #412]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d013      	beq.n	80028bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe ff52 	bl	800173c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289c:	f7fe ff4e 	bl	800173c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e200      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	4b5d      	ldr	r3, [pc, #372]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0xe4>
 80028ba:	e014      	b.n	80028e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe ff3e 	bl	800173c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe ff3a 	bl	800173c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e1ec      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x10c>
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d063      	beq.n	80029ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028f2:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028fe:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b08      	cmp	r3, #8
 8002908:	d11c      	bne.n	8002944 <HAL_RCC_OscConfig+0x18c>
 800290a:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d116      	bne.n	8002944 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002916:	4b43      	ldr	r3, [pc, #268]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_RCC_OscConfig+0x176>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e1c0      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4939      	ldr	r1, [pc, #228]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	e03a      	b.n	80029ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294c:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7fe fef3 	bl	800173c <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295a:	f7fe feef 	bl	800173c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e1a1      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	4b2a      	ldr	r3, [pc, #168]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4927      	ldr	r1, [pc, #156]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]
 800298c:	e015      	b.n	80029ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298e:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe fed2 	bl	800173c <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299c:	f7fe fece 	bl	800173c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e180      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d03a      	beq.n	8002a3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d019      	beq.n	8002a02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ce:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <HAL_RCC_OscConfig+0x274>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7fe feb2 	bl	800173c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fe feae 	bl	800173c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e160      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029fa:	2001      	movs	r0, #1
 80029fc:	f000 face 	bl	8002f9c <RCC_Delay>
 8002a00:	e01c      	b.n	8002a3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_RCC_OscConfig+0x274>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a08:	f7fe fe98 	bl	800173c <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0e:	e00f      	b.n	8002a30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a10:	f7fe fe94 	bl	800173c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d908      	bls.n	8002a30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e146      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	42420000 	.word	0x42420000
 8002a2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	4b92      	ldr	r3, [pc, #584]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e9      	bne.n	8002a10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80a6 	beq.w	8002b96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4e:	4b8b      	ldr	r3, [pc, #556]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10d      	bne.n	8002a76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4a87      	ldr	r2, [pc, #540]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a64:	61d3      	str	r3, [r2, #28]
 8002a66:	4b85      	ldr	r3, [pc, #532]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a72:	2301      	movs	r3, #1
 8002a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a76:	4b82      	ldr	r3, [pc, #520]	; (8002c80 <HAL_RCC_OscConfig+0x4c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d118      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a82:	4b7f      	ldr	r3, [pc, #508]	; (8002c80 <HAL_RCC_OscConfig+0x4c8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7e      	ldr	r2, [pc, #504]	; (8002c80 <HAL_RCC_OscConfig+0x4c8>)
 8002a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fe55 	bl	800173c <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a96:	f7fe fe51 	bl	800173c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b64      	cmp	r3, #100	; 0x64
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e103      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa8:	4b75      	ldr	r3, [pc, #468]	; (8002c80 <HAL_RCC_OscConfig+0x4c8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d106      	bne.n	8002aca <HAL_RCC_OscConfig+0x312>
 8002abc:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4a6e      	ldr	r2, [pc, #440]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6213      	str	r3, [r2, #32]
 8002ac8:	e02d      	b.n	8002b26 <HAL_RCC_OscConfig+0x36e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0x334>
 8002ad2:	4b6a      	ldr	r3, [pc, #424]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	4a69      	ldr	r2, [pc, #420]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	6213      	str	r3, [r2, #32]
 8002ade:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4a66      	ldr	r2, [pc, #408]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	f023 0304 	bic.w	r3, r3, #4
 8002ae8:	6213      	str	r3, [r2, #32]
 8002aea:	e01c      	b.n	8002b26 <HAL_RCC_OscConfig+0x36e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b05      	cmp	r3, #5
 8002af2:	d10c      	bne.n	8002b0e <HAL_RCC_OscConfig+0x356>
 8002af4:	4b61      	ldr	r3, [pc, #388]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4a60      	ldr	r2, [pc, #384]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	f043 0304 	orr.w	r3, r3, #4
 8002afe:	6213      	str	r3, [r2, #32]
 8002b00:	4b5e      	ldr	r3, [pc, #376]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	4a5d      	ldr	r2, [pc, #372]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6213      	str	r3, [r2, #32]
 8002b0c:	e00b      	b.n	8002b26 <HAL_RCC_OscConfig+0x36e>
 8002b0e:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	4a5a      	ldr	r2, [pc, #360]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	6213      	str	r3, [r2, #32]
 8002b1a:	4b58      	ldr	r3, [pc, #352]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	4a57      	ldr	r2, [pc, #348]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	f023 0304 	bic.w	r3, r3, #4
 8002b24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d015      	beq.n	8002b5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fe05 	bl	800173c <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7fe fe01 	bl	800173c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e0b1      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4c:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ee      	beq.n	8002b36 <HAL_RCC_OscConfig+0x37e>
 8002b58:	e014      	b.n	8002b84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe fdef 	bl	800173c <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fe fdeb 	bl	800173c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e09b      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b78:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ee      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d105      	bne.n	8002b96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8a:	4b3c      	ldr	r3, [pc, #240]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4a3b      	ldr	r2, [pc, #236]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8087 	beq.w	8002cae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba0:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d061      	beq.n	8002c70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d146      	bne.n	8002c42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb4:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <HAL_RCC_OscConfig+0x4cc>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bba:	f7fe fdbf 	bl	800173c <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc2:	f7fe fdbb 	bl	800173c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e06d      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd4:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f0      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d108      	bne.n	8002bfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bea:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	4921      	ldr	r1, [pc, #132]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bfc:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a19      	ldr	r1, [r3, #32]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	491b      	ldr	r1, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fd8f 	bl	800173c <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fe fd8b 	bl	800173c <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e03d      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x46a>
 8002c40:	e035      	b.n	8002cae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_RCC_OscConfig+0x4cc>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe fd78 	bl	800173c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fe fd74 	bl	800173c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e026      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x498>
 8002c6e:	e01e      	b.n	8002cae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d107      	bne.n	8002c88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e019      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40007000 	.word	0x40007000
 8002c84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_OscConfig+0x500>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000

08002cbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0d0      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b6a      	ldr	r3, [pc, #424]	; (8002e7c <HAL_RCC_ClockConfig+0x1c0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d910      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b67      	ldr	r3, [pc, #412]	; (8002e7c <HAL_RCC_ClockConfig+0x1c0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 0207 	bic.w	r2, r3, #7
 8002ce6:	4965      	ldr	r1, [pc, #404]	; (8002e7c <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b63      	ldr	r3, [pc, #396]	; (8002e7c <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0b8      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d18:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a58      	ldr	r2, [pc, #352]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3c:	4b50      	ldr	r3, [pc, #320]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	494d      	ldr	r1, [pc, #308]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d040      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d115      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e07f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7a:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e073      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8a:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e06b      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9a:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f023 0203 	bic.w	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4936      	ldr	r1, [pc, #216]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dac:	f7fe fcc6 	bl	800173c <HAL_GetTick>
 8002db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db4:	f7fe fcc2 	bl	800173c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e053      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 020c 	and.w	r2, r3, #12
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d1eb      	bne.n	8002db4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b27      	ldr	r3, [pc, #156]	; (8002e7c <HAL_RCC_ClockConfig+0x1c0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d210      	bcs.n	8002e0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 0207 	bic.w	r2, r3, #7
 8002df2:	4922      	ldr	r1, [pc, #136]	; (8002e7c <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e032      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4916      	ldr	r1, [pc, #88]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	490e      	ldr	r1, [pc, #56]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e4a:	f000 f821 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	490a      	ldr	r1, [pc, #40]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5c:	5ccb      	ldrb	r3, [r1, r3]
 8002e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e62:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <HAL_RCC_ClockConfig+0x1cc>)
 8002e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x1d0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fc24 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40022000 	.word	0x40022000
 8002e80:	40021000 	.word	0x40021000
 8002e84:	08004cdc 	.word	0x08004cdc
 8002e88:	20000014 	.word	0x20000014
 8002e8c:	20000018 	.word	0x20000018

08002e90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d002      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x30>
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d003      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ebe:	e027      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ec2:	613b      	str	r3, [r7, #16]
      break;
 8002ec4:	e027      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	0c9b      	lsrs	r3, r3, #18
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ed0:	5cd3      	ldrb	r3, [r2, r3]
 8002ed2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	0c5b      	lsrs	r3, r3, #17
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eea:	5cd3      	ldrb	r3, [r2, r3]
 8002eec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ef2:	fb03 f202 	mul.w	r2, r3, r2
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e004      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	613b      	str	r3, [r7, #16]
      break;
 8002f0e:	e002      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f12:	613b      	str	r3, [r7, #16]
      break;
 8002f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f16:	693b      	ldr	r3, [r7, #16]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000
 8002f28:	007a1200 	.word	0x007a1200
 8002f2c:	08004cf4 	.word	0x08004cf4
 8002f30:	08004d04 	.word	0x08004d04
 8002f34:	003d0900 	.word	0x003d0900

08002f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f3c:	4b02      	ldr	r3, [pc, #8]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	20000014 	.word	0x20000014

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f50:	f7ff fff2 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4903      	ldr	r1, [pc, #12]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	08004cec 	.word	0x08004cec

08002f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f78:	f7ff ffde 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	0adb      	lsrs	r3, r3, #11
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	4903      	ldr	r1, [pc, #12]	; (8002f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f8a:	5ccb      	ldrb	r3, [r1, r3]
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08004cec 	.word	0x08004cec

08002f9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <RCC_Delay+0x34>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <RCC_Delay+0x38>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0a5b      	lsrs	r3, r3, #9
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fb8:	bf00      	nop
  }
  while (Delay --);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1e5a      	subs	r2, r3, #1
 8002fbe:	60fa      	str	r2, [r7, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f9      	bne.n	8002fb8 <RCC_Delay+0x1c>
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	20000014 	.word	0x20000014
 8002fd4:	10624dd3 	.word	0x10624dd3

08002fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e041      	b.n	800306e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fe f9f6 	bl	80013f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f000 fa74 	bl	8003504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d001      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e03a      	b.n	8003106 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a18      	ldr	r2, [pc, #96]	; (8003110 <HAL_TIM_Base_Start_IT+0x98>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00e      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x58>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d009      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x58>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a14      	ldr	r2, [pc, #80]	; (8003114 <HAL_TIM_Base_Start_IT+0x9c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x58>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a13      	ldr	r2, [pc, #76]	; (8003118 <HAL_TIM_Base_Start_IT+0xa0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d111      	bne.n	80030f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d010      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0201 	orr.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f2:	e007      	b.n	8003104 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800

0800311c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d122      	bne.n	8003178 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b02      	cmp	r3, #2
 800313e:	d11b      	bne.n	8003178 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0202 	mvn.w	r2, #2
 8003148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f9b4 	bl	80034cc <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f9a7 	bl	80034ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f9b6 	bl	80034de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b04      	cmp	r3, #4
 8003184:	d122      	bne.n	80031cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b04      	cmp	r3, #4
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0204 	mvn.w	r2, #4
 800319c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f98a 	bl	80034cc <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f97d 	bl	80034ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f98c 	bl	80034de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d122      	bne.n	8003220 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d11b      	bne.n	8003220 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0208 	mvn.w	r2, #8
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2204      	movs	r2, #4
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f960 	bl	80034cc <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f953 	bl	80034ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f962 	bl	80034de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b10      	cmp	r3, #16
 800322c:	d122      	bne.n	8003274 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b10      	cmp	r3, #16
 800323a:	d11b      	bne.n	8003274 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0210 	mvn.w	r2, #16
 8003244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2208      	movs	r2, #8
 800324a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f936 	bl	80034cc <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f929 	bl	80034ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f938 	bl	80034de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d10e      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0201 	mvn.w	r2, #1
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd ff16 	bl	80010cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032aa:	2b80      	cmp	r3, #128	; 0x80
 80032ac:	d10e      	bne.n	80032cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	2b80      	cmp	r3, #128	; 0x80
 80032ba:	d107      	bne.n	80032cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fa7b 	bl	80037c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d10e      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d107      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8fc 	bl	80034f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b20      	cmp	r3, #32
 8003304:	d10e      	bne.n	8003324 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b20      	cmp	r3, #32
 8003312:	d107      	bne.n	8003324 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0220 	mvn.w	r2, #32
 800331c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fa46 	bl	80037b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_TIM_ConfigClockSource+0x1c>
 8003344:	2302      	movs	r3, #2
 8003346:	e0b4      	b.n	80034b2 <HAL_TIM_ConfigClockSource+0x186>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800336e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003380:	d03e      	beq.n	8003400 <HAL_TIM_ConfigClockSource+0xd4>
 8003382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003386:	f200 8087 	bhi.w	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338e:	f000 8086 	beq.w	800349e <HAL_TIM_ConfigClockSource+0x172>
 8003392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003396:	d87f      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b70      	cmp	r3, #112	; 0x70
 800339a:	d01a      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0xa6>
 800339c:	2b70      	cmp	r3, #112	; 0x70
 800339e:	d87b      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b60      	cmp	r3, #96	; 0x60
 80033a2:	d050      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x11a>
 80033a4:	2b60      	cmp	r3, #96	; 0x60
 80033a6:	d877      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b50      	cmp	r3, #80	; 0x50
 80033aa:	d03c      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0xfa>
 80033ac:	2b50      	cmp	r3, #80	; 0x50
 80033ae:	d873      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d058      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0x13a>
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d86f      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b30      	cmp	r3, #48	; 0x30
 80033ba:	d064      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x15a>
 80033bc:	2b30      	cmp	r3, #48	; 0x30
 80033be:	d86b      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d060      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x15a>
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d867      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d05c      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x15a>
 80033cc:	2b10      	cmp	r3, #16
 80033ce:	d05a      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x15a>
 80033d0:	e062      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033e2:	f000 f968 	bl	80036b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	609a      	str	r2, [r3, #8]
      break;
 80033fe:	e04f      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003410:	f000 f951 	bl	80036b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003422:	609a      	str	r2, [r3, #8]
      break;
 8003424:	e03c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003432:	461a      	mov	r2, r3
 8003434:	f000 f8c8 	bl	80035c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2150      	movs	r1, #80	; 0x50
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f91f 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 8003444:	e02c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003452:	461a      	mov	r2, r3
 8003454:	f000 f8e6 	bl	8003624 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2160      	movs	r1, #96	; 0x60
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f90f 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 8003464:	e01c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003472:	461a      	mov	r2, r3
 8003474:	f000 f8a8 	bl	80035c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2140      	movs	r1, #64	; 0x40
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f8ff 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 8003484:	e00c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f000 f8f6 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 8003496:	e003      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	e000      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800349e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr
	...

08003504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a29      	ldr	r2, [pc, #164]	; (80035bc <TIM_Base_SetConfig+0xb8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00b      	beq.n	8003534 <TIM_Base_SetConfig+0x30>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003522:	d007      	beq.n	8003534 <TIM_Base_SetConfig+0x30>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a26      	ldr	r2, [pc, #152]	; (80035c0 <TIM_Base_SetConfig+0xbc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0x30>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a25      	ldr	r2, [pc, #148]	; (80035c4 <TIM_Base_SetConfig+0xc0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <TIM_Base_SetConfig+0xb8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00b      	beq.n	8003566 <TIM_Base_SetConfig+0x62>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d007      	beq.n	8003566 <TIM_Base_SetConfig+0x62>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <TIM_Base_SetConfig+0xbc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d003      	beq.n	8003566 <TIM_Base_SetConfig+0x62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <TIM_Base_SetConfig+0xc0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d108      	bne.n	8003578 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a07      	ldr	r2, [pc, #28]	; (80035bc <TIM_Base_SetConfig+0xb8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d103      	bne.n	80035ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	615a      	str	r2, [r3, #20]
}
 80035b2:	bf00      	nop
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800

080035c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f023 0201 	bic.w	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f023 030a 	bic.w	r3, r3, #10
 8003604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0210 	bic.w	r2, r3, #16
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800364e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	031b      	lsls	r3, r3, #12
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003660:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	621a      	str	r2, [r3, #32]
}
 8003678:	bf00      	nop
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	f043 0307 	orr.w	r3, r3, #7
 80036a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b087      	sub	sp, #28
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	021a      	lsls	r2, r3, #8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	431a      	orrs	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4313      	orrs	r3, r2
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	609a      	str	r2, [r3, #8]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003708:	2302      	movs	r3, #2
 800370a:	e046      	b.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d009      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a12      	ldr	r2, [pc, #72]	; (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a10      	ldr	r2, [pc, #64]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10c      	bne.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	4313      	orrs	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	40012c00 	.word	0x40012c00
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40000800 	.word	0x40000800

080037b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e042      	b.n	800386c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd fe1c 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2224      	movs	r2, #36	; 0x24
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fc7f 	bl	800411c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800384c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b0ba      	sub	sp, #232	; 0xe8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_UART_IRQHandler+0x66>
 80038c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fb63 	bl	8003f9e <UART_Receive_IT>
      return;
 80038d8:	e25b      	b.n	8003d92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80de 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x22c>
 80038e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d106      	bne.n	80038fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80d1 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_UART_IRQHandler+0xae>
 800390a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_UART_IRQHandler+0xd2>
 800392e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d005      	beq.n	8003946 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f043 0202 	orr.w	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_UART_IRQHandler+0xf6>
 8003952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	f043 0204 	orr.w	r2, r3, #4
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d011      	beq.n	800399a <HAL_UART_IRQHandler+0x126>
 8003976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d105      	bne.n	800398e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f043 0208 	orr.w	r2, r3, #8
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 81f2 	beq.w	8003d88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_UART_IRQHandler+0x14e>
 80039b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 faee 	bl	8003f9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <HAL_UART_IRQHandler+0x17a>
 80039e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d04f      	beq.n	8003a8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f9f8 	bl	8003de4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d041      	beq.n	8003a86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3314      	adds	r3, #20
 8003a2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1d9      	bne.n	8003a02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d013      	beq.n	8003a7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	4a7e      	ldr	r2, [pc, #504]	; (8003c54 <HAL_UART_IRQHandler+0x3e0>)
 8003a5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd ffe0 	bl	8001a28 <HAL_DMA_Abort_IT>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d016      	beq.n	8003a9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	e00e      	b.n	8003a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f99c 	bl	8003dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a84:	e00a      	b.n	8003a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f998 	bl	8003dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	e006      	b.n	8003a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f994 	bl	8003dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003a9a:	e175      	b.n	8003d88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	bf00      	nop
    return;
 8003a9e:	e173      	b.n	8003d88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	f040 814f 	bne.w	8003d48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8148 	beq.w	8003d48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8141 	beq.w	8003d48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80b6 	beq.w	8003c58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003af8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 8145 	beq.w	8003d8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	f080 813e 	bcs.w	8003d8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	f000 8088 	beq.w	8003c34 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	330c      	adds	r3, #12
 8003b2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b50:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1d9      	bne.n	8003b24 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3314      	adds	r3, #20
 8003b76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3314      	adds	r3, #20
 8003b90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ba0:	e841 2300 	strex	r3, r2, [r1]
 8003ba4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e1      	bne.n	8003b70 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3314      	adds	r3, #20
 8003bb2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb6:	e853 3f00 	ldrex	r3, [r3]
 8003bba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3314      	adds	r3, #20
 8003bcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bd0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e3      	bne.n	8003bac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c04:	f023 0310 	bic.w	r3, r3, #16
 8003c08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c16:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c18:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e3      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd febf 	bl	80019b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	4619      	mov	r1, r3
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f8bf 	bl	8003dce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c50:	e09c      	b.n	8003d8c <HAL_UART_IRQHandler+0x518>
 8003c52:	bf00      	nop
 8003c54:	08003ea9 	.word	0x08003ea9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 808e 	beq.w	8003d90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8089 	beq.w	8003d90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	330c      	adds	r3, #12
 8003c84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ca2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ca4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e3      	bne.n	8003c7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3314      	adds	r3, #20
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3314      	adds	r3, #20
 8003cd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cda:	633a      	str	r2, [r7, #48]	; 0x30
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e3      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	330c      	adds	r3, #12
 8003d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	e853 3f00 	ldrex	r3, [r3]
 8003d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0310 	bic.w	r3, r3, #16
 8003d12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d20:	61fa      	str	r2, [r7, #28]
 8003d22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	69b9      	ldr	r1, [r7, #24]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e3      	bne.n	8003cfc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f844 	bl	8003dce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d46:	e023      	b.n	8003d90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d009      	beq.n	8003d68 <HAL_UART_IRQHandler+0x4f4>
 8003d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f8b5 	bl	8003ed0 <UART_Transmit_IT>
    return;
 8003d66:	e014      	b.n	8003d92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00e      	beq.n	8003d92 <HAL_UART_IRQHandler+0x51e>
 8003d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f8f4 	bl	8003f6e <UART_EndTransmit_IT>
    return;
 8003d86:	e004      	b.n	8003d92 <HAL_UART_IRQHandler+0x51e>
    return;
 8003d88:	bf00      	nop
 8003d8a:	e002      	b.n	8003d92 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d8c:	bf00      	nop
 8003d8e:	e000      	b.n	8003d92 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d90:	bf00      	nop
  }
}
 8003d92:	37e8      	adds	r7, #232	; 0xe8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr

08003dce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b095      	sub	sp, #84	; 0x54
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e0c:	643a      	str	r2, [r7, #64]	; 0x40
 8003e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e5      	bne.n	8003dec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3314      	adds	r3, #20
 8003e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3314      	adds	r3, #20
 8003e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e5      	bne.n	8003e20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d119      	bne.n	8003e90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f023 0310 	bic.w	r3, r3, #16
 8003e72:	647b      	str	r3, [r7, #68]	; 0x44
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e7c:	61ba      	str	r2, [r7, #24]
 8003e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e9e:	bf00      	nop
 8003ea0:	3754      	adds	r7, #84	; 0x54
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff ff7a 	bl	8003dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b21      	cmp	r3, #33	; 0x21
 8003ee2:	d13e      	bne.n	8003f62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eec:	d114      	bne.n	8003f18 <UART_Transmit_IT+0x48>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d110      	bne.n	8003f18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	1c9a      	adds	r2, r3, #2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	621a      	str	r2, [r3, #32]
 8003f16:	e008      	b.n	8003f2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	1c59      	adds	r1, r3, #1
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6211      	str	r1, [r2, #32]
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	4619      	mov	r1, r3
 8003f38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e000      	b.n	8003f64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
  }
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ff02 	bl	8003d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b08c      	sub	sp, #48	; 0x30
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b22      	cmp	r3, #34	; 0x22
 8003fb0:	f040 80ae 	bne.w	8004110 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbc:	d117      	bne.n	8003fee <UART_Receive_IT+0x50>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d113      	bne.n	8003fee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	1c9a      	adds	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28
 8003fec:	e026      	b.n	800403c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d007      	beq.n	8004012 <UART_Receive_IT+0x74>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <UART_Receive_IT+0x82>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e008      	b.n	8004032 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800402c:	b2da      	uxtb	r2, r3
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29b      	uxth	r3, r3
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4619      	mov	r1, r3
 800404a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800404c:	2b00      	cmp	r3, #0
 800404e:	d15d      	bne.n	800410c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0220 	bic.w	r2, r2, #32
 800405e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800406e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	2b01      	cmp	r3, #1
 8004094:	d135      	bne.n	8004102 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	613b      	str	r3, [r7, #16]
   return(result);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f023 0310 	bic.w	r3, r3, #16
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	330c      	adds	r3, #12
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	623a      	str	r2, [r7, #32]
 80040be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	69f9      	ldr	r1, [r7, #28]
 80040c2:	6a3a      	ldr	r2, [r7, #32]
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e5      	bne.n	800409c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d10a      	bne.n	80040f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fe67 	bl	8003dce <HAL_UARTEx_RxEventCallback>
 8004100:	e002      	b.n	8004108 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fe51 	bl	8003daa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e002      	b.n	8004112 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3730      	adds	r7, #48	; 0x30
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004156:	f023 030c 	bic.w	r3, r3, #12
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	430b      	orrs	r3, r1
 8004162:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2c      	ldr	r2, [pc, #176]	; (8004230 <UART_SetConfig+0x114>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d103      	bne.n	800418c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004184:	f7fe fef6 	bl	8002f74 <HAL_RCC_GetPCLK2Freq>
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	e002      	b.n	8004192 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800418c:	f7fe fede 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8004190:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009a      	lsls	r2, r3, #2
 800419c:	441a      	add	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	4a22      	ldr	r2, [pc, #136]	; (8004234 <UART_SetConfig+0x118>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	0119      	lsls	r1, r3, #4
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009a      	lsls	r2, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c8:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <UART_SetConfig+0x118>)
 80041ca:	fba3 0302 	umull	r0, r3, r3, r2
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2064      	movs	r0, #100	; 0x64
 80041d2:	fb00 f303 	mul.w	r3, r0, r3
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	3332      	adds	r3, #50	; 0x32
 80041dc:	4a15      	ldr	r2, [pc, #84]	; (8004234 <UART_SetConfig+0x118>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e8:	4419      	add	r1, r3
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	009a      	lsls	r2, r3, #2
 80041f4:	441a      	add	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <UART_SetConfig+0x118>)
 8004202:	fba3 0302 	umull	r0, r3, r3, r2
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2064      	movs	r0, #100	; 0x64
 800420a:	fb00 f303 	mul.w	r3, r0, r3
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	3332      	adds	r3, #50	; 0x32
 8004214:	4a07      	ldr	r2, [pc, #28]	; (8004234 <UART_SetConfig+0x118>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	f003 020f 	and.w	r2, r3, #15
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	440a      	add	r2, r1
 8004226:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40013800 	.word	0x40013800
 8004234:	51eb851f 	.word	0x51eb851f

08004238 <malloc>:
 8004238:	4b02      	ldr	r3, [pc, #8]	; (8004244 <malloc+0xc>)
 800423a:	4601      	mov	r1, r0
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	f000 b82b 	b.w	8004298 <_malloc_r>
 8004242:	bf00      	nop
 8004244:	2000006c 	.word	0x2000006c

08004248 <free>:
 8004248:	4b02      	ldr	r3, [pc, #8]	; (8004254 <free+0xc>)
 800424a:	4601      	mov	r1, r0
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	f000 b91b 	b.w	8004488 <_free_r>
 8004252:	bf00      	nop
 8004254:	2000006c 	.word	0x2000006c

08004258 <sbrk_aligned>:
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	4e0e      	ldr	r6, [pc, #56]	; (8004294 <sbrk_aligned+0x3c>)
 800425c:	460c      	mov	r4, r1
 800425e:	6831      	ldr	r1, [r6, #0]
 8004260:	4605      	mov	r5, r0
 8004262:	b911      	cbnz	r1, 800426a <sbrk_aligned+0x12>
 8004264:	f000 f8cc 	bl	8004400 <_sbrk_r>
 8004268:	6030      	str	r0, [r6, #0]
 800426a:	4621      	mov	r1, r4
 800426c:	4628      	mov	r0, r5
 800426e:	f000 f8c7 	bl	8004400 <_sbrk_r>
 8004272:	1c43      	adds	r3, r0, #1
 8004274:	d00a      	beq.n	800428c <sbrk_aligned+0x34>
 8004276:	1cc4      	adds	r4, r0, #3
 8004278:	f024 0403 	bic.w	r4, r4, #3
 800427c:	42a0      	cmp	r0, r4
 800427e:	d007      	beq.n	8004290 <sbrk_aligned+0x38>
 8004280:	1a21      	subs	r1, r4, r0
 8004282:	4628      	mov	r0, r5
 8004284:	f000 f8bc 	bl	8004400 <_sbrk_r>
 8004288:	3001      	adds	r0, #1
 800428a:	d101      	bne.n	8004290 <sbrk_aligned+0x38>
 800428c:	f04f 34ff 	mov.w	r4, #4294967295
 8004290:	4620      	mov	r0, r4
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	200001f8 	.word	0x200001f8

08004298 <_malloc_r>:
 8004298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800429c:	1ccd      	adds	r5, r1, #3
 800429e:	f025 0503 	bic.w	r5, r5, #3
 80042a2:	3508      	adds	r5, #8
 80042a4:	2d0c      	cmp	r5, #12
 80042a6:	bf38      	it	cc
 80042a8:	250c      	movcc	r5, #12
 80042aa:	2d00      	cmp	r5, #0
 80042ac:	4607      	mov	r7, r0
 80042ae:	db01      	blt.n	80042b4 <_malloc_r+0x1c>
 80042b0:	42a9      	cmp	r1, r5
 80042b2:	d905      	bls.n	80042c0 <_malloc_r+0x28>
 80042b4:	230c      	movs	r3, #12
 80042b6:	2600      	movs	r6, #0
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	4630      	mov	r0, r6
 80042bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004394 <_malloc_r+0xfc>
 80042c4:	f000 f868 	bl	8004398 <__malloc_lock>
 80042c8:	f8d8 3000 	ldr.w	r3, [r8]
 80042cc:	461c      	mov	r4, r3
 80042ce:	bb5c      	cbnz	r4, 8004328 <_malloc_r+0x90>
 80042d0:	4629      	mov	r1, r5
 80042d2:	4638      	mov	r0, r7
 80042d4:	f7ff ffc0 	bl	8004258 <sbrk_aligned>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	4604      	mov	r4, r0
 80042dc:	d155      	bne.n	800438a <_malloc_r+0xf2>
 80042de:	f8d8 4000 	ldr.w	r4, [r8]
 80042e2:	4626      	mov	r6, r4
 80042e4:	2e00      	cmp	r6, #0
 80042e6:	d145      	bne.n	8004374 <_malloc_r+0xdc>
 80042e8:	2c00      	cmp	r4, #0
 80042ea:	d048      	beq.n	800437e <_malloc_r+0xe6>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	4631      	mov	r1, r6
 80042f0:	4638      	mov	r0, r7
 80042f2:	eb04 0903 	add.w	r9, r4, r3
 80042f6:	f000 f883 	bl	8004400 <_sbrk_r>
 80042fa:	4581      	cmp	r9, r0
 80042fc:	d13f      	bne.n	800437e <_malloc_r+0xe6>
 80042fe:	6821      	ldr	r1, [r4, #0]
 8004300:	4638      	mov	r0, r7
 8004302:	1a6d      	subs	r5, r5, r1
 8004304:	4629      	mov	r1, r5
 8004306:	f7ff ffa7 	bl	8004258 <sbrk_aligned>
 800430a:	3001      	adds	r0, #1
 800430c:	d037      	beq.n	800437e <_malloc_r+0xe6>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	442b      	add	r3, r5
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	f8d8 3000 	ldr.w	r3, [r8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d038      	beq.n	800438e <_malloc_r+0xf6>
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	42a2      	cmp	r2, r4
 8004320:	d12b      	bne.n	800437a <_malloc_r+0xe2>
 8004322:	2200      	movs	r2, #0
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	e00f      	b.n	8004348 <_malloc_r+0xb0>
 8004328:	6822      	ldr	r2, [r4, #0]
 800432a:	1b52      	subs	r2, r2, r5
 800432c:	d41f      	bmi.n	800436e <_malloc_r+0xd6>
 800432e:	2a0b      	cmp	r2, #11
 8004330:	d917      	bls.n	8004362 <_malloc_r+0xca>
 8004332:	1961      	adds	r1, r4, r5
 8004334:	42a3      	cmp	r3, r4
 8004336:	6025      	str	r5, [r4, #0]
 8004338:	bf18      	it	ne
 800433a:	6059      	strne	r1, [r3, #4]
 800433c:	6863      	ldr	r3, [r4, #4]
 800433e:	bf08      	it	eq
 8004340:	f8c8 1000 	streq.w	r1, [r8]
 8004344:	5162      	str	r2, [r4, r5]
 8004346:	604b      	str	r3, [r1, #4]
 8004348:	4638      	mov	r0, r7
 800434a:	f104 060b 	add.w	r6, r4, #11
 800434e:	f000 f829 	bl	80043a4 <__malloc_unlock>
 8004352:	f026 0607 	bic.w	r6, r6, #7
 8004356:	1d23      	adds	r3, r4, #4
 8004358:	1af2      	subs	r2, r6, r3
 800435a:	d0ae      	beq.n	80042ba <_malloc_r+0x22>
 800435c:	1b9b      	subs	r3, r3, r6
 800435e:	50a3      	str	r3, [r4, r2]
 8004360:	e7ab      	b.n	80042ba <_malloc_r+0x22>
 8004362:	42a3      	cmp	r3, r4
 8004364:	6862      	ldr	r2, [r4, #4]
 8004366:	d1dd      	bne.n	8004324 <_malloc_r+0x8c>
 8004368:	f8c8 2000 	str.w	r2, [r8]
 800436c:	e7ec      	b.n	8004348 <_malloc_r+0xb0>
 800436e:	4623      	mov	r3, r4
 8004370:	6864      	ldr	r4, [r4, #4]
 8004372:	e7ac      	b.n	80042ce <_malloc_r+0x36>
 8004374:	4634      	mov	r4, r6
 8004376:	6876      	ldr	r6, [r6, #4]
 8004378:	e7b4      	b.n	80042e4 <_malloc_r+0x4c>
 800437a:	4613      	mov	r3, r2
 800437c:	e7cc      	b.n	8004318 <_malloc_r+0x80>
 800437e:	230c      	movs	r3, #12
 8004380:	4638      	mov	r0, r7
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	f000 f80e 	bl	80043a4 <__malloc_unlock>
 8004388:	e797      	b.n	80042ba <_malloc_r+0x22>
 800438a:	6025      	str	r5, [r4, #0]
 800438c:	e7dc      	b.n	8004348 <_malloc_r+0xb0>
 800438e:	605b      	str	r3, [r3, #4]
 8004390:	deff      	udf	#255	; 0xff
 8004392:	bf00      	nop
 8004394:	200001f4 	.word	0x200001f4

08004398 <__malloc_lock>:
 8004398:	4801      	ldr	r0, [pc, #4]	; (80043a0 <__malloc_lock+0x8>)
 800439a:	f000 b86b 	b.w	8004474 <__retarget_lock_acquire_recursive>
 800439e:	bf00      	nop
 80043a0:	20000338 	.word	0x20000338

080043a4 <__malloc_unlock>:
 80043a4:	4801      	ldr	r0, [pc, #4]	; (80043ac <__malloc_unlock+0x8>)
 80043a6:	f000 b866 	b.w	8004476 <__retarget_lock_release_recursive>
 80043aa:	bf00      	nop
 80043ac:	20000338 	.word	0x20000338

080043b0 <siprintf>:
 80043b0:	b40e      	push	{r1, r2, r3}
 80043b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043b6:	b500      	push	{lr}
 80043b8:	b09c      	sub	sp, #112	; 0x70
 80043ba:	ab1d      	add	r3, sp, #116	; 0x74
 80043bc:	9002      	str	r0, [sp, #8]
 80043be:	9006      	str	r0, [sp, #24]
 80043c0:	9107      	str	r1, [sp, #28]
 80043c2:	9104      	str	r1, [sp, #16]
 80043c4:	4808      	ldr	r0, [pc, #32]	; (80043e8 <siprintf+0x38>)
 80043c6:	4909      	ldr	r1, [pc, #36]	; (80043ec <siprintf+0x3c>)
 80043c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80043cc:	9105      	str	r1, [sp, #20]
 80043ce:	6800      	ldr	r0, [r0, #0]
 80043d0:	a902      	add	r1, sp, #8
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	f000 f8fa 	bl	80045cc <_svfiprintf_r>
 80043d8:	2200      	movs	r2, #0
 80043da:	9b02      	ldr	r3, [sp, #8]
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	b01c      	add	sp, #112	; 0x70
 80043e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e4:	b003      	add	sp, #12
 80043e6:	4770      	bx	lr
 80043e8:	2000006c 	.word	0x2000006c
 80043ec:	ffff0208 	.word	0xffff0208

080043f0 <memset>:
 80043f0:	4603      	mov	r3, r0
 80043f2:	4402      	add	r2, r0
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d100      	bne.n	80043fa <memset+0xa>
 80043f8:	4770      	bx	lr
 80043fa:	f803 1b01 	strb.w	r1, [r3], #1
 80043fe:	e7f9      	b.n	80043f4 <memset+0x4>

08004400 <_sbrk_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	2300      	movs	r3, #0
 8004404:	4d05      	ldr	r5, [pc, #20]	; (800441c <_sbrk_r+0x1c>)
 8004406:	4604      	mov	r4, r0
 8004408:	4608      	mov	r0, r1
 800440a:	602b      	str	r3, [r5, #0]
 800440c:	f7fd f8dc 	bl	80015c8 <_sbrk>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	d102      	bne.n	800441a <_sbrk_r+0x1a>
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	b103      	cbz	r3, 800441a <_sbrk_r+0x1a>
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	20000334 	.word	0x20000334

08004420 <__errno>:
 8004420:	4b01      	ldr	r3, [pc, #4]	; (8004428 <__errno+0x8>)
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	2000006c 	.word	0x2000006c

0800442c <__libc_init_array>:
 800442c:	b570      	push	{r4, r5, r6, lr}
 800442e:	2600      	movs	r6, #0
 8004430:	4d0c      	ldr	r5, [pc, #48]	; (8004464 <__libc_init_array+0x38>)
 8004432:	4c0d      	ldr	r4, [pc, #52]	; (8004468 <__libc_init_array+0x3c>)
 8004434:	1b64      	subs	r4, r4, r5
 8004436:	10a4      	asrs	r4, r4, #2
 8004438:	42a6      	cmp	r6, r4
 800443a:	d109      	bne.n	8004450 <__libc_init_array+0x24>
 800443c:	f000 fbc6 	bl	8004bcc <_init>
 8004440:	2600      	movs	r6, #0
 8004442:	4d0a      	ldr	r5, [pc, #40]	; (800446c <__libc_init_array+0x40>)
 8004444:	4c0a      	ldr	r4, [pc, #40]	; (8004470 <__libc_init_array+0x44>)
 8004446:	1b64      	subs	r4, r4, r5
 8004448:	10a4      	asrs	r4, r4, #2
 800444a:	42a6      	cmp	r6, r4
 800444c:	d105      	bne.n	800445a <__libc_init_array+0x2e>
 800444e:	bd70      	pop	{r4, r5, r6, pc}
 8004450:	f855 3b04 	ldr.w	r3, [r5], #4
 8004454:	4798      	blx	r3
 8004456:	3601      	adds	r6, #1
 8004458:	e7ee      	b.n	8004438 <__libc_init_array+0xc>
 800445a:	f855 3b04 	ldr.w	r3, [r5], #4
 800445e:	4798      	blx	r3
 8004460:	3601      	adds	r6, #1
 8004462:	e7f2      	b.n	800444a <__libc_init_array+0x1e>
 8004464:	08004d3c 	.word	0x08004d3c
 8004468:	08004d3c 	.word	0x08004d3c
 800446c:	08004d3c 	.word	0x08004d3c
 8004470:	08004d40 	.word	0x08004d40

08004474 <__retarget_lock_acquire_recursive>:
 8004474:	4770      	bx	lr

08004476 <__retarget_lock_release_recursive>:
 8004476:	4770      	bx	lr

08004478 <strcpy>:
 8004478:	4603      	mov	r3, r0
 800447a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800447e:	f803 2b01 	strb.w	r2, [r3], #1
 8004482:	2a00      	cmp	r2, #0
 8004484:	d1f9      	bne.n	800447a <strcpy+0x2>
 8004486:	4770      	bx	lr

08004488 <_free_r>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4605      	mov	r5, r0
 800448c:	2900      	cmp	r1, #0
 800448e:	d040      	beq.n	8004512 <_free_r+0x8a>
 8004490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004494:	1f0c      	subs	r4, r1, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	bfb8      	it	lt
 800449a:	18e4      	addlt	r4, r4, r3
 800449c:	f7ff ff7c 	bl	8004398 <__malloc_lock>
 80044a0:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <_free_r+0x8c>)
 80044a2:	6813      	ldr	r3, [r2, #0]
 80044a4:	b933      	cbnz	r3, 80044b4 <_free_r+0x2c>
 80044a6:	6063      	str	r3, [r4, #4]
 80044a8:	6014      	str	r4, [r2, #0]
 80044aa:	4628      	mov	r0, r5
 80044ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044b0:	f7ff bf78 	b.w	80043a4 <__malloc_unlock>
 80044b4:	42a3      	cmp	r3, r4
 80044b6:	d908      	bls.n	80044ca <_free_r+0x42>
 80044b8:	6820      	ldr	r0, [r4, #0]
 80044ba:	1821      	adds	r1, r4, r0
 80044bc:	428b      	cmp	r3, r1
 80044be:	bf01      	itttt	eq
 80044c0:	6819      	ldreq	r1, [r3, #0]
 80044c2:	685b      	ldreq	r3, [r3, #4]
 80044c4:	1809      	addeq	r1, r1, r0
 80044c6:	6021      	streq	r1, [r4, #0]
 80044c8:	e7ed      	b.n	80044a6 <_free_r+0x1e>
 80044ca:	461a      	mov	r2, r3
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	b10b      	cbz	r3, 80044d4 <_free_r+0x4c>
 80044d0:	42a3      	cmp	r3, r4
 80044d2:	d9fa      	bls.n	80044ca <_free_r+0x42>
 80044d4:	6811      	ldr	r1, [r2, #0]
 80044d6:	1850      	adds	r0, r2, r1
 80044d8:	42a0      	cmp	r0, r4
 80044da:	d10b      	bne.n	80044f4 <_free_r+0x6c>
 80044dc:	6820      	ldr	r0, [r4, #0]
 80044de:	4401      	add	r1, r0
 80044e0:	1850      	adds	r0, r2, r1
 80044e2:	4283      	cmp	r3, r0
 80044e4:	6011      	str	r1, [r2, #0]
 80044e6:	d1e0      	bne.n	80044aa <_free_r+0x22>
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4408      	add	r0, r1
 80044ee:	6010      	str	r0, [r2, #0]
 80044f0:	6053      	str	r3, [r2, #4]
 80044f2:	e7da      	b.n	80044aa <_free_r+0x22>
 80044f4:	d902      	bls.n	80044fc <_free_r+0x74>
 80044f6:	230c      	movs	r3, #12
 80044f8:	602b      	str	r3, [r5, #0]
 80044fa:	e7d6      	b.n	80044aa <_free_r+0x22>
 80044fc:	6820      	ldr	r0, [r4, #0]
 80044fe:	1821      	adds	r1, r4, r0
 8004500:	428b      	cmp	r3, r1
 8004502:	bf01      	itttt	eq
 8004504:	6819      	ldreq	r1, [r3, #0]
 8004506:	685b      	ldreq	r3, [r3, #4]
 8004508:	1809      	addeq	r1, r1, r0
 800450a:	6021      	streq	r1, [r4, #0]
 800450c:	6063      	str	r3, [r4, #4]
 800450e:	6054      	str	r4, [r2, #4]
 8004510:	e7cb      	b.n	80044aa <_free_r+0x22>
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	200001f4 	.word	0x200001f4

08004518 <__ssputs_r>:
 8004518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800451c:	461f      	mov	r7, r3
 800451e:	688e      	ldr	r6, [r1, #8]
 8004520:	4682      	mov	sl, r0
 8004522:	42be      	cmp	r6, r7
 8004524:	460c      	mov	r4, r1
 8004526:	4690      	mov	r8, r2
 8004528:	680b      	ldr	r3, [r1, #0]
 800452a:	d82c      	bhi.n	8004586 <__ssputs_r+0x6e>
 800452c:	898a      	ldrh	r2, [r1, #12]
 800452e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004532:	d026      	beq.n	8004582 <__ssputs_r+0x6a>
 8004534:	6965      	ldr	r5, [r4, #20]
 8004536:	6909      	ldr	r1, [r1, #16]
 8004538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800453c:	eba3 0901 	sub.w	r9, r3, r1
 8004540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004544:	1c7b      	adds	r3, r7, #1
 8004546:	444b      	add	r3, r9
 8004548:	106d      	asrs	r5, r5, #1
 800454a:	429d      	cmp	r5, r3
 800454c:	bf38      	it	cc
 800454e:	461d      	movcc	r5, r3
 8004550:	0553      	lsls	r3, r2, #21
 8004552:	d527      	bpl.n	80045a4 <__ssputs_r+0x8c>
 8004554:	4629      	mov	r1, r5
 8004556:	f7ff fe9f 	bl	8004298 <_malloc_r>
 800455a:	4606      	mov	r6, r0
 800455c:	b360      	cbz	r0, 80045b8 <__ssputs_r+0xa0>
 800455e:	464a      	mov	r2, r9
 8004560:	6921      	ldr	r1, [r4, #16]
 8004562:	f000 faed 	bl	8004b40 <memcpy>
 8004566:	89a3      	ldrh	r3, [r4, #12]
 8004568:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800456c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004570:	81a3      	strh	r3, [r4, #12]
 8004572:	6126      	str	r6, [r4, #16]
 8004574:	444e      	add	r6, r9
 8004576:	6026      	str	r6, [r4, #0]
 8004578:	463e      	mov	r6, r7
 800457a:	6165      	str	r5, [r4, #20]
 800457c:	eba5 0509 	sub.w	r5, r5, r9
 8004580:	60a5      	str	r5, [r4, #8]
 8004582:	42be      	cmp	r6, r7
 8004584:	d900      	bls.n	8004588 <__ssputs_r+0x70>
 8004586:	463e      	mov	r6, r7
 8004588:	4632      	mov	r2, r6
 800458a:	4641      	mov	r1, r8
 800458c:	6820      	ldr	r0, [r4, #0]
 800458e:	f000 faaf 	bl	8004af0 <memmove>
 8004592:	2000      	movs	r0, #0
 8004594:	68a3      	ldr	r3, [r4, #8]
 8004596:	1b9b      	subs	r3, r3, r6
 8004598:	60a3      	str	r3, [r4, #8]
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	4433      	add	r3, r6
 800459e:	6023      	str	r3, [r4, #0]
 80045a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a4:	462a      	mov	r2, r5
 80045a6:	f000 fad9 	bl	8004b5c <_realloc_r>
 80045aa:	4606      	mov	r6, r0
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d1e0      	bne.n	8004572 <__ssputs_r+0x5a>
 80045b0:	4650      	mov	r0, sl
 80045b2:	6921      	ldr	r1, [r4, #16]
 80045b4:	f7ff ff68 	bl	8004488 <_free_r>
 80045b8:	230c      	movs	r3, #12
 80045ba:	f8ca 3000 	str.w	r3, [sl]
 80045be:	89a3      	ldrh	r3, [r4, #12]
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	e7e9      	b.n	80045a0 <__ssputs_r+0x88>

080045cc <_svfiprintf_r>:
 80045cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d0:	4698      	mov	r8, r3
 80045d2:	898b      	ldrh	r3, [r1, #12]
 80045d4:	4607      	mov	r7, r0
 80045d6:	061b      	lsls	r3, r3, #24
 80045d8:	460d      	mov	r5, r1
 80045da:	4614      	mov	r4, r2
 80045dc:	b09d      	sub	sp, #116	; 0x74
 80045de:	d50e      	bpl.n	80045fe <_svfiprintf_r+0x32>
 80045e0:	690b      	ldr	r3, [r1, #16]
 80045e2:	b963      	cbnz	r3, 80045fe <_svfiprintf_r+0x32>
 80045e4:	2140      	movs	r1, #64	; 0x40
 80045e6:	f7ff fe57 	bl	8004298 <_malloc_r>
 80045ea:	6028      	str	r0, [r5, #0]
 80045ec:	6128      	str	r0, [r5, #16]
 80045ee:	b920      	cbnz	r0, 80045fa <_svfiprintf_r+0x2e>
 80045f0:	230c      	movs	r3, #12
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	e0d0      	b.n	800479c <_svfiprintf_r+0x1d0>
 80045fa:	2340      	movs	r3, #64	; 0x40
 80045fc:	616b      	str	r3, [r5, #20]
 80045fe:	2300      	movs	r3, #0
 8004600:	9309      	str	r3, [sp, #36]	; 0x24
 8004602:	2320      	movs	r3, #32
 8004604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004608:	2330      	movs	r3, #48	; 0x30
 800460a:	f04f 0901 	mov.w	r9, #1
 800460e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004612:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80047b4 <_svfiprintf_r+0x1e8>
 8004616:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800461a:	4623      	mov	r3, r4
 800461c:	469a      	mov	sl, r3
 800461e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004622:	b10a      	cbz	r2, 8004628 <_svfiprintf_r+0x5c>
 8004624:	2a25      	cmp	r2, #37	; 0x25
 8004626:	d1f9      	bne.n	800461c <_svfiprintf_r+0x50>
 8004628:	ebba 0b04 	subs.w	fp, sl, r4
 800462c:	d00b      	beq.n	8004646 <_svfiprintf_r+0x7a>
 800462e:	465b      	mov	r3, fp
 8004630:	4622      	mov	r2, r4
 8004632:	4629      	mov	r1, r5
 8004634:	4638      	mov	r0, r7
 8004636:	f7ff ff6f 	bl	8004518 <__ssputs_r>
 800463a:	3001      	adds	r0, #1
 800463c:	f000 80a9 	beq.w	8004792 <_svfiprintf_r+0x1c6>
 8004640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004642:	445a      	add	r2, fp
 8004644:	9209      	str	r2, [sp, #36]	; 0x24
 8004646:	f89a 3000 	ldrb.w	r3, [sl]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 80a1 	beq.w	8004792 <_svfiprintf_r+0x1c6>
 8004650:	2300      	movs	r3, #0
 8004652:	f04f 32ff 	mov.w	r2, #4294967295
 8004656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800465a:	f10a 0a01 	add.w	sl, sl, #1
 800465e:	9304      	str	r3, [sp, #16]
 8004660:	9307      	str	r3, [sp, #28]
 8004662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004666:	931a      	str	r3, [sp, #104]	; 0x68
 8004668:	4654      	mov	r4, sl
 800466a:	2205      	movs	r2, #5
 800466c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004670:	4850      	ldr	r0, [pc, #320]	; (80047b4 <_svfiprintf_r+0x1e8>)
 8004672:	f000 fa57 	bl	8004b24 <memchr>
 8004676:	9a04      	ldr	r2, [sp, #16]
 8004678:	b9d8      	cbnz	r0, 80046b2 <_svfiprintf_r+0xe6>
 800467a:	06d0      	lsls	r0, r2, #27
 800467c:	bf44      	itt	mi
 800467e:	2320      	movmi	r3, #32
 8004680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004684:	0711      	lsls	r1, r2, #28
 8004686:	bf44      	itt	mi
 8004688:	232b      	movmi	r3, #43	; 0x2b
 800468a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800468e:	f89a 3000 	ldrb.w	r3, [sl]
 8004692:	2b2a      	cmp	r3, #42	; 0x2a
 8004694:	d015      	beq.n	80046c2 <_svfiprintf_r+0xf6>
 8004696:	4654      	mov	r4, sl
 8004698:	2000      	movs	r0, #0
 800469a:	f04f 0c0a 	mov.w	ip, #10
 800469e:	9a07      	ldr	r2, [sp, #28]
 80046a0:	4621      	mov	r1, r4
 80046a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046a6:	3b30      	subs	r3, #48	; 0x30
 80046a8:	2b09      	cmp	r3, #9
 80046aa:	d94d      	bls.n	8004748 <_svfiprintf_r+0x17c>
 80046ac:	b1b0      	cbz	r0, 80046dc <_svfiprintf_r+0x110>
 80046ae:	9207      	str	r2, [sp, #28]
 80046b0:	e014      	b.n	80046dc <_svfiprintf_r+0x110>
 80046b2:	eba0 0308 	sub.w	r3, r0, r8
 80046b6:	fa09 f303 	lsl.w	r3, r9, r3
 80046ba:	4313      	orrs	r3, r2
 80046bc:	46a2      	mov	sl, r4
 80046be:	9304      	str	r3, [sp, #16]
 80046c0:	e7d2      	b.n	8004668 <_svfiprintf_r+0x9c>
 80046c2:	9b03      	ldr	r3, [sp, #12]
 80046c4:	1d19      	adds	r1, r3, #4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	9103      	str	r1, [sp, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bfbb      	ittet	lt
 80046ce:	425b      	neglt	r3, r3
 80046d0:	f042 0202 	orrlt.w	r2, r2, #2
 80046d4:	9307      	strge	r3, [sp, #28]
 80046d6:	9307      	strlt	r3, [sp, #28]
 80046d8:	bfb8      	it	lt
 80046da:	9204      	strlt	r2, [sp, #16]
 80046dc:	7823      	ldrb	r3, [r4, #0]
 80046de:	2b2e      	cmp	r3, #46	; 0x2e
 80046e0:	d10c      	bne.n	80046fc <_svfiprintf_r+0x130>
 80046e2:	7863      	ldrb	r3, [r4, #1]
 80046e4:	2b2a      	cmp	r3, #42	; 0x2a
 80046e6:	d134      	bne.n	8004752 <_svfiprintf_r+0x186>
 80046e8:	9b03      	ldr	r3, [sp, #12]
 80046ea:	3402      	adds	r4, #2
 80046ec:	1d1a      	adds	r2, r3, #4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	9203      	str	r2, [sp, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bfb8      	it	lt
 80046f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80046fa:	9305      	str	r3, [sp, #20]
 80046fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80047b8 <_svfiprintf_r+0x1ec>
 8004700:	2203      	movs	r2, #3
 8004702:	4650      	mov	r0, sl
 8004704:	7821      	ldrb	r1, [r4, #0]
 8004706:	f000 fa0d 	bl	8004b24 <memchr>
 800470a:	b138      	cbz	r0, 800471c <_svfiprintf_r+0x150>
 800470c:	2240      	movs	r2, #64	; 0x40
 800470e:	9b04      	ldr	r3, [sp, #16]
 8004710:	eba0 000a 	sub.w	r0, r0, sl
 8004714:	4082      	lsls	r2, r0
 8004716:	4313      	orrs	r3, r2
 8004718:	3401      	adds	r4, #1
 800471a:	9304      	str	r3, [sp, #16]
 800471c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004720:	2206      	movs	r2, #6
 8004722:	4826      	ldr	r0, [pc, #152]	; (80047bc <_svfiprintf_r+0x1f0>)
 8004724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004728:	f000 f9fc 	bl	8004b24 <memchr>
 800472c:	2800      	cmp	r0, #0
 800472e:	d038      	beq.n	80047a2 <_svfiprintf_r+0x1d6>
 8004730:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <_svfiprintf_r+0x1f4>)
 8004732:	bb1b      	cbnz	r3, 800477c <_svfiprintf_r+0x1b0>
 8004734:	9b03      	ldr	r3, [sp, #12]
 8004736:	3307      	adds	r3, #7
 8004738:	f023 0307 	bic.w	r3, r3, #7
 800473c:	3308      	adds	r3, #8
 800473e:	9303      	str	r3, [sp, #12]
 8004740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004742:	4433      	add	r3, r6
 8004744:	9309      	str	r3, [sp, #36]	; 0x24
 8004746:	e768      	b.n	800461a <_svfiprintf_r+0x4e>
 8004748:	460c      	mov	r4, r1
 800474a:	2001      	movs	r0, #1
 800474c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004750:	e7a6      	b.n	80046a0 <_svfiprintf_r+0xd4>
 8004752:	2300      	movs	r3, #0
 8004754:	f04f 0c0a 	mov.w	ip, #10
 8004758:	4619      	mov	r1, r3
 800475a:	3401      	adds	r4, #1
 800475c:	9305      	str	r3, [sp, #20]
 800475e:	4620      	mov	r0, r4
 8004760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004764:	3a30      	subs	r2, #48	; 0x30
 8004766:	2a09      	cmp	r2, #9
 8004768:	d903      	bls.n	8004772 <_svfiprintf_r+0x1a6>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0c6      	beq.n	80046fc <_svfiprintf_r+0x130>
 800476e:	9105      	str	r1, [sp, #20]
 8004770:	e7c4      	b.n	80046fc <_svfiprintf_r+0x130>
 8004772:	4604      	mov	r4, r0
 8004774:	2301      	movs	r3, #1
 8004776:	fb0c 2101 	mla	r1, ip, r1, r2
 800477a:	e7f0      	b.n	800475e <_svfiprintf_r+0x192>
 800477c:	ab03      	add	r3, sp, #12
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	462a      	mov	r2, r5
 8004782:	4638      	mov	r0, r7
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <_svfiprintf_r+0x1f8>)
 8004786:	a904      	add	r1, sp, #16
 8004788:	f3af 8000 	nop.w
 800478c:	1c42      	adds	r2, r0, #1
 800478e:	4606      	mov	r6, r0
 8004790:	d1d6      	bne.n	8004740 <_svfiprintf_r+0x174>
 8004792:	89ab      	ldrh	r3, [r5, #12]
 8004794:	065b      	lsls	r3, r3, #25
 8004796:	f53f af2d 	bmi.w	80045f4 <_svfiprintf_r+0x28>
 800479a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800479c:	b01d      	add	sp, #116	; 0x74
 800479e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a2:	ab03      	add	r3, sp, #12
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	462a      	mov	r2, r5
 80047a8:	4638      	mov	r0, r7
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <_svfiprintf_r+0x1f8>)
 80047ac:	a904      	add	r1, sp, #16
 80047ae:	f000 f87d 	bl	80048ac <_printf_i>
 80047b2:	e7eb      	b.n	800478c <_svfiprintf_r+0x1c0>
 80047b4:	08004d06 	.word	0x08004d06
 80047b8:	08004d0c 	.word	0x08004d0c
 80047bc:	08004d10 	.word	0x08004d10
 80047c0:	00000000 	.word	0x00000000
 80047c4:	08004519 	.word	0x08004519

080047c8 <_printf_common>:
 80047c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047cc:	4616      	mov	r6, r2
 80047ce:	4699      	mov	r9, r3
 80047d0:	688a      	ldr	r2, [r1, #8]
 80047d2:	690b      	ldr	r3, [r1, #16]
 80047d4:	4607      	mov	r7, r0
 80047d6:	4293      	cmp	r3, r2
 80047d8:	bfb8      	it	lt
 80047da:	4613      	movlt	r3, r2
 80047dc:	6033      	str	r3, [r6, #0]
 80047de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047e2:	460c      	mov	r4, r1
 80047e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047e8:	b10a      	cbz	r2, 80047ee <_printf_common+0x26>
 80047ea:	3301      	adds	r3, #1
 80047ec:	6033      	str	r3, [r6, #0]
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	0699      	lsls	r1, r3, #26
 80047f2:	bf42      	ittt	mi
 80047f4:	6833      	ldrmi	r3, [r6, #0]
 80047f6:	3302      	addmi	r3, #2
 80047f8:	6033      	strmi	r3, [r6, #0]
 80047fa:	6825      	ldr	r5, [r4, #0]
 80047fc:	f015 0506 	ands.w	r5, r5, #6
 8004800:	d106      	bne.n	8004810 <_printf_common+0x48>
 8004802:	f104 0a19 	add.w	sl, r4, #25
 8004806:	68e3      	ldr	r3, [r4, #12]
 8004808:	6832      	ldr	r2, [r6, #0]
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	42ab      	cmp	r3, r5
 800480e:	dc2b      	bgt.n	8004868 <_printf_common+0xa0>
 8004810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004814:	1e13      	subs	r3, r2, #0
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	bf18      	it	ne
 800481a:	2301      	movne	r3, #1
 800481c:	0692      	lsls	r2, r2, #26
 800481e:	d430      	bmi.n	8004882 <_printf_common+0xba>
 8004820:	4649      	mov	r1, r9
 8004822:	4638      	mov	r0, r7
 8004824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004828:	47c0      	blx	r8
 800482a:	3001      	adds	r0, #1
 800482c:	d023      	beq.n	8004876 <_printf_common+0xae>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	6922      	ldr	r2, [r4, #16]
 8004832:	f003 0306 	and.w	r3, r3, #6
 8004836:	2b04      	cmp	r3, #4
 8004838:	bf14      	ite	ne
 800483a:	2500      	movne	r5, #0
 800483c:	6833      	ldreq	r3, [r6, #0]
 800483e:	f04f 0600 	mov.w	r6, #0
 8004842:	bf08      	it	eq
 8004844:	68e5      	ldreq	r5, [r4, #12]
 8004846:	f104 041a 	add.w	r4, r4, #26
 800484a:	bf08      	it	eq
 800484c:	1aed      	subeq	r5, r5, r3
 800484e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004852:	bf08      	it	eq
 8004854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004858:	4293      	cmp	r3, r2
 800485a:	bfc4      	itt	gt
 800485c:	1a9b      	subgt	r3, r3, r2
 800485e:	18ed      	addgt	r5, r5, r3
 8004860:	42b5      	cmp	r5, r6
 8004862:	d11a      	bne.n	800489a <_printf_common+0xd2>
 8004864:	2000      	movs	r0, #0
 8004866:	e008      	b.n	800487a <_printf_common+0xb2>
 8004868:	2301      	movs	r3, #1
 800486a:	4652      	mov	r2, sl
 800486c:	4649      	mov	r1, r9
 800486e:	4638      	mov	r0, r7
 8004870:	47c0      	blx	r8
 8004872:	3001      	adds	r0, #1
 8004874:	d103      	bne.n	800487e <_printf_common+0xb6>
 8004876:	f04f 30ff 	mov.w	r0, #4294967295
 800487a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487e:	3501      	adds	r5, #1
 8004880:	e7c1      	b.n	8004806 <_printf_common+0x3e>
 8004882:	2030      	movs	r0, #48	; 0x30
 8004884:	18e1      	adds	r1, r4, r3
 8004886:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004890:	4422      	add	r2, r4
 8004892:	3302      	adds	r3, #2
 8004894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004898:	e7c2      	b.n	8004820 <_printf_common+0x58>
 800489a:	2301      	movs	r3, #1
 800489c:	4622      	mov	r2, r4
 800489e:	4649      	mov	r1, r9
 80048a0:	4638      	mov	r0, r7
 80048a2:	47c0      	blx	r8
 80048a4:	3001      	adds	r0, #1
 80048a6:	d0e6      	beq.n	8004876 <_printf_common+0xae>
 80048a8:	3601      	adds	r6, #1
 80048aa:	e7d9      	b.n	8004860 <_printf_common+0x98>

080048ac <_printf_i>:
 80048ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	7e0f      	ldrb	r7, [r1, #24]
 80048b2:	4691      	mov	r9, r2
 80048b4:	2f78      	cmp	r7, #120	; 0x78
 80048b6:	4680      	mov	r8, r0
 80048b8:	460c      	mov	r4, r1
 80048ba:	469a      	mov	sl, r3
 80048bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048c2:	d807      	bhi.n	80048d4 <_printf_i+0x28>
 80048c4:	2f62      	cmp	r7, #98	; 0x62
 80048c6:	d80a      	bhi.n	80048de <_printf_i+0x32>
 80048c8:	2f00      	cmp	r7, #0
 80048ca:	f000 80d5 	beq.w	8004a78 <_printf_i+0x1cc>
 80048ce:	2f58      	cmp	r7, #88	; 0x58
 80048d0:	f000 80c1 	beq.w	8004a56 <_printf_i+0x1aa>
 80048d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048dc:	e03a      	b.n	8004954 <_printf_i+0xa8>
 80048de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048e2:	2b15      	cmp	r3, #21
 80048e4:	d8f6      	bhi.n	80048d4 <_printf_i+0x28>
 80048e6:	a101      	add	r1, pc, #4	; (adr r1, 80048ec <_printf_i+0x40>)
 80048e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048ec:	08004945 	.word	0x08004945
 80048f0:	08004959 	.word	0x08004959
 80048f4:	080048d5 	.word	0x080048d5
 80048f8:	080048d5 	.word	0x080048d5
 80048fc:	080048d5 	.word	0x080048d5
 8004900:	080048d5 	.word	0x080048d5
 8004904:	08004959 	.word	0x08004959
 8004908:	080048d5 	.word	0x080048d5
 800490c:	080048d5 	.word	0x080048d5
 8004910:	080048d5 	.word	0x080048d5
 8004914:	080048d5 	.word	0x080048d5
 8004918:	08004a5f 	.word	0x08004a5f
 800491c:	08004985 	.word	0x08004985
 8004920:	08004a19 	.word	0x08004a19
 8004924:	080048d5 	.word	0x080048d5
 8004928:	080048d5 	.word	0x080048d5
 800492c:	08004a81 	.word	0x08004a81
 8004930:	080048d5 	.word	0x080048d5
 8004934:	08004985 	.word	0x08004985
 8004938:	080048d5 	.word	0x080048d5
 800493c:	080048d5 	.word	0x080048d5
 8004940:	08004a21 	.word	0x08004a21
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	1d1a      	adds	r2, r3, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	602a      	str	r2, [r5, #0]
 800494c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004954:	2301      	movs	r3, #1
 8004956:	e0a0      	b.n	8004a9a <_printf_i+0x1ee>
 8004958:	6820      	ldr	r0, [r4, #0]
 800495a:	682b      	ldr	r3, [r5, #0]
 800495c:	0607      	lsls	r7, r0, #24
 800495e:	f103 0104 	add.w	r1, r3, #4
 8004962:	6029      	str	r1, [r5, #0]
 8004964:	d501      	bpl.n	800496a <_printf_i+0xbe>
 8004966:	681e      	ldr	r6, [r3, #0]
 8004968:	e003      	b.n	8004972 <_printf_i+0xc6>
 800496a:	0646      	lsls	r6, r0, #25
 800496c:	d5fb      	bpl.n	8004966 <_printf_i+0xba>
 800496e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004972:	2e00      	cmp	r6, #0
 8004974:	da03      	bge.n	800497e <_printf_i+0xd2>
 8004976:	232d      	movs	r3, #45	; 0x2d
 8004978:	4276      	negs	r6, r6
 800497a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800497e:	230a      	movs	r3, #10
 8004980:	4859      	ldr	r0, [pc, #356]	; (8004ae8 <_printf_i+0x23c>)
 8004982:	e012      	b.n	80049aa <_printf_i+0xfe>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	6820      	ldr	r0, [r4, #0]
 8004988:	1d19      	adds	r1, r3, #4
 800498a:	6029      	str	r1, [r5, #0]
 800498c:	0605      	lsls	r5, r0, #24
 800498e:	d501      	bpl.n	8004994 <_printf_i+0xe8>
 8004990:	681e      	ldr	r6, [r3, #0]
 8004992:	e002      	b.n	800499a <_printf_i+0xee>
 8004994:	0641      	lsls	r1, r0, #25
 8004996:	d5fb      	bpl.n	8004990 <_printf_i+0xe4>
 8004998:	881e      	ldrh	r6, [r3, #0]
 800499a:	2f6f      	cmp	r7, #111	; 0x6f
 800499c:	bf0c      	ite	eq
 800499e:	2308      	moveq	r3, #8
 80049a0:	230a      	movne	r3, #10
 80049a2:	4851      	ldr	r0, [pc, #324]	; (8004ae8 <_printf_i+0x23c>)
 80049a4:	2100      	movs	r1, #0
 80049a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049aa:	6865      	ldr	r5, [r4, #4]
 80049ac:	2d00      	cmp	r5, #0
 80049ae:	bfa8      	it	ge
 80049b0:	6821      	ldrge	r1, [r4, #0]
 80049b2:	60a5      	str	r5, [r4, #8]
 80049b4:	bfa4      	itt	ge
 80049b6:	f021 0104 	bicge.w	r1, r1, #4
 80049ba:	6021      	strge	r1, [r4, #0]
 80049bc:	b90e      	cbnz	r6, 80049c2 <_printf_i+0x116>
 80049be:	2d00      	cmp	r5, #0
 80049c0:	d04b      	beq.n	8004a5a <_printf_i+0x1ae>
 80049c2:	4615      	mov	r5, r2
 80049c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80049c8:	fb03 6711 	mls	r7, r3, r1, r6
 80049cc:	5dc7      	ldrb	r7, [r0, r7]
 80049ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049d2:	4637      	mov	r7, r6
 80049d4:	42bb      	cmp	r3, r7
 80049d6:	460e      	mov	r6, r1
 80049d8:	d9f4      	bls.n	80049c4 <_printf_i+0x118>
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d10b      	bne.n	80049f6 <_printf_i+0x14a>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	07de      	lsls	r6, r3, #31
 80049e2:	d508      	bpl.n	80049f6 <_printf_i+0x14a>
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	6861      	ldr	r1, [r4, #4]
 80049e8:	4299      	cmp	r1, r3
 80049ea:	bfde      	ittt	le
 80049ec:	2330      	movle	r3, #48	; 0x30
 80049ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049f6:	1b52      	subs	r2, r2, r5
 80049f8:	6122      	str	r2, [r4, #16]
 80049fa:	464b      	mov	r3, r9
 80049fc:	4621      	mov	r1, r4
 80049fe:	4640      	mov	r0, r8
 8004a00:	f8cd a000 	str.w	sl, [sp]
 8004a04:	aa03      	add	r2, sp, #12
 8004a06:	f7ff fedf 	bl	80047c8 <_printf_common>
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d14a      	bne.n	8004aa4 <_printf_i+0x1f8>
 8004a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a12:	b004      	add	sp, #16
 8004a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	f043 0320 	orr.w	r3, r3, #32
 8004a1e:	6023      	str	r3, [r4, #0]
 8004a20:	2778      	movs	r7, #120	; 0x78
 8004a22:	4832      	ldr	r0, [pc, #200]	; (8004aec <_printf_i+0x240>)
 8004a24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	6829      	ldr	r1, [r5, #0]
 8004a2c:	061f      	lsls	r7, r3, #24
 8004a2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a32:	d402      	bmi.n	8004a3a <_printf_i+0x18e>
 8004a34:	065f      	lsls	r7, r3, #25
 8004a36:	bf48      	it	mi
 8004a38:	b2b6      	uxthmi	r6, r6
 8004a3a:	07df      	lsls	r7, r3, #31
 8004a3c:	bf48      	it	mi
 8004a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8004a42:	6029      	str	r1, [r5, #0]
 8004a44:	bf48      	it	mi
 8004a46:	6023      	strmi	r3, [r4, #0]
 8004a48:	b91e      	cbnz	r6, 8004a52 <_printf_i+0x1a6>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	f023 0320 	bic.w	r3, r3, #32
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	2310      	movs	r3, #16
 8004a54:	e7a6      	b.n	80049a4 <_printf_i+0xf8>
 8004a56:	4824      	ldr	r0, [pc, #144]	; (8004ae8 <_printf_i+0x23c>)
 8004a58:	e7e4      	b.n	8004a24 <_printf_i+0x178>
 8004a5a:	4615      	mov	r5, r2
 8004a5c:	e7bd      	b.n	80049da <_printf_i+0x12e>
 8004a5e:	682b      	ldr	r3, [r5, #0]
 8004a60:	6826      	ldr	r6, [r4, #0]
 8004a62:	1d18      	adds	r0, r3, #4
 8004a64:	6961      	ldr	r1, [r4, #20]
 8004a66:	6028      	str	r0, [r5, #0]
 8004a68:	0635      	lsls	r5, r6, #24
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	d501      	bpl.n	8004a72 <_printf_i+0x1c6>
 8004a6e:	6019      	str	r1, [r3, #0]
 8004a70:	e002      	b.n	8004a78 <_printf_i+0x1cc>
 8004a72:	0670      	lsls	r0, r6, #25
 8004a74:	d5fb      	bpl.n	8004a6e <_printf_i+0x1c2>
 8004a76:	8019      	strh	r1, [r3, #0]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	4615      	mov	r5, r2
 8004a7c:	6123      	str	r3, [r4, #16]
 8004a7e:	e7bc      	b.n	80049fa <_printf_i+0x14e>
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	2100      	movs	r1, #0
 8004a84:	1d1a      	adds	r2, r3, #4
 8004a86:	602a      	str	r2, [r5, #0]
 8004a88:	681d      	ldr	r5, [r3, #0]
 8004a8a:	6862      	ldr	r2, [r4, #4]
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 f849 	bl	8004b24 <memchr>
 8004a92:	b108      	cbz	r0, 8004a98 <_printf_i+0x1ec>
 8004a94:	1b40      	subs	r0, r0, r5
 8004a96:	6060      	str	r0, [r4, #4]
 8004a98:	6863      	ldr	r3, [r4, #4]
 8004a9a:	6123      	str	r3, [r4, #16]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa2:	e7aa      	b.n	80049fa <_printf_i+0x14e>
 8004aa4:	462a      	mov	r2, r5
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	47d0      	blx	sl
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d0ad      	beq.n	8004a0e <_printf_i+0x162>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	079b      	lsls	r3, r3, #30
 8004ab6:	d413      	bmi.n	8004ae0 <_printf_i+0x234>
 8004ab8:	68e0      	ldr	r0, [r4, #12]
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	4298      	cmp	r0, r3
 8004abe:	bfb8      	it	lt
 8004ac0:	4618      	movlt	r0, r3
 8004ac2:	e7a6      	b.n	8004a12 <_printf_i+0x166>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4632      	mov	r2, r6
 8004ac8:	4649      	mov	r1, r9
 8004aca:	4640      	mov	r0, r8
 8004acc:	47d0      	blx	sl
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d09d      	beq.n	8004a0e <_printf_i+0x162>
 8004ad2:	3501      	adds	r5, #1
 8004ad4:	68e3      	ldr	r3, [r4, #12]
 8004ad6:	9903      	ldr	r1, [sp, #12]
 8004ad8:	1a5b      	subs	r3, r3, r1
 8004ada:	42ab      	cmp	r3, r5
 8004adc:	dcf2      	bgt.n	8004ac4 <_printf_i+0x218>
 8004ade:	e7eb      	b.n	8004ab8 <_printf_i+0x20c>
 8004ae0:	2500      	movs	r5, #0
 8004ae2:	f104 0619 	add.w	r6, r4, #25
 8004ae6:	e7f5      	b.n	8004ad4 <_printf_i+0x228>
 8004ae8:	08004d17 	.word	0x08004d17
 8004aec:	08004d28 	.word	0x08004d28

08004af0 <memmove>:
 8004af0:	4288      	cmp	r0, r1
 8004af2:	b510      	push	{r4, lr}
 8004af4:	eb01 0402 	add.w	r4, r1, r2
 8004af8:	d902      	bls.n	8004b00 <memmove+0x10>
 8004afa:	4284      	cmp	r4, r0
 8004afc:	4623      	mov	r3, r4
 8004afe:	d807      	bhi.n	8004b10 <memmove+0x20>
 8004b00:	1e43      	subs	r3, r0, #1
 8004b02:	42a1      	cmp	r1, r4
 8004b04:	d008      	beq.n	8004b18 <memmove+0x28>
 8004b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b0e:	e7f8      	b.n	8004b02 <memmove+0x12>
 8004b10:	4601      	mov	r1, r0
 8004b12:	4402      	add	r2, r0
 8004b14:	428a      	cmp	r2, r1
 8004b16:	d100      	bne.n	8004b1a <memmove+0x2a>
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b22:	e7f7      	b.n	8004b14 <memmove+0x24>

08004b24 <memchr>:
 8004b24:	4603      	mov	r3, r0
 8004b26:	b510      	push	{r4, lr}
 8004b28:	b2c9      	uxtb	r1, r1
 8004b2a:	4402      	add	r2, r0
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	d101      	bne.n	8004b36 <memchr+0x12>
 8004b32:	2000      	movs	r0, #0
 8004b34:	e003      	b.n	8004b3e <memchr+0x1a>
 8004b36:	7804      	ldrb	r4, [r0, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	428c      	cmp	r4, r1
 8004b3c:	d1f6      	bne.n	8004b2c <memchr+0x8>
 8004b3e:	bd10      	pop	{r4, pc}

08004b40 <memcpy>:
 8004b40:	440a      	add	r2, r1
 8004b42:	4291      	cmp	r1, r2
 8004b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b48:	d100      	bne.n	8004b4c <memcpy+0xc>
 8004b4a:	4770      	bx	lr
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b52:	4291      	cmp	r1, r2
 8004b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b58:	d1f9      	bne.n	8004b4e <memcpy+0xe>
 8004b5a:	bd10      	pop	{r4, pc}

08004b5c <_realloc_r>:
 8004b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b60:	4680      	mov	r8, r0
 8004b62:	4614      	mov	r4, r2
 8004b64:	460e      	mov	r6, r1
 8004b66:	b921      	cbnz	r1, 8004b72 <_realloc_r+0x16>
 8004b68:	4611      	mov	r1, r2
 8004b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6e:	f7ff bb93 	b.w	8004298 <_malloc_r>
 8004b72:	b92a      	cbnz	r2, 8004b80 <_realloc_r+0x24>
 8004b74:	f7ff fc88 	bl	8004488 <_free_r>
 8004b78:	4625      	mov	r5, r4
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b80:	f000 f81b 	bl	8004bba <_malloc_usable_size_r>
 8004b84:	4284      	cmp	r4, r0
 8004b86:	4607      	mov	r7, r0
 8004b88:	d802      	bhi.n	8004b90 <_realloc_r+0x34>
 8004b8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b8e:	d812      	bhi.n	8004bb6 <_realloc_r+0x5a>
 8004b90:	4621      	mov	r1, r4
 8004b92:	4640      	mov	r0, r8
 8004b94:	f7ff fb80 	bl	8004298 <_malloc_r>
 8004b98:	4605      	mov	r5, r0
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d0ed      	beq.n	8004b7a <_realloc_r+0x1e>
 8004b9e:	42bc      	cmp	r4, r7
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	bf28      	it	cs
 8004ba6:	463a      	movcs	r2, r7
 8004ba8:	f7ff ffca 	bl	8004b40 <memcpy>
 8004bac:	4631      	mov	r1, r6
 8004bae:	4640      	mov	r0, r8
 8004bb0:	f7ff fc6a 	bl	8004488 <_free_r>
 8004bb4:	e7e1      	b.n	8004b7a <_realloc_r+0x1e>
 8004bb6:	4635      	mov	r5, r6
 8004bb8:	e7df      	b.n	8004b7a <_realloc_r+0x1e>

08004bba <_malloc_usable_size_r>:
 8004bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bbe:	1f18      	subs	r0, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bfbc      	itt	lt
 8004bc4:	580b      	ldrlt	r3, [r1, r0]
 8004bc6:	18c0      	addlt	r0, r0, r3
 8004bc8:	4770      	bx	lr
	...

08004bcc <_init>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	bf00      	nop
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr

08004bd8 <_fini>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	bf00      	nop
 8004bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bde:	bc08      	pop	{r3}
 8004be0:	469e      	mov	lr, r3
 8004be2:	4770      	bx	lr
